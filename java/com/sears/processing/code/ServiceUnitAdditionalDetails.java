/*
 * Generation Date: 21 November 2011 8:57:35 PM
 * Generated by:     CSC
 * Generated from:  nps221.CBL
 * 
 * Copyright 2011 CSC, all rights reserved.
 * 
 * This software is the proprietary information of CSC.
 * Use is subject to license terms.
 */
package com.sears.processing.code;

import static com.quipoz.COBOLFramework.COBOLFunctions.ALPHABETIC;
import static com.quipoz.COBOLFramework.COBOLFunctions.BDArrayPartOfArrayStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER;
import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER_REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSDArrayPartOfArrayStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.LOVALUES;
import static com.quipoz.COBOLFramework.COBOLFunctions.NUMERIC;
import static com.quipoz.COBOLFramework.COBOLFunctions.PtrArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.QUOTES;
import static com.quipoz.COBOLFramework.COBOLFunctions.REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.SPACES;
import static com.quipoz.COBOLFramework.COBOLFunctions.ZDArrayPartOfArrayStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.ZDArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.ZERO;
import static com.quipoz.COBOLFramework.COBOLFunctions.add;
import static com.quipoz.COBOLFramework.COBOLFunctions.compute;
import static com.quipoz.COBOLFramework.COBOLFunctions.initialize;
import static com.quipoz.COBOLFramework.COBOLFunctions.isEQ;
import static com.quipoz.COBOLFramework.COBOLFunctions.isGT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isGTE;
import static com.quipoz.COBOLFramework.COBOLFunctions.isLT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isLTE;
import static com.quipoz.COBOLFramework.COBOLFunctions.isNE;
import static com.quipoz.COBOLFramework.COBOLFunctions.setAddressToAddress;
import static com.quipoz.COBOLFramework.COBOLFunctions.sub;

import java.sql.SQLException;

import com.csc.qre.bms.screen.ScreenHelper;
import com.csc.qre.cics.CICSContext;
import com.csc.qre.cics.command.CICSCommandFactory;
import com.csc.qre.cics.command.CICSCondition;
import com.csc.qre.cics.command.CICSHandler;
import com.csc.qre.cics.command.impl.AssignTransactionDetails;
import com.csc.qre.cics.command.impl.DumpApplication;
import com.csc.qre.cics.command.impl.HandleAbend;
import com.csc.qre.cics.command.impl.IgnoreCondition;
import com.csc.qre.cics.command.impl.LinkProgram;
import com.csc.qre.cics.command.impl.ReadTemporaryStorage;
import com.csc.qre.cics.command.impl.ReleaseTemporaryStorage;
import com.csc.qre.cics.command.impl.ReturnControl;
import com.csc.qre.cics.command.impl.TransactionSyncpoint;
import com.csc.qre.cics.command.impl.TransferControl;
import com.csc.qre.cics.command.impl.WriteTemporaryStorage;
import com.csc.qre.cics.command.impl.WriteTransientStorage;
import com.csc.qre.cics.command.impl.fileaccess.DeleteRecord;
import com.csc.qre.cics.command.impl.fileaccess.ReadDirectly;
import com.csc.qre.cics.command.impl.fileaccess.RewriteRecord;
import com.csc.qre.cics.command.impl.fileaccess.WriteRecord;
import com.csc.qre.cics.command.impl.screencontrol.ScreenReceiveMap;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendMap;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendText;
import com.csc.qre.cics.util.CICSNonConvCodeModel;
import com.quipoz.COBOLFramework.datatype.Validator;
import com.quipoz.COBOLFramework.datatype.ValueRange;
import com.quipoz.COBOLFramework.util.COBOLExitProgramException;
import com.quipoz.COBOLFramework.util.StringUtil;
import com.quipoz.framework.datatype.BaseData;
import com.quipoz.framework.datatype.BinaryData;
import com.quipoz.framework.datatype.FixedLengthStringData;
import com.quipoz.framework.datatype.IntegerData;
import com.quipoz.framework.datatype.PointerData;
import com.quipoz.framework.datatype.ZonedDecimalData;
import com.sears.framework.utils.DateValidator;
import com.sears.framework.utils.ScreenNavigation;
import com.sears.processing.code.model.NPJServiceUnits;
import com.sears.processing.code.model.NPSBasUnits;
import com.sears.processing.code.model.NPSCallLoad;
import com.sears.processing.code.model.NPSEmergencyArea;
import com.sears.processing.code.model.NPSRetailUnits;
import com.sears.processing.code.model.NPSServiceUnitCharges;
import com.sears.processing.code.model.NPSServiceUnits;
import com.sears.processing.code.model.NPSTierPricingSchedule;
import com.sears.processing.code.model.NPSUnitPrinter;
import com.sears.processing.code.model.NPSUnitSchedule;
import com.sears.processing.code.model.Nps221ScreenVars;
import com.sears.processing.code.model.TempAreaForServiceUnitAdditionalDetails;
import com.sears.processing.dataaccess.IpsdrcflKsdsVsam;
import com.sears.processing.dataaccess.IpspltflKsdsVsam;
import com.sears.processing.dataaccess.IpsumgflKsdsVsam;
import com.sears.processing.dataaccess.UpjtsrpKsdsVsam;
import com.sears.processing.dataaccess.UpsmuiflKsdsVsam;

/**
 * <pre>
 * ***************************************************************   687000
 *        THE PURPOSE OF THIS MACRO IS TO ALLOW US TO            *   688000
 *        SET THE INITIAL PREFIX OF OUR DB2 TABLES OR            *   689000
 *        VIEWS AT COMPILE TIME WITHOUT HAVING TO                *   690000
 *        ACTUALLY CHANGE THE CODE.  INSTEAD, WE WILL            *   691000
 *        CHANGE THE MACRO THAT IS REFERENCED UNDER USERMAC      *   692000
 *        ON THE APS GENERATOR PANEL.                            *   693000
 *                                                               *   694000
 *        TO USE THIS MACRO, MAKE SURE THAT YOU CODE YOUR SQL    *   695000
 *        STATEMENTS TO CALL A TABLE '&TABLE-PREFIX.XX...'       *   696000
 *        INSTEAD OF HARDCODING THE SPECIFIC TABLENAME YOU MAY   *   697000
 *        BE TESTING WITH.                                       *   698000
 *                                                               *   699000
 * ***************************************************************   700000
 * ***************************************************************   701101
 *  USE THIS PREFIX FOR HMIS SOURCE TABLES                           702001
 * ***************************************************************   702101
 * AUTHOR.                         NPS TEAM.                               
 * DATE-WRITTEN.                   08/09/30.                               
 * DATE-COMPILED.                  30 SEP 08 15.38.00.                     
 * REMARKS.                                                                
 *                                                                         
 *     ***********************************************************   G     
 *     *                                                         *   G00020
 *     *                NATIONAL PRODUCT SERVICES                *   G00030
 *     *                -------------------------                *   G00040
 *     *                                                         *   G00050
 *     *  PROGRAM NAME AND LEVEL                                 *   G00060
 *     *  ----------------------                                 *   G00070
 *     *    NPS221      - UPDATE SERVICE UNIT INFORMATION        *   G00080
 *     *    APPLICATION - BUILD1                                 *   G00080
 *     *    TRANSID     - PS6F                                   *   G00080
 *     *    COLLID      - NPS*L000                               *   G00080
 *     *                                                         *   G00080
 *     *  PROGRAM BRIEF                                          *   G00080
 *     *  -------------                                          *   G00080
 *     *    NPS221 - TO UPDATE THE SERVICE UNIT INFORMATION.     *   G00080
 *     *    PSCO WILL BE ABLE TO UPDATE THIS                     *   G00080
 *     *    TABLE, ELSE IT WILL BE IN INQUIRY MODE ONLY.         *   G00080
 *     *                                                         *   G00081
 *     *  INTERFACES                                             *   G00082
 *     *  ----------                                             *   G00083
 *     *    DB2                                                  *   G00084
 *     *                                                         *   G00085
 *     *  INPUT                                                  *   G00086
 *     *  -----                                                  *   G00087
 *     *    NPJXTXU                                              *   G00088
 *     *    NPSXTSU                                              *   G00089
 *     *    NPSXTBU                                              *   G00090
 *     *    NPSXTRU ##JA-03                                      *   G00091
 *     *    NPSXTSS                                              *   G00092
 *     *    NPSXTSC                                              *   G00093
 *     *    NPSXTTP                                              *   G00094
 *     *                                                         *   G00095
 *     *  OUTPUT                                                 *   G00096
 *     *  ------                                                 *   G00097
 *     *   NPS221 INQUIRY/UPDATE SCREEN                          *   G00098
 *     *                                                         *   G00099
 *     *  PROCEDURE NAME                                         *   G00100
 *     *  --------------                                         *   G00110
 *     *    ON-LINE                                              *   G00120
 *     *                                                         *   G00130
 *     *  CALLED PROGRAMS                                        *   G00140
 *     *  ---------------                                        *   G00150
 *     *    NPS015 - MAIN MENU                                   *   G00160
 *     *    NPS050 - HELP PROGRAM                                *   G00170
 *     *    NPS231 - TABLE MAINTENANCE MENU                      *   G00180
 *     *    NPS302 - UNIT SELECTION MENU                         *   G00190
 *     *                                                         *   G00200
 *     *  CALLING PROGRAMS                                       *   G00210
 *     *  ----------------                                       *   G00220
 *     *    NPS050 - HELP PROGRAM                                *   G00230
 *     *    NPS231 - TABLE MAINTENANCE MENU                      *   G00240
 *     *    NPS302 - UNIT SELECTION MENU                         *   G00250
 *     *                                                         *   G00260
 *     *  LINK PROGRAMS                                          *   G00270
 *     *  ----------------                                       *   G00280
 *     *    NPS030 - NPS MESSAGE PROGRAM                         *   G00290
 *     *                                                         *   G00300
 *     *  ERROR MESSAGE DESCRIPTIONS                             *   G00310
 *     *  --------------------------                             *   G00320
 *     *    I005 - INDICATES THAT THE USER MAY NOT INVOKE        *   G00330
 *     *           THIS PROGRAM WITH THE TRANSID.                *   G00340
 *     *    I007 - PLEASE NOTIFY THE SYSTEMS SUPPORT GROUP       *   G00350
 *     *           ABOUT THIS MESSAGE.                           *   G00360
 *     *    I015 - CHARACTERS OTHER THAN 'Y' OR 'N' ARE INVALID  *   G00370
 *     *    0003 - INVALID KEY WAS PRESSED.                      *   G00380
 *     *    0007 - XXXXXX CANNOT BE PROGRAM INVOKED.             *   G00390
 *     *    0009 - PLEASE ENTER REQUIRED FIELD(S).               *   G00400
 *     *    0011 - HIGHLIGHTED FIELD IN ERROR.                   *   G00410
 *     *    0024 - ADD SUCCESSFUL                                *   G00420
 *     *    0025 - UPDATE SUCCESSFUL                             *   G00430
 *     *    2035 - DATA FIELD MUST BE NUMERIC.                   *   G00440
 *     *    2050 - INVALID TIME ENTERED                          *   G00450
 *     *    3081 - INQUIRY ONLY.  PLEASE CONTACT SYSTEM SUPPORT  *   G00460
 *     *           FOR UPDATE CAPABILITY.                        *   G00470
 *     *    9000 - SYSTEM PROBLEMS. CONTACT TECHNICAL SERVICES   *   G00480
 *     *                                                         *   G00490
 *     *  SPECIAL CONSIDERATIONS                                 *   G00500
 *     *  ----------------------                                 *   G00510
 *     *    NONE                                                 *   G00520
 *     *                                                         *   G00530
 *     ***********************************************************   G00540
 *     EJECT                                                         G00550
 *     ***********************************************************   G
 * </pre>
 */
public class ServiceUnitAdditionalDetails extends CICSNonConvCodeModel {

	private Nps221ScreenVars screenVar = ScreenHelper.getScreenVars(Nps221ScreenVars.class);
	private boolean sqlerrorflag;
	private BaseData[] sqlparams = null;
	private BaseData[] sqlind = null;
	private BaseData[] sqlinto = null;
	private String sqlstmt = "";

	/* GENERATED-FLAGS */
	private FixedLengthStringData trux = new FixedLengthStringData(1).init("T");
	private Validator always = new Validator(trux, "T");
	private Validator never = new Validator(trux, "F");

	/*
	 * ##JA-03S ##GS-08S** I P S U M G F L L A Y O U T *** *
	 */
	private FixedLengthStringData ipsumgflRecord = new FixedLengthStringData(15);
	private FixedLengthStringData ipsumgflKey = new FixedLengthStringData(8).isAPartOf(ipsumgflRecord, 0);
	private FixedLengthStringData ipsumgflUnNo = new FixedLengthStringData(7).isAPartOf(ipsumgflKey, 0);
	private FixedLengthStringData ipsumgflInqCmyCd = new FixedLengthStringData(1).isAPartOf(ipsumgflKey, 7);

	/*
	 * ##GS-08E RECORD LAYOUT FOR IPSDRCFL * PRIMARY INDEX = SVC-UN-NO (7 BYTES) * LENGTH = 80 BYTES *
	 */
	private FixedLengthStringData ipsdrcflRec = new FixedLengthStringData(80);
	private FixedLengthStringData ipsdrcflKey = new FixedLengthStringData(7).isAPartOf(ipsdrcflRec, 0);
	private FixedLengthStringData ipsdrcflSvcUnNo = new FixedLengthStringData(7).isAPartOf(ipsdrcflKey, 0);
	private FixedLengthStringData ipsdrcflDrcUnNo = new FixedLengthStringData(7).isAPartOf(ipsdrcflRec, 7);

	/*
	 * ##JA-03E TSR ORGANIZATION LAYOUT
	 */
	private FixedLengthStringData tsrOrgActivity = new FixedLengthStringData(1000);
	private FixedLengthStringData tsrOrgKey = new FixedLengthStringData(32).isAPartOf(tsrOrgActivity, 0);
	private FixedLengthStringData tsrOrgDesc = new FixedLengthStringData(4).isAPartOf(tsrOrgKey, 0);
	private FixedLengthStringData tsrOrgId = new FixedLengthStringData(2).isAPartOf(tsrOrgKey, 4);
	private FixedLengthStringData tsrOrgTstamp = new FixedLengthStringData(26).isAPartOf(tsrOrgKey, 6);
	private FixedLengthStringData tsrOrgNumber = new FixedLengthStringData(7).isAPartOf(tsrOrgActivity, 32);

	/*
	 * ##LH-06 ADDED NPS - PILOT UNITS * VSAM KEY LENGTH = 24 * TOTAL FILE LENGTH = 80 * THIS FILE LISTS PILOT UNITS
	 * WHICH ARE AUTHORIZED TO * PERFORM SPECIFIC FUNCTIONS. *** FOR NATIONAL ROLLOOUT WILL HAVE 99999999999999 ROW ***
	 * AND UNITS THAT ARE NOT PILOT UNIT WILL HAVE ROW WITH *** IPSPLTFL-FL = 'N'. * MODIFICATION HISTORY * DATE CHANGED
	 * BY DESCRIPTION * 12/12/97 T. AHN INITIAL RELEASE * 05/15/98 A. PATEL ADDED IPSPLTFL-FL *
	 */
	private FixedLengthStringData ipspltflRec = new FixedLengthStringData(80);
	private FixedLengthStringData ipspltflKey = new FixedLengthStringData(24).isAPartOf(ipspltflRec, 0);
	private FixedLengthStringData ipspltflLogonUnNo = new FixedLengthStringData(7).isAPartOf(ipspltflKey, 0);
	private FixedLengthStringData ipspltflSvcUnNo = new FixedLengthStringData(7).isAPartOf(ipspltflKey, 7);
	private FixedLengthStringData ipspltflFunction = new FixedLengthStringData(10).isAPartOf(ipspltflKey, 14);
	private FixedLengthStringData ipspltflFields = new FixedLengthStringData(56).isAPartOf(ipspltflRec, 24);
	private FixedLengthStringData ipspltflFl = new FixedLengthStringData(1).isAPartOf(ipspltflFields, 0);

	private FixedLengthStringData wsMessageArea = new FixedLengthStringData(158);
	private FixedLengthStringData wsMessageLine1 = new FixedLengthStringData(79).isAPartOf(wsMessageArea, 0);
	private FixedLengthStringData wsMessagePgmId = new FixedLengthStringData(6).isAPartOf(wsMessageLine1, 5);
	private FixedLengthStringData wsMessageLine2 = new FixedLengthStringData(79).isAPartOf(wsMessageArea, 79);

	/* WS-FLAGS */
	private FixedLengthStringData foundFlag = new FixedLengthStringData(1);
	private Validator found = new Validator(foundFlag, "Y");

	private FixedLengthStringData notFoundFlag = new FixedLengthStringData(1);
	private Validator notFound = new Validator(notFoundFlag, "N");
	private FixedLengthStringData haMessageArea = new FixedLengthStringData(79).init(SPACES);
	/*
	 * : === END OF $NPS-HANDLE-ABEND === : : === WS FIELDS FOR $NPS-SAVE-SCREEN === :
	 */
	private FixedLengthStringData ssArea1 = new FixedLengthStringData(4);

	private FixedLengthStringData filler6 = new FixedLengthStringData(4).isAPartOf(ssArea1, 0, FILLER_REDEFINE);
	private ZonedDecimalData ssArea1Num = new ZonedDecimalData(4, 0).isAPartOf(filler6, 0).setUnsigned();
	private FixedLengthStringData ssArea2 = new FixedLengthStringData(8);

	private FixedLengthStringData ssProgName = new FixedLengthStringData(6);
	private FixedLengthStringData ssProgNamePfx = new FixedLengthStringData(1).isAPartOf(ssProgName, 0);
	private FixedLengthStringData ssProgNameSysid = new FixedLengthStringData(2).isAPartOf(ssProgName, 1);
	private FixedLengthStringData ssProgNameSfx = new FixedLengthStringData(3).isAPartOf(ssProgName, 3);

	private FixedLengthStringData ssProgQueue = new FixedLengthStringData(8);
	private FixedLengthStringData ssProgQueueSysid = new FixedLengthStringData(2).isAPartOf(ssProgQueue, 0);
	private FixedLengthStringData ssProgQueueTid = new FixedLengthStringData(4).isAPartOf(ssProgQueue, 2);
	private BinaryData ssProgQueueId = new BinaryData(4, 0).isAPartOf(ssProgQueue, 6);
	private BinaryData ssPageNumber = new BinaryData(4, 0);
	private FixedLengthStringData ssTsRecord = new FixedLengthStringData(2000);

	/* NPS-LEFT-JUSTIFY-FIELDS */
	private FixedLengthStringData npsLjNonSpaceFlag = new FixedLengthStringData(1);
	private Validator nonSpaceCharFound = new Validator(npsLjNonSpaceFlag, "Y");
	private BinaryData npsLjInputSub = new BinaryData(4, 0);
	private BinaryData npsLjOutputSub = new BinaryData(4, 0);

	private FixedLengthStringData npsLjInput = new FixedLengthStringData(66);
	private FixedLengthStringData[] npsLjInputChar = FLSArrayPartOfStructure(66, 1, npsLjInput, 0);
	private FixedLengthStringData npsLjOutput = new FixedLengthStringData(66);
	private FixedLengthStringData[] npsLjOutputChar = FLSArrayPartOfStructure(66, npsLjOutput, 0, REDEFINE);

	/* NPS-RIGHT-JUSTIFY-FIELDS */
	private FixedLengthStringData npsRightJustifyErr = new FixedLengthStringData(1);
	private Validator npsRightJustifyError = new Validator(npsRightJustifyErr, "Y");
	private Validator npsRightJustifyValid = new Validator(npsRightJustifyErr, "N");
	private BinaryData npsInputSub = new BinaryData(4, 0);
	private BinaryData npsOutputSub = new BinaryData(4, 0);

	private FixedLengthStringData npsInput = new FixedLengthStringData(16);
	private FixedLengthStringData[] npsInputChar = FLSArrayPartOfStructure(16, 1, npsInput, 0);
	private ZonedDecimalData npsOutput = new ZonedDecimalData(16, 0).setUnsigned();
	private ZonedDecimalData[] npsOutputChar = ZDArrayPartOfStructure(16, 1, 0, npsOutput, 0, REDEFINE, UNSIGNED_TRUE);

	/*
	 * : === END OF $NPS-RIGHT-JUSTIFY-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-SQL-ERROR=== : : (GENERATED BY
	 * $NPS-SQL-ERROR-WS) :
	 */
	private FixedLengthStringData slWorkArea = new FixedLengthStringData(148);
	private FixedLengthStringData slSqlca = new FixedLengthStringData(136).isAPartOf(slWorkArea, 0);
	private FixedLengthStringData slProgId = new FixedLengthStringData(8).isAPartOf(slWorkArea, 136);
	private ZonedDecimalData slCallNumber = new ZonedDecimalData(4, 0).isAPartOf(slWorkArea, 144).setUnsigned();
	/*
	 * : === END OF $NPS-SQL-ERROR-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-SQL-NUMBER=== : : (GENERATED BY
	 * $NPS-SQL-NUMBER-WS) :
	 */
	private ZonedDecimalData sqCallNumber = new ZonedDecimalData(4, 0).setUnsigned();
	/*
	 * : === END OF $NPS-SQL-NUMBER-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-CICS-NUMBER=== : : (GENERATED BY
	 * $NPS-CICS-NUMBER-WS) :
	 */
	private ZonedDecimalData cicsCallNumber = new ZonedDecimalData(4, 0).setUnsigned();
	/*
	 * : === END OF $NPS-CICS-NUMBER-WS === : : === WS FIELDS FOR $NPS-ACCESS-ERROR === :
	 */
	private BinaryData clCsmtMsg1Length = new BinaryData(4, 0).init(135);
	private BinaryData clCsmtBorderLength = new BinaryData(4, 0).init(141);

	private FixedLengthStringData clCsmtBorder = new FixedLengthStringData(141);
	private FixedLengthStringData filler7 = new FixedLengthStringData(141).isAPartOf(clCsmtBorder, 0, FILLER).init("*",
	    true);
	private BinaryData clCsmtBlanksLength = new BinaryData(4, 0).init(1);

	private FixedLengthStringData clCsmtBlanks = new FixedLengthStringData(141);
	private FixedLengthStringData filler8 = new FixedLengthStringData(141).isAPartOf(clCsmtBlanks, 0, FILLER).init(
	    SPACES);
	private String clErrorflag = "";
	/*
	 * : === END OF $NPS-ACCESS-ERROR-WS === : : === WS FIELDS FOR $NPS-DELETE-QUEUES === :
	 */
	private FixedLengthStringData dqArea1 = new FixedLengthStringData(4);

	private FixedLengthStringData dqProgName = new FixedLengthStringData(6);
	private FixedLengthStringData dqProgNamePfx = new FixedLengthStringData(1).isAPartOf(dqProgName, 0);
	private FixedLengthStringData dqProgNameSysid = new FixedLengthStringData(2).isAPartOf(dqProgName, 1);
	private FixedLengthStringData dqProgNameSfx = new FixedLengthStringData(3).isAPartOf(dqProgName, 3);

	private FixedLengthStringData dqProgQueue = new FixedLengthStringData(8);
	private FixedLengthStringData dqProgQueueSysid = new FixedLengthStringData(2).isAPartOf(dqProgQueue, 0);
	private FixedLengthStringData dqProgQueueTid = new FixedLengthStringData(4).isAPartOf(dqProgQueue, 2);
	private BinaryData dqProgQueueId = new BinaryData(4, 0).isAPartOf(dqProgQueue, 6);
	/*
	 * : === END OF $NPS-DELETE-QUEUES-WS === : : == WORKING-STORAGE FIELDS FOR $NPS-FORMAT-TIME == : : (GENERATED BY
	 * $NPS-FORMAT-TIME) :
	 */
	private ZonedDecimalData foTimeNum = new ZonedDecimalData(7, 0).setPattern("-------9");

	private FixedLengthStringData foTime = new FixedLengthStringData(8).isAPartOf(foTimeNum, 0, REDEFINE);
	private FixedLengthStringData foHours = new FixedLengthStringData(2).isAPartOf(foTime, 2);
	private FixedLengthStringData foMinutes = new FixedLengthStringData(2).isAPartOf(foTime, 4);
	private FixedLengthStringData foSeconds = new FixedLengthStringData(2).isAPartOf(foTime, 6);

	private FixedLengthStringData foTimeScreen = new FixedLengthStringData(8);
	private FixedLengthStringData foScrnHours = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 0);
	private FixedLengthStringData foScrnColon1 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 2).init(":");
	private FixedLengthStringData foScrnMinutes = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 3);
	private FixedLengthStringData foScrnColon2 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 5).init(":");
	private FixedLengthStringData foScrnSeconds = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 6);

	/*
	 * : === END OF $NPS-FORMAT-TIME-WS === : &08+01 CSMT-MSG2.
	 */
	private FixedLengthStringData csmtMsg2 = new FixedLengthStringData(75);
	private FixedLengthStringData msg2Filler = new FixedLengthStringData(32).isAPartOf(csmtMsg2, 0).init(SPACES);
	private FixedLengthStringData filler10 = new FixedLengthStringData(9).isAPartOf(csmtMsg2, 32, FILLER).init(
	    "EIBFN   =");
	private FixedLengthStringData msg2Eibfn = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 41);
	private FixedLengthStringData filler11 = new FixedLengthStringData(5).isAPartOf(csmtMsg2, 48, FILLER).init("UNIT=");
	private FixedLengthStringData msg2SvcUnNo = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 53);
	private FixedLengthStringData filler12 = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 60, FILLER).init(
	    "  DATE=");
	private FixedLengthStringData msg2Date = new FixedLengthStringData(8).isAPartOf(csmtMsg2, 67);
	private BinaryData csmtMsg2Length = new BinaryData(3, 0).init(75);
	private FixedLengthStringData apsHoldInvocationMode = new FixedLengthStringData(1);

	private FixedLengthStringData tpScrnReceived = new FixedLengthStringData(8);
	private Validator tpNps221Received = new Validator(tpScrnReceived, "NPS221");

	private FixedLengthStringData apsScreenFlags = new FixedLengthStringData(2);
	private FixedLengthStringData nps221CursorFlag = new FixedLengthStringData(1).isAPartOf(apsScreenFlags, 1);
	private Validator nps221CursorPos = new Validator(nps221CursorFlag, "T");

	/*
	 * APS-GENERATED DFHCOMMAREA *** LENGTH: 5620 ***
	 */
	private FixedLengthStringData dfhcommarea = new FixedLengthStringData(5620);
	private FixedLengthStringData tpHdrLinkage = new FixedLengthStringData(40).isAPartOf(dfhcommarea, 0);
	private FixedLengthStringData tpUserLinkage = new FixedLengthStringData(5500).isAPartOf(dfhcommarea, 40);
	private FixedLengthStringData tpAddrTableLinkage = new FixedLengthStringData(80).isAPartOf(dfhcommarea, 5540);
	private PointerData[] tpAddrLinkage = PtrArrayPartOfStructure(20, tpAddrTableLinkage, 0);
	private IntegerData wsFinalSub = new IntegerData();
	private TempAreaForServiceUnitAdditionalDetails ps221ss = new TempAreaForServiceUnitAdditionalDetails();
	private NPJServiceUnits npjxtxu = new NPJServiceUnits();
	private NPSUnitSchedule npsxtss = new NPSUnitSchedule();
	private NPSServiceUnits npsxtsu = new NPSServiceUnits();
	private NPSServiceUnitCharges npsxtsc = new NPSServiceUnitCharges();
	private NPSBasUnits npsxtbu = new NPSBasUnits();
	private NPSRetailUnits npsxtru = new NPSRetailUnits();
	private NPSTierPricingSchedule npsxttp = new NPSTierPricingSchedule();
	private NPSCallLoad npsxtci = new NPSCallLoad();
	private NPSEmergencyArea npsxtea = new NPSEmergencyArea();
	private NPSUnitPrinter npsxtup = new NPSUnitPrinter();
	private ApsEibfnEibrcodeInner apsEibfnEibrcodeInner = new ApsEibfnEibrcodeInner();
	private ApsScreenAttributesInner apsScreenAttributesInner = new ApsScreenAttributesInner();
	private ClCsmtMsg1Inner clCsmtMsg1Inner = new ClCsmtMsg1Inner();
	private HaCsmtMsgInner haCsmtMsgInner = new HaCsmtMsgInner();
	private Nps221FillerRecordInner nps221FillerRecordInner = new Nps221FillerRecordInner();
	private Nps221WorkFieldsInner nps221WorkFieldsInner = new Nps221WorkFieldsInner();
	private PaFieldsInner paFieldsInner = new PaFieldsInner();
	private PfkeyFieldGrpInner pfkeyFieldGrpInner = new PfkeyFieldGrpInner();
	private PsxtupinTblInner psxtupinTblInner = new PsxtupinTblInner();
	private TpCommareaInner tpCommareaInner = new TpCommareaInner();
	private TrcConvrConversationalInner trcConvrConversationalInner = new TrcConvrConversationalInner();
	private UpsmuiflRecInner upsmuiflRecInner = new UpsmuiflRecInner();

	/**
	 * Default constructor.
	 */
	public ServiceUnitAdditionalDetails() {
		super();
	}

	/**
	 * Overridden method to set DFHCOMMAREA
	 * 
	 * @param commArea - DFHCOMMAREA
	 */
	public void setCommArea(FixedLengthStringData commArea) {
		super.setCommArea(commArea);
		if (commArea != null) {
			dfhcommarea.changeLength(commArea.getLength());
			setAddressToAddress(dfhcommarea, commArea);
		}

	}

	/**
	 * The mainline method is the default entry point of the program when called by other programs using the Quipoz
	 * runtime framework.
	 */
	public void mainline() {
		try {
			nps221Section();
		} catch (COBOLExitProgramException e) {
			// Expected exception for control flow purposes
		}
	}

	/**
	 * Method generated from section NPS221-SECTION.
	 */
	private void nps221Section() {
		/* APS-MAIN-PARA */
		apsHousekeepingPara();
		if (tpCommareaInner.tpScreenInvoked.isTrue()) {
			ScreenReceiveMap receiveMap = CICSCommandFactory.getScreenReceiveMap(getCICSContext());
			receiveMap.setScreen(Nps221ScreenVars.class);
			receiveMap.setInto(nps221FillerRecordInner.nps221Record);
			receiveMap.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		}
		/* ##* Ending: IF TP-SCREEN-INVOKED... */
		apsUserMainPara();
		/* APS-MAIN-PARA--EXIT */
		exitProgram();
	}

	/**
	 * Method generated from paragraph MAIN-SECTION-SXIT.
	 */
	private void mainSectionSxit() {
		goBack();
		/**** APS-GENERATED HOUSEKEEPING PARAGRAPH ****/
	}

	/**
	 * Method generated from paragraph APS-HOUSEKEEPING-PARA.
	 */
	private void apsHousekeepingPara() {
		if (isEQ(getCICSContext().getEIB().getLengthCommarea(), 0)) {
			tpCommareaInner.tpCommarea.set(SPACES);
			tpCommareaInner.tpInvocationMode.set("T");
			tpCommareaInner.tpCallingProgramId.set("        ");
		} else {
			tpCommareaInner.tpCommarea.set(dfhcommarea);
		}
		/* ##* Ending: IF EIBCALEN = 0... */
		IgnoreCondition ignoreCondition = CICSCommandFactory.getIgnoreCondition(getCICSContext());
		ignoreCondition.addCondition(CICSCondition.ERROR);
		ignoreCondition.execute();
		pfkeyFieldGrpInner.pfkeyField.set(getCICSContext().getEIB().getFunctionKey());
		apsScreenFlags.set(SPACES);
	}

	/**
	 * Method generated from paragraph APS-USER-MAIN-PARA.
	 */
	private void apsUserMainPara() {
		/* : === CODE GENERATED BY $NPS-HANDLE-ABEND === : */
		HandleAbend handleAbend = CICSCommandFactory.getHandleAbend(getCICSContext());
		handleAbend.setHandler(new CICSHandler() {

			@Override
			public void handle(CICSContext context) {
				z100HandleAbend();
			}
		});
		handleAbend.execute();
		/* : === END OF CODE FOR $NPS-HANDLE-ABEND === : */
		/* ##* * MAINLINE LOGIC * */
		/* ##* * THIS PARAGRAPH WILL BRANCH TO THE APPROPRIATE PROCESSING * */
		/* ##* * PARAGRAPH DEPENDING ON HOW THIS PROGRAM WAS INVOKED. * */
		if (tpCommareaInner.tpScreenInvoked.isTrue()) {
			screenInvProcessing();
		} else {
			if (tpCommareaInner.tpProgramInvoked.isTrue()) {
				programInvProcessing();
			} else {
				if (tpCommareaInner.tpTransidInvoked.isTrue()) {
					transidInvProcessing();
				}
				/* ##* Ending: IF TP-TRANSID-INVOKED... */
			}
			/* ##* Ending: IF TP-PROGRAM-INVOKED... */
		}
		/* ##* Ending: IF TP-SCREEN-INVOKED... */
	}

	/**
	 * Method generated from paragraph 1000-SCREEN-INV-PROCESSING.
	 */
	private void screenInvProcessing() {
		paFieldsInner.paFields.set(tpCommareaInner.caRemainig1);
		/* : === BEGIN CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
		ssPageNumber.set(1);
		ssArea2.set(SPACES);
		ssProgName.set("NPS221");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		z100RestoreScreen();
		ps221ss.ssNps221Record.set(ssTsRecord);
		/* : === END CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
		if (pfkeyFieldGrpInner.enterKey.isTrue()) {
			processScreen();
			sendScreenDataonly();
		} else {
			if (pfkeyFieldGrpInner.pf1.isTrue() || pfkeyFieldGrpInner.pf13.isTrue()) {
				if (isGT(nps221FillerRecordInner.nps221Record, LOVALUES)) {
					if (isNE(tpCommareaInner.caErrorFlag, "Y")) {
						tpCommareaInner.caErrorFlag.set("P");
					}
					/* ##* Ending: IF CA-ERROR-FLAG NOT = 'Y'... */
				}
				/* ##* Ending: IF NPS221-RECORD > LOW-VALUES... */
				editUpdateSsRecord();
				nps221WorkFieldsInner.wsXctlPgm.set("NPS050");
				xctl();
			} else {
				if (pfkeyFieldGrpInner.pf3.isTrue() || pfkeyFieldGrpInner.pf15.isTrue()) {
					compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
					if (!tpCommareaInner.userFromSco.isTrue()) {
						while (!(!(isNE(tpCommareaInner.caPgmStackLevel[tpCommareaInner.caCurrPgmIndex.toInt()], "X") && isGT(
						    tpCommareaInner.caCurrPgmIndex, 0)))) {
							compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
						}

					}
					/* ##* Ending: IF NOT USER-FROM-SCO... */
					nps221WorkFieldsInner.wsXctlPgm
					    .set(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()]);
					if (isEQ(nps221WorkFieldsInner.wsXctlSysId, "NPS")) {
						compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
					}
					/* ##* Ending: IF WS-XCTL-SYS-ID = 'NPS'... */
					xctl();
				} else {
					if (pfkeyFieldGrpInner.pf12.isTrue() || pfkeyFieldGrpInner.pf24.isTrue()) {
						compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
						nps221WorkFieldsInner.wsXctlPgm
						    .set(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()]);
						compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
						xctl();
					} else {
						if (pfkeyFieldGrpInner.pf5.isTrue() || pfkeyFieldGrpInner.pf17.isTrue()) {
							firstTimeThru();
							sendScreenDataonly();
						} else {
							if (pfkeyFieldGrpInner.clearKey.isTrue()) {
								firstTimeThru();
								sendScreen();
							} else {
								editUpdateSsRecord();
								nps221WorkFieldsInner.wsMessageKey.set("0003");
								sendScreenDataonly();
							}
							/* ##* Ending: IF CLEAR-KEY... */
						}
						/* ##* Ending: IF PF5 OR PF17... */
					}
					/* ##* Ending: IF PF12 OR PF24... */
				}
				/* ##* Ending: IF PF3 OR PF15... */
			}
			/* ##* Ending: IF PF1 OR PF13... */
		}
		/* ##* Ending: IF ENTER-KEY... */
	}

	/**
	 * Method generated from paragraph 1100-EDIT-UPDATE-SS-RECORD.
	 */
	private void editUpdateSsRecord() {
		if (isGT(nps221FillerRecordInner.scaNps221SuName, LOVALUES)) {
			ps221ss.ssNps221SuName.set(nps221FillerRecordInner.nps221SuName);
		}
		/* ##* Ending: IF SCA-NPS221-SU-NAME > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221DrivInst, LOVALUES)) {
			ps221ss.ssNps221DrivInst.set(nps221FillerRecordInner.nps221DrivInst);
		}
		/* ##* Ending: IF SCA-NPS221-DRIV-INST > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221CustSvcAc, LOVALUES)) {
			ps221ss.ssNps221CustSvcAc.set(nps221FillerRecordInner.nps221CustSvcAc);
		}
		/* ##* Ending: IF SCA-NPS221-CUST-SVC-AC > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221CustSvcPhn3, LOVALUES)) {
			ps221ss.ssNps221CustSvcPhn3.set(nps221FillerRecordInner.nps221CustSvcPhn3);
		}
		/* ##* Ending: IF SCA-NPS221-CUST-SVC-PHN3 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221CustSvcPhn4, LOVALUES)) {
			ps221ss.ssNps221CustSvcPhn4.set(nps221FillerRecordInner.nps221CustSvcPhn4);
		}
		/* ##* Ending: IF SCA-NPS221-CUST-SVC-PHN4 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221Remarks1, LOVALUES)) {
			ps221ss.ssNps221Remarks1.set(nps221FillerRecordInner.nps221Remarks1);
			nps221WorkFieldsInner.wsRemarks1.set(nps221FillerRecordInner.nps221Remarks1);
			nps221WorkFieldsInner.wsRemarks1ChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS221-REMARKS1 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221Remarks2, LOVALUES)) {
			ps221ss.ssNps221Remarks2.set(nps221FillerRecordInner.nps221Remarks2);
			nps221WorkFieldsInner.wsRemarks2.set(nps221FillerRecordInner.nps221Remarks2);
			nps221WorkFieldsInner.wsRemarks2ChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS221-REMARKS2 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221EffDateMm, LOVALUES)) {
			ps221ss.ssNps221EffDateMm.set(nps221FillerRecordInner.nps221EffDateMm);
		}
		/* ##* Ending: IF SCA-NPS221-EFF-DATE-MM > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221EffDateDd, LOVALUES)) {
			ps221ss.ssNps221EffDateDd.set(nps221FillerRecordInner.nps221EffDateDd);
		}
		/* ##* Ending: IF SCA-NPS221-EFF-DATE-DD > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221EffDateYy, LOVALUES)) {
			ps221ss.ssNps221EffDateYy.set(nps221FillerRecordInner.nps221EffDateYy);
		}
		/* ##* Ending: IF SCA-NPS221-EFF-DATE-YY > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221ExpDateMm, LOVALUES)) {
			ps221ss.ssNps221ExpDateMm.set(nps221FillerRecordInner.nps221ExpDateMm);
		}
		/* ##* Ending: IF SCA-NPS221-EXP-DATE-MM > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221ExpDateDd, LOVALUES)) {
			ps221ss.ssNps221ExpDateDd.set(nps221FillerRecordInner.nps221ExpDateDd);
		}
		/* ##* Ending: IF SCA-NPS221-EXP-DATE-DD > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221ExpDateYy, LOVALUES)) {
			ps221ss.ssNps221ExpDateYy.set(nps221FillerRecordInner.nps221ExpDateYy);
		}
		/* ##* Ending: IF SCA-NPS221-EXP-DATE-YY > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221MrktZone1, LOVALUES)) {
			ps221ss.ssNps221MrktZone1.set(nps221FillerRecordInner.nps221MrktZone1);
		}
		/* ##* Ending: IF SCA-NPS221-MRKT-ZONE1 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221MrktZone2, LOVALUES)) {
			ps221ss.ssNps221MrktZone2.set(nps221FillerRecordInner.nps221MrktZone2);
		}
		/* ##* Ending: IF SCA-NPS221-MRKT-ZONE2 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221MrktZone3, LOVALUES)) {
			ps221ss.ssNps221MrktZone3.set(nps221FillerRecordInner.nps221MrktZone3);
		}
		/* ##* Ending: IF SCA-NPS221-MRKT-ZONE3 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221MrktZone4, LOVALUES)) {
			ps221ss.ssNps221MrktZone4.set(nps221FillerRecordInner.nps221MrktZone4);
		}
		/* ##* Ending: IF SCA-NPS221-MRKT-ZONE4 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221MrktZone5, LOVALUES)) {
			ps221ss.ssNps221MrktZone5.set(nps221FillerRecordInner.nps221MrktZone5);
		}
		/* ##* Ending: IF SCA-NPS221-MRKT-ZONE5 > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221ScheduleNo, LOVALUES)) {
			ps221ss.ssNps221ScheduleNo.set(nps221FillerRecordInner.nps221ScheduleNo);
		}
		/* ##* Ending: IF SCA-NPS221-SCHEDULE-NO > LOW-VALUES... */
		if (isGT(nps221FillerRecordInner.scaNps221PrnInd, LOVALUES)) {
			ps221ss.ssNps221PrnInd.set(nps221FillerRecordInner.nps221PrnInd);
		}
		/* ##* Ending: IF SCA-NPS221-PRN-IND > LOW-VALUES... */
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			if (isGT(nps221FillerRecordInner.scaNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SHOP-FR-HH (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SHOP-FR-MM (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SHOP-FR-AP (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SHOP-TO-HH (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SHOP-TO-MM (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SHOP-TO-AP (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SITE-FR-HH (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SITE-FR-MM (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SITE-FR-AP (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SITE-TO-HH (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SITE-TO-MM (WS-SUB) > ... */
			if (isGT(nps221FillerRecordInner.scaNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()]
				    .set(nps221FillerRecordInner.nps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()]);
			}
			/* ##* Ending: IF SCA-NPS221-SITE-TO-AP (WS-SUB) > ... */
		}
		/* : === CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		ssPageNumber.set(1);
		ssArea2.set(SPACES);
		ssProgName.set("NPS221");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		ssTsRecord.set(ps221ss.ssNps221Record);
		z100SaveScreen();
		/* : === END OF CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		nps221FillerRecordInner.nps221Record.set(LOVALUES);
	}

	/**
	 * Method generated from paragraph 1106-RESET-SCREEN-ATTR.
	 */
	private void resetScreenAttr() {
		nps221FillerRecordInner.nps221SuNameAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221DrivInstAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221CustSvcAcAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221CustSvcPhn3Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221CustSvcPhn4Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221Remarks1Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221Remarks2Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221EffDateMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221EffDateDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221EffDateYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221ExpDateMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221ExpDateDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221ExpDateYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221MrktZone1Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221MrktZone2Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221MrktZone3Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221MrktZone4Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221MrktZone5Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221ScheduleNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221PrnIndAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps221FillerRecordInner.nps221MsgAttr.set(apsScreenAttributesInner.tpAttrPbfft);
		nps221FillerRecordInner.nps221Msg2Attr.set(apsScreenAttributesInner.tpAttrPbfft);
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			nps221FillerRecordInner.nps221DaysAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221SiteFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221SiteToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221ShopFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
			nps221FillerRecordInner.nps221ShopToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrUnfff);
		}
	}

	/**
	 * Method generated from paragraph 1156-SET-SAVE-SCREEN-ATTR.
	 */
	private void setSaveScreenAttr() {
		ps221ss.scaSsNps221SuName.set(nps221FillerRecordInner.scaNps221SuName);
		ps221ss.scaSsNps221DrivInst.set(nps221FillerRecordInner.scaNps221DrivInst);
		ps221ss.scaSsNps221CustSvcAc.set(nps221FillerRecordInner.scaNps221CustSvcAc);
		ps221ss.scaSsNps221CustSvcPhn3.set(nps221FillerRecordInner.scaNps221CustSvcPhn3);
		ps221ss.scaSsNps221CustSvcPhn4.set(nps221FillerRecordInner.scaNps221CustSvcPhn4);
		ps221ss.scaSsNps221Remarks1.set(nps221FillerRecordInner.scaNps221Remarks1);
		ps221ss.scaSsNps221Remarks2.set(nps221FillerRecordInner.scaNps221Remarks2);
		ps221ss.scaSsNps221EffDateMm.set(nps221FillerRecordInner.scaNps221EffDateMm);
		ps221ss.scaSsNps221EffDateDd.set(nps221FillerRecordInner.scaNps221EffDateDd);
		ps221ss.scaSsNps221EffDateYy.set(nps221FillerRecordInner.scaNps221EffDateYy);
		ps221ss.scaSsNps221ExpDateMm.set(nps221FillerRecordInner.scaNps221ExpDateMm);
		ps221ss.scaSsNps221ExpDateDd.set(nps221FillerRecordInner.scaNps221ExpDateDd);
		ps221ss.scaSsNps221ExpDateYy.set(nps221FillerRecordInner.scaNps221ExpDateYy);
		ps221ss.scaSsNps221MrktZone1.set(nps221FillerRecordInner.scaNps221MrktZone1);
		ps221ss.scaSsNps221MrktZone2.set(nps221FillerRecordInner.scaNps221MrktZone2);
		ps221ss.scaSsNps221MrktZone3.set(nps221FillerRecordInner.scaNps221MrktZone3);
		ps221ss.scaSsNps221MrktZone4.set(nps221FillerRecordInner.scaNps221MrktZone4);
		ps221ss.scaSsNps221MrktZone5.set(nps221FillerRecordInner.scaNps221MrktZone5);
		ps221ss.scaSsNps221PrnInd.set(nps221FillerRecordInner.scaNps221PrnInd);
		ps221ss.scaSsNps221ScheduleNo.set(nps221FillerRecordInner.scaNps221ScheduleNo);
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			ps221ss.scaSsNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]);
			ps221ss.scaSsNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221FillerRecordInner.scaNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()]);
		}
	}

	/**
	 * Method generated from paragraph 1200-PROCESS-SCREEN.
	 */
	private void processScreen() {
		/* ##* ##JA-03S */
		initialize(npsxtru.dclnpsxtru);
		/* ##* ##JA-03E */
		initialize(npsxtbu.dclnpsxtbu);
		initialize(npsxtsc.dclnpsxtsc);
		initialize(npsxtss.dclnpsxtss);
		initialize(npsxtsu.dclnpsxtsu);
		if (tpCommareaInner.userFromSco.isTrue()) {
			if (isGT(nps221FillerRecordInner.nps221Record, LOVALUES) || isEQ(tpCommareaInner.caErrorFlag, "Y")
			        || isEQ(tpCommareaInner.caErrorFlag, "P") || isEQ(ps221ss.ssNps221SuName, SPACES)) {
				editUpdateSsRecord();
				resetScreenAttr();
				editScreenFields();
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					updateTables();
					checkRecType();
					tpCommareaInner.caErrorFlag.set("N");
				} else {
					tpCommareaInner.caErrorFlag.set("Y");
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				sendScreenDataonly();
			} else {
				/* NPS221-RECORD = LOW-VALUES -- NOTHING CHANGED */
				/* : === BEGIN CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
				ssPageNumber.set(1);
				ssArea2.set(SPACES);
				ssProgName.set("NPS221");
				StringUtil stringVariable1 = new StringUtil();
				stringVariable1.addExpression(ssProgNameSfx);
				stringVariable1.addExpression("0");
				stringVariable1.setStringInto(ssArea1);
				z100RestoreScreen();
				ps221ss.ssNps221Record.set(ssTsRecord);
				/* : === END CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
				nps221FillerRecordInner.nps221MsgAttr.set(apsScreenAttributesInner.tpAttrPdfff);
				nps221WorkFieldsInner.wsMessageKey.set("2101");
				/* NO DATA CHANGED */
				sendScreenDataonly();
			}
			/* ##* Ending: IF NPS221-RECORD > LOW-VALUES... */
		}
		/* ##* Ending: IF USER-FROM-SCO... */
	}

	/**
	 * Method generated from paragraph 1205-EDIT-SCREEN-FIELDS.
	 */
	private void editScreenFields() {
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			editSiteHour();
			editShopHour();
		}
		editPrnInd();
		editSchedNo();
		editMrktZones();
		editRemarks();
		editPhoneNo();
		if (isEQ(ps221ss.ssNps221DrivInst, SPACES) || isEQ(ps221ss.ssNps221DrivInst, LOVALUES)
		        || isEQ(ps221ss.ssNps221DrivInst, "?")) {
			ps221ss.ssNps221DrivInst.set("?");
			if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
				nps221FillerRecordInner.nps221DrivInstLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221DrivInstAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				nps221FillerRecordInner.nps221DrivInstAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			}
			/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
		} else {
			npsLjInput.set(ps221ss.ssNps221DrivInst);
			z100LeftJustify();
			ps221ss.ssNps221DrivInst.set(npsLjOutput);
		}
		/* ##* Ending: IF SS-NPS221-DRIV-INST = SPACES... */
		if (isEQ(ps221ss.ssNps221SuName, SPACES) || isEQ(ps221ss.ssNps221SuName, LOVALUES)
		        || isEQ(ps221ss.ssNps221SuName, "?")) {
			ps221ss.ssNps221SuName.set("?");
			if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
				nps221FillerRecordInner.nps221SuNameLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221SuNameAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				nps221FillerRecordInner.nps221SuNameAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			}
			/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
		} else {
			npsLjInput.set(ps221ss.ssNps221SuName);
			z100LeftJustify();
			ps221ss.ssNps221SuName.set(npsLjOutput);
		}
		/* ##* Ending: IF SS-NPS221-SU-NAME = SPACES... */
		setSaveScreenAttr();
	}

	/**
	 * Method generated from paragraph 1210-EDIT-SCHED-NO.
	 */
	private void editSchedNo() {
		if (isEQ(ps221ss.ssNps221ScheduleNo, SPACES) || isEQ(ps221ss.ssNps221ScheduleNo, LOVALUES)
		        || isEQ(ps221ss.ssNps221ScheduleNo, "?")) {
			ps221ss.ssNps221ScheduleNo.set("?");
			nps221FillerRecordInner.nps221ScheduleNoLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps221CursorFlag.set("T");
			nps221FillerRecordInner.nps221ScheduleNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps221WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsInput.set(ps221ss.ssNps221ScheduleNo);
			z100RightJustify();
			nps221WorkFieldsInner.wsScheduleNum.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221ScheduleNoLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ScheduleNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("2035");
				} else {
					nps221FillerRecordInner.nps221ScheduleNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				ps221ss.ssNps221ScheduleNo.set(nps221WorkFieldsInner.wsScheduleNum);
				nps221WorkFieldsInner.wsScheduleNo.set(nps221WorkFieldsInner.wsScheduleNum);
				sqlerrorflag = false;
				try {
					sqlstmt = " SELECT  TIR_PRC_SCH_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTTP")
					        + " " + " WHERE TIR_PRC_SCH_NO = ?";
					sqlinto = new BaseData[] { npsxttp.tirPrcSchNo };
					sqlparams = new BaseData[] { nps221WorkFieldsInner.wsScheduleNo };
					getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0) || isEQ(getAppVars().getSqlErrorCode(), -811)) {
					/* CONTINUE_STMT */
				} else {
					if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221ScheduleNoLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221ScheduleNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("0011");
						} else {
							nps221FillerRecordInner.nps221ScheduleNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES ... */
					} else {
						sqCallNumber.set("1");
						z991SqlError();
					}
					/* ##* Ending: IF SQLCODE = 100 ... */
				}
				/* ##* Ending: IF SQLCODE = 0 OR -811... */
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS221-SCHEDULE-NO = SPACES... */
	}

	/**
	 * Method generated from paragraph 1215-EDIT-PHONE-NO.
	 */
	private void editPhoneNo() {
		if (isEQ(ps221ss.ssNps221CustSvcAc, SPACES) || isEQ(ps221ss.ssNps221CustSvcAc, LOVALUES)
		        || isEQ(ps221ss.ssNps221CustSvcAc, "?")) {
			ps221ss.ssNps221CustSvcAc.set("?");
			nps221FillerRecordInner.nps221CustSvcAcLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps221CursorFlag.set("T");
			nps221FillerRecordInner.nps221CustSvcAcAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps221WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			if (isNE(ps221ss.ssNps221CustSvcAc, NUMERIC)) {
				nps221FillerRecordInner.nps221CustSvcAcLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221CustSvcAcAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("2035");
			}
			/* ##* Ending: IF SS-NPS221-CUST-SVC-AC IS NOT NUMERIC... */
		}
		/* ##* Ending: IF SS-NPS221-CUST-SVC-AC = SPACES... */
		if (isEQ(ps221ss.ssNps221CustSvcPhn3, SPACES) || isEQ(ps221ss.ssNps221CustSvcPhn3, LOVALUES)
		        || isEQ(ps221ss.ssNps221CustSvcPhn3, "?")) {
			ps221ss.ssNps221CustSvcPhn3.set("?");
			nps221FillerRecordInner.nps221CustSvcPhn3Length.set(apsScreenAttributesInner.tpPositionCursor);
			nps221CursorFlag.set("T");
			nps221FillerRecordInner.nps221CustSvcPhn3Attr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps221WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			if (isNE(ps221ss.ssNps221CustSvcPhn3, NUMERIC)) {
				nps221FillerRecordInner.nps221CustSvcPhn3Length.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221CustSvcPhn3Attr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("2035");
			}
			/* ##* Ending: IF SS-NPS221-CUST-SVC-PHN3 IS NOT NUMERIC... */
		}
		/* ##* Ending: IF SS-NPS221-CUST-SVC-PHN3 = SPACES... */
		if (isEQ(ps221ss.ssNps221CustSvcPhn4, SPACES) || isEQ(ps221ss.ssNps221CustSvcPhn4, LOVALUES)
		        || isEQ(ps221ss.ssNps221CustSvcPhn4, "?")) {
			ps221ss.ssNps221CustSvcPhn4.set("?");
			nps221FillerRecordInner.nps221CustSvcPhn4Length.set(apsScreenAttributesInner.tpPositionCursor);
			nps221CursorFlag.set("T");
			nps221FillerRecordInner.nps221CustSvcPhn4Attr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps221WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			if (isNE(ps221ss.ssNps221CustSvcPhn4, NUMERIC)) {
				nps221FillerRecordInner.nps221CustSvcPhn4Length.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221CustSvcPhn4Attr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("2035");
			}
			/* ##* Ending: IF SS-NPS221-CUST-SVC-PHN4 IS NOT NUMERIC... */
		}
		/* ##* Ending: IF SS-NPS221-CUST-SVC-PHN4 = SPACES... */
	}

	/**
	 * Method generated from paragraph 1220-EDIT-REMARKS.
	 */
	private void editRemarks() {
		if (((isEQ(ps221ss.ssNps221Remarks1, SPACES) || isEQ(ps221ss.ssNps221Remarks1, LOVALUES)) && (isEQ(
		    ps221ss.ssNps221Remarks2, SPACES) || isEQ(ps221ss.ssNps221Remarks2, LOVALUES)))
		        && (isEQ(ps221ss.ssNps221EffDateMm, SPACES) || isEQ(ps221ss.ssNps221EffDateMm, LOVALUES))
		        && (isEQ(ps221ss.ssNps221ExpDateMm, SPACES) || isEQ(ps221ss.ssNps221ExpDateMm, LOVALUES))) {
			nps221WorkFieldsInner.remarks1Flg.set("N");
			nps221WorkFieldsInner.remarks2Flg.set("N");
			if (isEQ(nps221WorkFieldsInner.wsRemarks1, SPACES) || isEQ(nps221WorkFieldsInner.wsRemarks1, LOVALUES)) {
				upsmuiflRecInner.upsmuiflSvcUnNo.set(ps221ss.ssNps221SuNo);
				upsmuiflRecInner.upsmuiflRecType.set("R");
				upsmuiflRecInner.upsmuiflSeqNo.set("01");
				delFromVsam();
			}
			/* ##* Ending: IF WS-REMARKS1 = SPACES OR ... */
			if (isEQ(nps221WorkFieldsInner.wsRemarks2, SPACES) || isEQ(nps221WorkFieldsInner.wsRemarks2, LOVALUES)) {
				upsmuiflRecInner.upsmuiflSvcUnNo.set(ps221ss.ssNps221SuNo);
				upsmuiflRecInner.upsmuiflRecType.set("R");
				upsmuiflRecInner.upsmuiflSeqNo.set("02");
				delFromVsam();
			}
			/* ##* Ending: IF WS-REMARKS2 = SPACES OR ... */
		} else {
			if (((isEQ(ps221ss.ssNps221Remarks1, SPACES) || isEQ(ps221ss.ssNps221Remarks1, LOVALUES)) && nps221WorkFieldsInner.wsRemarks1Changed
			    .isTrue())
			        || ((isEQ(ps221ss.ssNps221Remarks2, SPACES) || isEQ(ps221ss.ssNps221Remarks2, LOVALUES)) && nps221WorkFieldsInner.wsRemarks2Changed
			            .isTrue())) {
				if (nps221WorkFieldsInner.wsRemarks1Changed.isTrue()) {
					upsmuiflRecInner.upsmuiflSvcUnNo.set(ps221ss.ssNps221SuNo);
					upsmuiflRecInner.upsmuiflRecType.set("R");
					upsmuiflRecInner.upsmuiflSeqNo.set("01");
					delFromVsam();
				}
				/* ##* Ending: IF WS-REMARKS1-CHANGED... */
				if (nps221WorkFieldsInner.wsRemarks2Changed.isTrue()) {
					upsmuiflRecInner.upsmuiflSvcUnNo.set(ps221ss.ssNps221SuNo);
					upsmuiflRecInner.upsmuiflRecType.set("R");
					upsmuiflRecInner.upsmuiflSeqNo.set("02");
					delFromVsam();
				}
				/* ##* Ending: IF WS-REMARKS2-CHANGED... */
			}
			/* ##* Ending: IF ((SS-NPS221-REMARKS1 = SPACES OR LOW-VALUES)... */
			if (isGT(ps221ss.ssNps221Remarks1, SPACES)) {
				nps221WorkFieldsInner.remarks1Flg.set("Y");
			}
			/* ##* Ending: IF SS-NPS221-REMARKS1 > SPACES... */
			if (isGT(ps221ss.ssNps221Remarks2, SPACES)) {
				nps221WorkFieldsInner.remarks2Flg.set("Y");
			}
			/* ##* Ending: IF SS-NPS221-REMARKS2 > SPACES... */
			if ((isEQ(ps221ss.ssNps221Remarks1, SPACES) || isEQ(ps221ss.ssNps221Remarks1, LOVALUES) || isEQ(
			    ps221ss.ssNps221Remarks1, "?"))
			        && (isEQ(ps221ss.ssNps221Remarks2, SPACES) || isEQ(ps221ss.ssNps221Remarks2, LOVALUES) || isEQ(
			            ps221ss.ssNps221Remarks2, "?"))) {
				ps221ss.ssNps221Remarks1.set("?");
				nps221FillerRecordInner.nps221Remarks1Length.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221Remarks1Attr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				/* LINK TO PROGRAM NQS5TRC1(TRANSCENTURY) */
				nps221WorkFieldsInner.trcYear.set(ps221ss.ssNps221EffDateYy);
				nps221WorkFieldsInner.trcMm.set(ps221ss.ssNps221EffDateMm);
				nps221WorkFieldsInner.trcDd.set(ps221ss.ssNps221EffDateDd);
				trcConvrConversationalInner.trcConvrFromDate9.set(nps221WorkFieldsInner.trcDate);
				trcConvrConversationalInner.trcConvrFunctionCode.set("U002");
				LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
				link.setProgram(DateValidator.class);
				link.setCommarea(trcConvrConversationalInner.trcConvrConversational);
				link.setLength(1000);
				link.execute();
				if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
					clErrorflag = "C";
					accessError();
					/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
				} else {
					if (trcConvrConversationalInner.trcConvrReturnBad.isTrue()) {
						nps221FillerRecordInner.nps221EffDateMmLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221EffDateMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps221FillerRecordInner.nps221EffDateDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps221FillerRecordInner.nps221EffDateYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("0016");
					}
					/* ##* Ending: IF TRC-CONVR-RETURN-BAD... */
				}
				/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
			}
			/* ##* Ending: IF (SS-NPS221-REMARKS1 = SPACES... */
			if ((isEQ(ps221ss.ssNps221Remarks1, SPACES) || isEQ(ps221ss.ssNps221Remarks1, LOVALUES) || isEQ(
			    ps221ss.ssNps221Remarks1, "?"))
			        && (isEQ(ps221ss.ssNps221Remarks2, SPACES) || isEQ(ps221ss.ssNps221Remarks2, LOVALUES) || isEQ(
			            ps221ss.ssNps221Remarks2, "?"))) {
				ps221ss.ssNps221Remarks1.set("?");
				nps221FillerRecordInner.nps221Remarks1Length.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221Remarks1Attr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				/* LINK TO PROGRAM NQS5TRC1(TRANSCENTURY) */
				nps221WorkFieldsInner.trcYear.set(ps221ss.ssNps221ExpDateYy);
				nps221WorkFieldsInner.trcMm.set(ps221ss.ssNps221ExpDateMm);
				nps221WorkFieldsInner.trcDd.set(ps221ss.ssNps221ExpDateDd);
				trcConvrConversationalInner.trcConvrFromDate9.set(nps221WorkFieldsInner.trcDate);
				trcConvrConversationalInner.trcConvrFunctionCode.set("U002");
				LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
				link2.setProgram(DateValidator.class);
				link2.setCommarea(trcConvrConversationalInner.trcConvrConversational);
				link2.setLength(1000);
				link2.execute();
				if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
					clErrorflag = "C";
					accessError();
					/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
				} else {
					if (trcConvrConversationalInner.trcConvrReturnBad.isTrue()) {
						nps221FillerRecordInner.nps221ExpDateMmLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ExpDateMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps221FillerRecordInner.nps221ExpDateDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps221FillerRecordInner.nps221ExpDateYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("0016");
					}
					/* ##* Ending: IF TRC-CONVR-RETURN-BAD... */
				}
				/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
			}
			/* ##* Ending: IF (SS-NPS221-REMARKS1 = SPACES... */
			if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
				if (isGTE(ps221ss.ssNps221ExpDateYy, ps221ss.ssNps221EffDateYy)) {
					/* CONTINUE_STMT */
				} else {
					nps221FillerRecordInner.nps221ExpDateYyLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ExpDateYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("2162");
				}
				/* ##* Ending: IF SS-NPS221-EXP-DATE-YY >= ... */
				if (isLT(ps221ss.ssNps221ExpDateMm, ps221ss.ssNps221EffDateMm)
				        && isLTE(ps221ss.ssNps221ExpDateYy, ps221ss.ssNps221EffDateYy)) {
					nps221FillerRecordInner.nps221ExpDateMmLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ExpDateMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("2162");
				} else {
					if (isLT(ps221ss.ssNps221ExpDateDd, ps221ss.ssNps221EffDateDd)
					        && isEQ(ps221ss.ssNps221ExpDateMm, ps221ss.ssNps221EffDateMm)) {
						nps221FillerRecordInner.nps221ExpDateDdLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ExpDateDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2162");
					}
					/* ##* Ending: IF SS-NPS221-EXP-DATE-DD < SS-NPS221-EFF-DATE-DD ... */
				}
				/* ##* Ending: IF SS-NPS221-EXP-DATE-MM < ... */
			}
			/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
		}
		/* ##* Ending: IF ((SS-NPS221-REMARKS1 = SPACES OR ... */
	}

	/**
	 * Method generated from paragraph 1225-EDIT-MRKT-ZONES.
	 */
	private void editMrktZones() {
		if ((isEQ(ps221ss.ssNps221MrktZone1, SPACES) || isEQ(ps221ss.ssNps221MrktZone1, LOVALUES))
		        && (isEQ(ps221ss.ssNps221MrktZone2, SPACES) || isEQ(ps221ss.ssNps221MrktZone2, LOVALUES))
		        && (isEQ(ps221ss.ssNps221MrktZone3, SPACES) || isEQ(ps221ss.ssNps221MrktZone3, LOVALUES))
		        && (isEQ(ps221ss.ssNps221MrktZone4, SPACES) || isEQ(ps221ss.ssNps221MrktZone4, LOVALUES))
		        && (isEQ(ps221ss.ssNps221MrktZone5, SPACES) || isEQ(ps221ss.ssNps221MrktZone5, LOVALUES))) {
			nps221WorkFieldsInner.mrktZoneFlg.set("N");
		} else {
			nps221WorkFieldsInner.mrktZoneFlg.set("Y");
		}
		/* ##* Ending: IF (SS-NPS221-MRKT-ZONE1 = SPACES... */
	}

	/**
	 * Method generated from paragraph 1230-EDIT-SITE-HOUR.
	 */
	private void editSiteHour() {
		nps221WorkFieldsInner.wsSiteFrHhA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
		nps221WorkFieldsInner.wsSiteFrMmA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
		nps221WorkFieldsInner.wsSiteToHhA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]);
		nps221WorkFieldsInner.wsSiteToMmA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]);
		if ((isEQ(nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		    nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))
		        && (isEQ(nps221WorkFieldsInner.wsSiteToTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		            nps221WorkFieldsInner.wsSiteToTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))
		        && (isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		            ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))
		        && (isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		            ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221SiteFrHhLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221SiteFrHhLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221SiteFrHhLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) > 12 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SITE-FR-HH (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221SiteFrMmLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsSiteFrMm[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221SiteFrMmLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsSiteFrMm[nps221WorkFieldsInner.wsSub.toInt()], 59)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221SiteFrMmLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SITE-FR-MM (WS-SUB) > 59 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SITE-FR-MM (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221SiteFrApLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221SiteFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221SiteFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				if (isNE(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], "A")
				        && isNE(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221SiteFrApLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221SiteFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2050");
					} else {
						nps221FillerRecordInner.nps221SiteFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES ... */
				}
				/* ##* Ending: IF SS-NPS221-SITE-FR-AP (WS-SUB) NOT = 'A' AND 'P'... */
			}
			/* ##* Ending: IF SS-NPS221-SITE-FR-AP (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221SiteToHhLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221SiteToHhLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221SiteToHhLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) > 12 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SITE-TO-HH (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221SiteToMmLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsSiteToMm[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221SiteToMmLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsSiteToMm[nps221WorkFieldsInner.wsSub.toInt()], 59)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221SiteToMmLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteToMm[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsSiteToMm[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SITE-TO-MM (WS-SUB) > 59 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SITE-TO-MM (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221SiteToApLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221SiteToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221SiteToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				if (isNE(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], "A")
				        && isNE(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221SiteToApLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221SiteToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2050");
					} else {
						nps221FillerRecordInner.nps221SiteToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES ... */
				}
				/* ##* Ending: IF SS-NPS221-SITE-TO-AP (WS-SUB) NOT = 'A' AND 'P'... */
			}
			/* ##* Ending: IF SS-NPS221-SITE-TO-AP (WS-SUB) = SPACES... */
		}
		/* ##* Ending: IF WS-SITE-FR-TIME-A (WS-SUB) = (SPACES OR ... */
	}

	/**
	 * Method generated from paragraph 1235-EDIT-SHOP-HOUR.
	 */
	private void editShopHour() {
		nps221WorkFieldsInner.wsShopFrHhA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
		nps221WorkFieldsInner.wsShopFrMmA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
		nps221WorkFieldsInner.wsShopToHhA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]);
		nps221WorkFieldsInner.wsShopToMmA[nps221WorkFieldsInner.wsSub.toInt()]
		    .set(ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]);
		if ((isEQ(nps221WorkFieldsInner.wsShopFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		    nps221WorkFieldsInner.wsShopFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))
		        && (isEQ(nps221WorkFieldsInner.wsShopToTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		            nps221WorkFieldsInner.wsShopToTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))
		        && (isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		            ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))
		        && (isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES) || isEQ(
		            ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES))) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221ShopFrHhLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221ShopFrHhLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221ShopFrHhLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) > 12 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SHOP-FR-HH (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221ShopFrMmLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsShopFrMm[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221ShopFrMmLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsShopFrMm[nps221WorkFieldsInner.wsSub.toInt()], 59)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221ShopFrMmLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SHOP-FR-MM (WS-SUB) > 59 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SHOP-FR-MM (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221ShopFrApLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ShopFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221ShopFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				if (isNE(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], "A")
				        && isNE(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221ShopFrApLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ShopFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2050");
					} else {
						nps221FillerRecordInner.nps221ShopFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES ... */
				}
				/* ##* Ending: IF SS-NPS221-SHOP-FR-AP (WS-SUB) NOT = 'A' AND 'P'... */
			}
			/* ##* Ending: IF SS-NPS221-SHOP-FR-AP (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221ShopToHhLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221ShopToHhLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221ShopToHhLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) > 12 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SHOP-TO-HH (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221ShopToMmLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				npsInput.set(ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]);
				z100RightJustify();
				nps221WorkFieldsInner.wsShopToMm[nps221WorkFieldsInner.wsSub.toInt()].set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221ShopToMmLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					if (isGT(nps221WorkFieldsInner.wsShopToMm[nps221WorkFieldsInner.wsSub.toInt()], 59)) {
						if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
							nps221FillerRecordInner.nps221ShopToMmLength[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps221CursorFlag.set("T");
							nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
							nps221WorkFieldsInner.wsMessageKey.set("2050");
						} else {
							nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
							    .set(apsScreenAttributesInner.tpAttrUbfft);
						}
						/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
					} else {
						ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopToMm[nps221WorkFieldsInner.wsSub.toInt()]);
						nps221FillerRecordInner.nps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(nps221WorkFieldsInner.wsShopToMm[nps221WorkFieldsInner.wsSub.toInt()]);
					}
					/* ##* Ending: IF WS-SHOP-TO-MM (WS-SUB) > 59 ... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS221-SHOP-TO-MM (WS-SUB) = SPACES... */
			if (isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], "?")) {
				ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				nps221FillerRecordInner.nps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set("?");
				if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
					nps221FillerRecordInner.nps221ShopToApLength[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpPositionCursor);
					nps221CursorFlag.set("T");
					nps221FillerRecordInner.nps221ShopToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
					nps221WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					nps221FillerRecordInner.nps221ShopToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
					    .set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				if (isNE(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], "A")
				        && isNE(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
						nps221FillerRecordInner.nps221ShopToApLength[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpPositionCursor);
						nps221CursorFlag.set("T");
						nps221FillerRecordInner.nps221ShopToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
						nps221WorkFieldsInner.wsMessageKey.set("2050");
					} else {
						nps221FillerRecordInner.nps221ShopToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
						    .set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES ... */
				}
				/* ##* Ending: IF SS-NPS221-SHOP-TO-AP (WS-SUB) NOT = 'A' AND 'P'... */
			}
			/* ##* Ending: IF SS-NPS221-SHOP-TO-AP (WS-SUB) = SPACES... */
		}
		/* ##* Ending: IF WS-SHOP-FR-TIME-A (WS-SUB) = (SPACES OR ... */
	}

	/**
	 * Method generated from paragraph 1245-EDIT-PRN-IND.
	 */
	private void editPrnInd() {
		if (isEQ(ps221ss.ssNps221PrnInd, SPACES) || isEQ(ps221ss.ssNps221PrnInd, "Y")
		        || isEQ(ps221ss.ssNps221PrnInd, "N") || isEQ(ps221ss.ssNps221PrnInd, LOVALUES)) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
				nps221FillerRecordInner.nps221PrnIndLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221PrnIndAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps221WorkFieldsInner.wsMessageKey.set("I015");
			} else {
				nps221FillerRecordInner.nps221PrnIndAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			}
			/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
		}
		/* ##* Ending: IF SS-NPS221-PRN-IND = SPACES OR 'Y' OR 'N'... */
	}

	/**
	 * Method generated from paragraph 1300-UPDATE-TABLES.
	 */
	private void updateTables() {
		checkSsFields();
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  UN_NM" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
			        + " WHERE UN_NO = ?";
			sqlinto = new BaseData[] { npsxtbu.unNm };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			if (isNE(npsxtbu.unNm, ps221ss.ssNps221SuName)) {
				nps221WorkFieldsInner.wsUnNmChangedFl.set("Y");
			}
			/* ##* Ending: IF UN-NM OF DCLNPSXTBU NOT = SS-NPS221-SU-NAME... */
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				/* CONTINUE_STMT */
			} else {
				sqCallNumber.set("2");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* TSA-02-E */
		npsxtbu.unNm.set(ps221ss.ssNps221SuName);
		sqlerrorflag = false;
		try {
			sqlstmt = " UPDATE  " + getAppVars().getTableNameOverriden("NPSXTBU") + " " + " SET UN_NM = ?"
			        + " WHERE UN_NO = ?";
			sqlparams = new BaseData[] { npsxtbu.unNm, tpCommareaInner.caSvcUnNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
			if (isEQ(tpCommareaInner.caCustInd[1], "N")) {
				addToTables();
				writeToUpjtsrp();
				/* TSA-02 */
			} else {
				sqCallNumber.set("3");
				z991SqlError();
			}
			/* ##* Ending: IF CA-CUST-IND(1) = 'N'... */
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
				nps221WorkFieldsInner.wsMessageKey.set("0025");
				if (isEQ(nps221WorkFieldsInner.wsUnNmChangedFl, "Y")) {
					/* TSA-02-S */
					writeToUpjtsrp();
				}
				/* ##* Ending: IF WS-UN-NM-CHANGED-FL = 'Y' ... */
				/* TSA-02-E */
				/* ##* UPDATE NPSXTSS TABLE WITH SITE INFORMATION */
				for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
				    .add(1)) {
					if (isEQ(nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
					        || isEQ(nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
					        || isEQ(nps221WorkFieldsInner.wsSiteToTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
					        || isEQ(nps221WorkFieldsInner.wsSiteToTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
						nps221WorkFieldsInner.wsSchdType.set("OS");
						deleteFrmTable();
					} else {
						if (isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
							if (isNE(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
								compute(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
								    add(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
							}
							/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) NOT = 12 ... */
						} else {
							if (isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
								if (isEQ(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
									nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
								}
								/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) = 12 ... */
							}
							/* ##* Ending: IF SS-NPS221-SITE-FR-AP (WS-SUB) = 'A' ... */
						}
						/* ##* Ending: IF SS-NPS221-SITE-FR-AP (WS-SUB) = 'P'... */
						if (isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
							if (isNE(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
								compute(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
								    add(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
							}
							/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) NOT = 12 ... */
						} else {
							if (isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
								if (isEQ(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
									nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
								}
								/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) = 12 ... */
							}
							/* ##* Ending: IF SS-NPS221-SITE-TO-AP (WS-SUB) = 'A' ... */
						}
						/* ##* Ending: IF SS-NPS221-SITE-TO-AP (WS-SUB) = 'P'... */
						nps221WorkFieldsInner.wsOprFrTimeR
						    .set(nps221WorkFieldsInner.wsSiteFrTime[nps221WorkFieldsInner.wsSub.toInt()]);
						npsxtss.oprFrmTm.set(nps221WorkFieldsInner.wsOprFrTime);
						nps221WorkFieldsInner.wsOprToTimeR
						    .set(nps221WorkFieldsInner.wsSiteToTime[nps221WorkFieldsInner.wsSub.toInt()]);
						npsxtss.oprToTm.set(nps221WorkFieldsInner.wsOprToTime);
						npsxtss.svcUnNo.set(ps221ss.ssNps221SuNo);
						sqlerrorflag = false;
						try {
							sqlstmt = " UPDATE  " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
							        + " SET OPR_FRM_TM = ?, OPR_TO_TM = ?" + " WHERE SVC_UN_NO = ?"
							        + " AND OPR_DAY_CD = ?" + " AND SCH_TYP_CD = 'OS'";
							sqlparams = new BaseData[] { npsxtss.oprFrmTm, npsxtss.oprToTm, tpCommareaInner.caSvcUnNo,
							        nps221WorkFieldsInner.wsSubR };
							getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
						} catch (SQLException ex) {
							sqlerrorflag = true;
							getAppVars().setSqlErrorCode(ex);
						}
						if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
							nps221WorkFieldsInner.wsMessageKey.set("0025");
						} else {
							if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
								sqlerrorflag = false;
								try {
									// Start - Manual fix for INSERT
/*									sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
									        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)"
									        + " VALUES ('" + tpCommareaInner.caSvcUnNo + "', 'OS', '"
									        + nps221WorkFieldsInner.wsSubR + "', '" + npsxtss.oprFrmTm + "', '"
									        + npsxtss.oprToTm + "')";
									sqlparams = null;
*/
									sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
									        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)"
									        + " VALUES (?, 'OS', ? , ?, ?)";
									sqlparams = new BaseData[]{tpCommareaInner.caSvcUnNo, nps221WorkFieldsInner.wsSubR, 
											npsxtss.oprFrmTm, npsxtss.oprToTm};
									getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
									//End - Manual fix for INSERT
								} catch (SQLException ex) {
									sqlerrorflag = true;
									getAppVars().setSqlErrorCode(ex);
								}
								if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
									nps221WorkFieldsInner.wsMessageKey.set("0025");
								} else {
									sqCallNumber.set("4");
									z991SqlError();
								}
								/* ##* Ending: IF SQLCODE = 0 ... */
							} else {
								sqCallNumber.set("5");
								z991SqlError();
							}
							/* ##* Ending: IF SQLCODE = +100 ... */
						}
						/* ##* Ending: IF SQLCODE = 0... */
					}
					/* ##* Ending: IF WS-SITE-FR-TIME-A (WS-SUB) = SPACES OR ... */
				}
				/* ##* UPDATE NPSXTSS TABLE WITH SHOP INFORMATION */
				for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
				    .add(1)) {
					if (isEQ(nps221WorkFieldsInner.wsShopFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
					        || isEQ(nps221WorkFieldsInner.wsShopFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
					        || isEQ(nps221WorkFieldsInner.wsShopToTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
					        || isEQ(nps221WorkFieldsInner.wsShopToTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
						nps221WorkFieldsInner.wsSchdType.set("IS");
						deleteFrmTable();
					} else {
						if (isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
							if (isNE(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
								compute(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
								    add(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
							}
							/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) NOT = 12 ... */
						} else {
							if (isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
								if (isEQ(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
									nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
								}
								/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) = 12 ... */
							}
							/* ##* Ending: IF SS-NPS221-SHOP-FR-AP (WS-SUB) = 'A' ... */
						}
						/* ##* Ending: IF SS-NPS221-SHOP-FR-AP (WS-SUB) = 'P'... */
						if (isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
							if (isNE(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
								compute(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
								    add(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
							}
							/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) NOT = 12 ... */
						} else {
							if (isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
								if (isEQ(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
									nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
								}
								/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) = 12 ... */
							}
							/* ##* Ending: IF SS-NPS221-SHOP-TO-AP (WS-SUB) = 'A' ... */
						}
						/* ##* Ending: IF SS-NPS221-SHOP-TO-AP (WS-SUB) = 'P'... */
						nps221WorkFieldsInner.wsOprFrTimeR
						    .set(nps221WorkFieldsInner.wsShopFrTime[nps221WorkFieldsInner.wsSub.toInt()]);
						npsxtss.oprFrmTm.set(nps221WorkFieldsInner.wsOprFrTime);
						nps221WorkFieldsInner.wsOprToTimeR
						    .set(nps221WorkFieldsInner.wsShopToTime[nps221WorkFieldsInner.wsSub.toInt()]);
						npsxtss.oprToTm.set(nps221WorkFieldsInner.wsOprToTime);
						npsxtss.svcUnNo.set(ps221ss.ssNps221SuNo);
						sqlerrorflag = false;
						try {
							sqlstmt = " UPDATE  " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
							        + " SET OPR_FRM_TM = ?, OPR_TO_TM = ?" + " WHERE SVC_UN_NO = ?"
							        + " AND OPR_DAY_CD = ?" + " AND SCH_TYP_CD = 'IS'";
							sqlparams = new BaseData[] { npsxtss.oprFrmTm, npsxtss.oprToTm, tpCommareaInner.caSvcUnNo,
							        nps221WorkFieldsInner.wsSubR };
							getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
						} catch (SQLException ex) {
							sqlerrorflag = true;
							getAppVars().setSqlErrorCode(ex);
						}
						if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
							nps221WorkFieldsInner.wsMessageKey.set("0025");
						} else {
							if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
								sqlerrorflag = false;
								try {
									// Start - Manual fix for INSERT
/*									sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
									        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)"
									        + " VALUES ('" + tpCommareaInner.caSvcUnNo + "', 'IS', '"
									        + nps221WorkFieldsInner.wsSubR + "', '" + npsxtss.oprFrmTm + "', '"
									        + npsxtss.oprToTm + "')";
									sqlparams = null;
*/
									sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
									        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)"
									        + " VALUES (?, 'IS', ? , ?, ?)";
									sqlparams = new BaseData[]{tpCommareaInner.caSvcUnNo, nps221WorkFieldsInner.wsSubR,
											npsxtss.oprFrmTm, npsxtss.oprToTm};

									//End - Manual fix for INSERT
									getAppVars().executeSimpleUpdate(sqlstmt, sqlparams,
									    getAppVars().isImmediateCommit());
								} catch (SQLException ex) {
									sqlerrorflag = true;
									getAppVars().setSqlErrorCode(ex);
								}
								if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
									nps221WorkFieldsInner.wsMessageKey.set("0025");
								} else {
									sqCallNumber.set("6");
									z991SqlError();
								}
								/* ##* Ending: IF SQLCODE = 0 ... */
							} else {
								sqCallNumber.set("7");
								z991SqlError();
							}
							/* ##* Ending: IF SQLCODE = +100 ... */
						}
						/* ##* Ending: IF SQLCODE = 0... */
					}
					/* ##* Ending: IF WS-SHOP-FR-TIME-A(WS-SUB) = SPACES OR ... */
				}
				/* ##* UPDATE NPSXTSC TABLE WITH CHANGED INFORMATION */
				npsxtsc.svcUnNo.set(ps221ss.ssNps221SuNo);
				npsxtsc.tirPrcSchNo.set(ps221ss.ssNps221ScheduleNo);
				/* ##* COMMENT UPDATE STATEMENT */
				sqlerrorflag = false;
				try {
					sqlstmt = " UPDATE  " + getAppVars().getTableNameOverriden("NPSXTSC") + " "
					        + " SET SVC_UN_NO = ?, TIR_PRC_SCH_NO = ?" + " WHERE SVC_UN_NO = ?";
					sqlparams = new BaseData[] { npsxtsc.svcUnNo, npsxtsc.tirPrcSchNo, tpCommareaInner.caSvcUnNo };
					getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					nps221WorkFieldsInner.wsMessageKey.set("0025");
				} else {
					if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
						/* ##* COMMENT INSERT STATEMENT */
						sqlerrorflag = false;
						try {
							// Start - Manual fix for INSERT
/*							sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSC") + " "
							        + "(SVC_UN_NO, TIR_PRC_SCH_NO)" + " VALUES ('" + npsxtsc.svcUnNo + "', '"
							        + npsxtsc.tirPrcSchNo + "')";
							sqlparams = null;
*/
							sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSC") + " "
							        + "(SVC_UN_NO, TIR_PRC_SCH_NO)" + " VALUES (?, ?)";
							sqlparams = new BaseData[]{npsxtsc.svcUnNo, npsxtsc.tirPrcSchNo};
							// End - Manual fix for INSERT
							getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
						} catch (SQLException ex) {
							sqlerrorflag = true;
							getAppVars().setSqlErrorCode(ex);
						}
						if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
							nps221WorkFieldsInner.wsMessageKey.set("0025");
						} else {
							sqCallNumber.set("8");
							z991SqlError();
						}
						/* ##* Ending: IF SQLCODE = 0... */
					} else {
						sqCallNumber.set("9");
						z991SqlError();
					}
					/* ##* Ending: IF SQLCODE = +100... */
				}
				/* ##* Ending: IF SQLCODE = 0... */
				/* ##* UPDATE NPSXTSU TABLE WITH CHANGED INFORMATION */
				npsxtsu.svcUnNo.set(ps221ss.ssNps221SuNo);
				npsxtsu.svcUnTvlIstDs.set(ps221ss.ssNps221DrivInst);
				nps221WorkFieldsInner.wsPrnInd.set(ps221ss.ssNps221PrnInd);
				nps221WorkFieldsInner.wsCustSvcTelAc.set(ps221ss.ssNps221CustSvcAc);
				nps221WorkFieldsInner.wsCustSvcTel3.set(ps221ss.ssNps221CustSvcPhn3);
				nps221WorkFieldsInner.wsCustSvcTel4.set(ps221ss.ssNps221CustSvcPhn4);
				sqlerrorflag = false;
				try {
					sqlstmt = " UPDATE  " + getAppVars().getTableNameOverriden("NPSXTSU") + " "
					        + " SET SVC_UN_NO = ?, SVC_UN_PHN_NO = ?, SVC_UN_TVL_IST_DS = ?, PRN_IND = ?"
					        + " WHERE SVC_UN_NO = ?";
					sqlparams = new BaseData[] { npsxtsu.svcUnNo, nps221WorkFieldsInner.wsCustSvcPhn,
					        npsxtsu.svcUnTvlIstDs, nps221WorkFieldsInner.wsPrnInd, tpCommareaInner.caSvcUnNo };
					getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					nps221WorkFieldsInner.wsMessageKey.set("0025");
				} else {
					sqCallNumber.set("10");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 0... */
				/* ##* UPDATE NPJXTXU TABLE WITH CHANGED INFORMATION */
				npjxtxu.xuSuName.set(ps221ss.ssNps221SuName);
				nps221WorkFieldsInner.wsCustSvcTelAc.set(ps221ss.ssNps221CustSvcAc);
				nps221WorkFieldsInner.wsCustSvcTel3.set(ps221ss.ssNps221CustSvcPhn3);
				nps221WorkFieldsInner.wsCustSvcTel4.set(ps221ss.ssNps221CustSvcPhn4);
				for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
				    .add(1)) {
					if (isEQ(nps221WorkFieldsInner.wsSub, 2)) {
						nps221WorkFieldsInner.wsOprFrTimeR.set(nps221WorkFieldsInner.wsSiteFrTime[2]);
						npjxtxu.xuOperateHrFr.set(nps221WorkFieldsInner.wsOprFrTime);
						nps221WorkFieldsInner.wsOprToTimeR.set(nps221WorkFieldsInner.wsSiteToTime[2]);
						npjxtxu.xuOperateHrTo.set(nps221WorkFieldsInner.wsOprToTime);
					}
					/* ##* Ending: IF WS-SUB = 2... */
					if (isGT(nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
						nps221WorkFieldsInner.wsDays[nps221WorkFieldsInner.wsSub.toInt()].set("Y");
					} else {
						nps221WorkFieldsInner.wsDays[nps221WorkFieldsInner.wsSub.toInt()].set("N");
					}
					/* ##* Ending: IF WS-SITE-FR-TIME-A (WS-SUB) > SPACES... */
				}
				/* ##* COMMENT UPDATE STATEMENT */
				sqlerrorflag = false;
				try {
					sqlstmt = " UPDATE  "
					        + getAppVars().getTableNameOverriden("NPJXTXU")
					        + " "
					        + " SET XU_SU_NAME = ?, XU_SU_STR_TEL_NO = ?, XU_ST_REGISTER_NO = ?, XU_OPERATE_DAYS = ?, XU_OPERATE_HR_FR = ?, XU_OPERATE_HR_TO = ?"
					        + " WHERE XU_SU_NO = ?";
					sqlparams = new BaseData[] { npjxtxu.xuSuName, nps221WorkFieldsInner.wsCustSvcPhn,
					        npjxtxu.xuStRegisterNo, nps221WorkFieldsInner.wsOperateDays, npjxtxu.xuOperateHrFr,
					        npjxtxu.xuOperateHrTo, tpCommareaInner.caSvcUnNo };
					getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					nps221WorkFieldsInner.wsMessageKey.set("0025");
				} else {
					sqCallNumber.set("11");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 0... */
			} else {
				sqCallNumber.set("12");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = 0... */
		}
		/* ##* Ending: IF SQLCODE = +100... */
	}

	/**
	 * Method generated from paragraph 1302-CHECK-SS-FIELDS.
	 */
	private void checkSsFields() {
		if (isGT(ps221ss.ssNps221SuName, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221SuName.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-SU-NAME > SPACES... */
		if (isGT(ps221ss.ssNps221DrivInst, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221DrivInst.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-DRIV-INST > SPACES... */
		if (isGT(ps221ss.ssNps221CustSvcAc, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221CustSvcAc.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-CUST-SVC-AC > SPACES... */
		if (isGT(ps221ss.ssNps221CustSvcPhn3, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221CustSvcPhn3.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-CUST-SVC-PHN3 > SPACES... */
		if (isGT(ps221ss.ssNps221CustSvcPhn4, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221CustSvcPhn4.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-CUST-SVC-PHN4 > SPACES... */
		if (isGT(ps221ss.ssNps221Remarks1, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221Remarks1.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-REMARKS1 > SPACES... */
		if (isGT(ps221ss.ssNps221Remarks2, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221Remarks2.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-REMARKS2 > SPACES... */
		if (isGT(ps221ss.ssNps221EffDateMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221EffDateMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-EFF-DATE-MM > SPACES... */
		if (isGT(ps221ss.ssNps221EffDateDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221EffDateDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-EFF-DATE-DD > SPACES... */
		if (isGT(ps221ss.ssNps221EffDateYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221EffDateYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-EFF-DATE-YY > SPACES... */
		if (isGT(ps221ss.ssNps221ExpDateMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221ExpDateMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-EXP-DATE-MM > SPACES... */
		if (isGT(ps221ss.ssNps221ExpDateDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221ExpDateDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-EXP-DATE-DD > SPACES... */
		if (isGT(ps221ss.ssNps221ExpDateYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221ExpDateYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-EXP-DATE-YY > SPACES... */
		if (isGT(ps221ss.ssNps221MrktZone1, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221MrktZone1.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-MRKT-ZONE1 > SPACES... */
		if (isGT(ps221ss.ssNps221MrktZone2, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221MrktZone2.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-MRKT-ZONE2 > SPACES... */
		if (isGT(ps221ss.ssNps221MrktZone3, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221MrktZone3.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-MRKT-ZONE3 > SPACES... */
		if (isGT(ps221ss.ssNps221MrktZone4, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221MrktZone4.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-MRKT-ZONE4 > SPACES... */
		if (isGT(ps221ss.ssNps221MrktZone5, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221MrktZone5.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-MRKT-ZONE5 > SPACES... */
		if (isGT(ps221ss.ssNps221ScheduleNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221ScheduleNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-SCHEDULE-NO > SPACES... */
		if (isGT(ps221ss.ssNps221PrnInd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps221ss.ssNps221PrnInd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS221-PRN-IND > SPACES... */
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			if (isGT(ps221ss.ssNps221Days[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221Days[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-DAYS (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SITE-FR-HH (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SITE-FR-MM (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SITE-FR-AP (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SITE-TO-HH (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SITE-TO-MM (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SITE-TO-AP (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SHOP-FR-HH (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SHOP-FR-MM (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SHOP-FR-AP (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SHOP-TO-HH (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SHOP-TO-MM (WS-SUB) > SPACES... */
			if (isGT(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				/* CONTINUE_STMT */
			} else {
				ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			}
			/* ##* Ending: IF SS-NPS221-SHOP-TO-AP (WS-SUB) > SPACES... */
		}
	}

	/**
	 * Method generated from paragraph 1305-ADD-TO-TABLES.
	 */
	private void addToTables() {
		trcConvrConversationalInner.trcConvrFunctionCode.set("U001");
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(DateValidator.class);
		link.setCommarea(trcConvrConversationalInner.trcConvrConversational);
		link.setLength(1000);
		link.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
			/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps221WorkFieldsInner.wsTempDate.set(trcConvrConversationalInner.trcConvrStdoutDateX);
			nps221WorkFieldsInner.wsTodaysDtCc.set(nps221WorkFieldsInner.wsTempDtCc);
			nps221WorkFieldsInner.wsTodaysDtYy.set(nps221WorkFieldsInner.wsTempDtYy);
			nps221WorkFieldsInner.wsTodaysDtMm.set(nps221WorkFieldsInner.wsTempDtMm);
			nps221WorkFieldsInner.wsTodaysDtDd.set(nps221WorkFieldsInner.wsTempDtDd);
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* ##* ADD ROWS TO THE NPSXTBU TABLE */
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTBU")
			        + " "
			        + "(UN_NO, UN_NM, UN_TYP_CD, UN_LN1_AD, UN_LN2_AD, UN_CTY_NM, UN_STE_CD, ZIP_CD, ZIP_SUF_CD, RGN_NO, CTR_SVC_UN_NO, INQ_CMY_CD, RTE_UN_NO, RFS_UN_NO)"
			        + " VALUES ('" + paFieldsInner.paSuNo + "', '" + paFieldsInner.paSuName + "', '"
			        + paFieldsInner.paUnitType + "', '" + paFieldsInner.paAddrLine1 + "', '"
			        + paFieldsInner.paAddrLine2 + "', '" + paFieldsInner.paCity + "', '" + paFieldsInner.paState
			        + "', '" + paFieldsInner.paZip5 + "', '" + paFieldsInner.paZip4 + "', '" + paFieldsInner.paRegionNo
			        + "', '" + paFieldsInner.paCentralNo + "', '" + paFieldsInner.paInqCmyCd + "', '"
			        + paFieldsInner.paRteUnNo + "', '" + paFieldsInner.paRfsAcctNo + "')";
			sqlparams = null;
*/			
			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTBU")
			        + " "
			        + "(UN_NO, UN_NM, UN_TYP_CD, UN_LN1_AD, UN_LN2_AD, UN_CTY_NM, UN_STE_CD, ZIP_CD, ZIP_SUF_CD, RGN_NO, CTR_SVC_UN_NO, INQ_CMY_CD, RTE_UN_NO, RFS_UN_NO)"
			        + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			sqlparams = new BaseData[]{paFieldsInner.paSuNo, paFieldsInner.paSuName,
					paFieldsInner.paUnitType, paFieldsInner.paAddrLine1, paFieldsInner.paAddrLine2, 
					paFieldsInner.paCity, paFieldsInner.paState, paFieldsInner.paZip5, 
					paFieldsInner.paZip4, paFieldsInner.paRegionNo, paFieldsInner.paCentralNo, 
					paFieldsInner.paInqCmyCd, paFieldsInner.paRteUnNo, paFieldsInner.paRfsAcctNo};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		/* KG-09 */
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("13");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* ##* * ADD ROWS INTO IPSUMGFL VSAM FILE ##GS-08S */
		updateMsgCmyLst();
		/* ##* ##GS-08E */
		/* ##* * ADD ROWS INTO NPSXTUP TABLE ##PB-07S */
		for (psxtupinTblInner.psxtupinSub.set(1); !(isGT(psxtupinTblInner.psxtupinSub, psxtupinTblInner.psxtupinEntryQt)); psxtupinTblInner.psxtupinSub
		    .add(1)) {
			insertUp();
		}
		/* ##* ##PB-07E */
		/* ##* ADD ROWS TO THE NPSXTSC TABLE */
		npsxtsc.svcUnNo.set(ps221ss.ssNps221SuNo);
		npsxtsc.tirPrcSchNo.set(ps221ss.ssNps221ScheduleNo);
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSC") + " "
			        + "(SVC_UN_NO, TIR_PRC_SCH_NO)" + " VALUES ('" + npsxtsc.svcUnNo + "', '" + npsxtsc.tirPrcSchNo
			        + "')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSC") + " "
			        + "(SVC_UN_NO, TIR_PRC_SCH_NO)" + " VALUES (?, ?)";
			sqlparams = new BaseData[]{npsxtsc.svcUnNo, npsxtsc.tirPrcSchNo};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("14");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* ##* ADD ROWS TO THE NPSXTSU TABLE */
		if (isGT(paFieldsInner.paUnOpnDtMm, SPACES)) {
			nps221WorkFieldsInner.wsDb2DateMm.set(paFieldsInner.paUnOpnDtMm);
		}
		/* ##* Ending: IF PA-UN-OPN-DT-MM > SPACES... */
		nps221WorkFieldsInner.wsDb2DateDd.set(paFieldsInner.paUnOpnDtDd);
		nps221WorkFieldsInner.wsDb2DateYy.set(paFieldsInner.paUnOpnDtYy);
		if (isGT(nps221WorkFieldsInner.wsDb2DateYy, 40)) {
			nps221WorkFieldsInner.wsDb2DateCc.set(19);
			paFieldsInner.paUnOpnDtCc.set("19");
		} else {
			nps221WorkFieldsInner.wsDb2DateCc.set(20);
			paFieldsInner.paUnOpnDtCc.set("20");
		}
		npsxtsu.unOpnDt.set(nps221WorkFieldsInner.wsDb2Date);
		nps221WorkFieldsInner.wsDb2DateMm.set(paFieldsInner.paCnvSpdeDtMm);
		nps221WorkFieldsInner.wsDb2DateDd.set(paFieldsInner.paCnvSpdeDtDd);
		nps221WorkFieldsInner.wsDb2DateYy.set(paFieldsInner.paCnvSpdeDtYy);
		if (isGT(nps221WorkFieldsInner.wsDb2DateYy, 40)) {
			nps221WorkFieldsInner.wsDb2DateCc.set(19);
			paFieldsInner.paCnvSpdeDtCc.set("19");
		} else {
			if (isEQ(paFieldsInner.paCnvSpdeDtYy, SPACES)) {
				nps221WorkFieldsInner.wsDb2DateCc.set(11);
				nps221WorkFieldsInner.wsDb2DateYy.set(11);
				paFieldsInner.paCnvSpdeDtCc.set("11");
				paFieldsInner.paCnvSpdeDtYy.set("11");
			} else {
				nps221WorkFieldsInner.wsDb2DateCc.set(20);
				paFieldsInner.paCnvSpdeDtCc.set("20");
			}
			/* ##* Ending: IF PA-CNV-SPDE-DT-YY = SPACES... */
		}
		npsxtsu.cnvSpdeDt.set(nps221WorkFieldsInner.wsDb2Date);
		if (isGT(nps221WorkFieldsInner.wsDb2Date, nps221WorkFieldsInner.wsTodaysDate)) {
			npsxtsu.spdeSvcUnFl.set("N");
		} else {
			npsxtsu.spdeSvcUnFl.set("Y");
		}
		nps221WorkFieldsInner.wsDb2DateMm.set(paFieldsInner.paCnvCarsDtMm);
		nps221WorkFieldsInner.wsDb2DateDd.set(paFieldsInner.paCnvCarsDtDd);
		nps221WorkFieldsInner.wsDb2DateYy.set(paFieldsInner.paCnvCarsDtYy);
		if (isGT(nps221WorkFieldsInner.wsDb2DateYy, 40)) {
			nps221WorkFieldsInner.wsDb2DateCc.set(19);
			paFieldsInner.paCnvCarsDtCc.set("19");
		} else {
			if (isEQ(paFieldsInner.paCnvCarsDtYy, SPACES)) {
				nps221WorkFieldsInner.wsDb2DateCc.set(11);
				nps221WorkFieldsInner.wsDb2DateYy.set(11);
				paFieldsInner.paCnvCarsDtCc.set("11");
				paFieldsInner.paCnvCarsDtYy.set("11");
			} else {
				nps221WorkFieldsInner.wsDb2DateCc.set(20);
				paFieldsInner.paCnvCarsDtCc.set("20");
			}
			/* ##* Ending: IF PA-CNV-CARS-DT-YY = SPACES... */
		}
		npsxtsu.cnvCarsDt.set(nps221WorkFieldsInner.wsDb2Date);
		/* ##* * ##BM-05S */
		/* ##* CPU-AID-RTE-FL = SPACES */
		npsxtsu.cpuAidRteFl.set(paFieldsInner.paCpuAidRte);
		/* ##* * ##BM-05E */
		nps221WorkFieldsInner.wsDb2DateMm.set(paFieldsInner.paPosStaDtMm);
		nps221WorkFieldsInner.wsDb2DateDd.set(paFieldsInner.paPosStaDtDd);
		nps221WorkFieldsInner.wsDb2DateYy.set(paFieldsInner.paPosStaDtYy);
		if (isGT(nps221WorkFieldsInner.wsDb2DateYy, 40)) {
			nps221WorkFieldsInner.wsDb2DateCc.set(19);
			paFieldsInner.paPosStaDtCc.set("19");
		} else {
			if (isEQ(paFieldsInner.paPosStaDtYy, SPACES)) {
				nps221WorkFieldsInner.wsDb2DateCc.set(11);
				nps221WorkFieldsInner.wsDb2DateYy.set(11);
				paFieldsInner.paPosStaDtCc.set("11");
				paFieldsInner.paPosStaDtYy.set("11");
			} else {
				nps221WorkFieldsInner.wsDb2DateCc.set(20);
				paFieldsInner.paPosStaDtCc.set("20");
			}
			/* ##* Ending: IF PA-POS-STA-DT-YY = SPACES... */
		}
		npsxtsu.posStaDt.set(nps221WorkFieldsInner.wsDb2Date);
		nps221WorkFieldsInner.wsDb2DateMm.set(paFieldsInner.paSvcUnCloDtMm);
		nps221WorkFieldsInner.wsDb2DateDd.set(paFieldsInner.paSvcUnCloDtDd);
		nps221WorkFieldsInner.wsDb2DateYy.set(paFieldsInner.paSvcUnCloDtYy);
		if (isGT(nps221WorkFieldsInner.wsDb2DateYy, 40)) {
			nps221WorkFieldsInner.wsDb2DateCc.set(19);
			paFieldsInner.paSvcUnCloDtCc.set("19");
		} else {
			if (isEQ(paFieldsInner.paSvcUnCloDtYy, SPACES)) {
				nps221WorkFieldsInner.wsDb2DateCc.set(11);
				nps221WorkFieldsInner.wsDb2DateYy.set(11);
				paFieldsInner.paSvcUnCloDtCc.set("11");
				paFieldsInner.paSvcUnCloDtYy.set("11");
			} else {
				nps221WorkFieldsInner.wsDb2DateCc.set(20);
				paFieldsInner.paSvcUnCloDtCc.set("20");
			}
			/* ##* Ending: IF PA-SVC-UN-CLO-DT-YY = SPACES... */
		}
		npsxtsu.svcUnCloDt.set(nps221WorkFieldsInner.wsDb2Date);
		nps221WorkFieldsInner.wsDb2DateMm.set(paFieldsInner.paCnvNpnDtMm);
		nps221WorkFieldsInner.wsDb2DateDd.set(paFieldsInner.paCnvNpnDtDd);
		nps221WorkFieldsInner.wsDb2DateYy.set(paFieldsInner.paCnvNpnDtYy);
		if (isGT(nps221WorkFieldsInner.wsDb2DateYy, 40)) {
			nps221WorkFieldsInner.wsDb2DateCc.set(19);
			paFieldsInner.paCnvNpnDtCc.set("19");
		} else {
			if (isEQ(paFieldsInner.paCnvNpnDtYy, SPACES)) {
				nps221WorkFieldsInner.wsDb2DateCc.set(11);
				nps221WorkFieldsInner.wsDb2DateYy.set(11);
				paFieldsInner.paCnvNpnDtCc.set("11");
				paFieldsInner.paCnvNpnDtYy.set("11");
			} else {
				nps221WorkFieldsInner.wsDb2DateCc.set(20);
				paFieldsInner.paCnvNpnDtCc.set("20");
			}
			/* ##* Ending: IF PA-CNV-NPN-DT-YY = SPACES... */
		}
		npsxtsu.cnvNpnDt.set(nps221WorkFieldsInner.wsDb2Date);
		npsxtsu.posUnNo.set(paFieldsInner.paPosUnNo);
		/* ##* * ##BM-05S */
		/* ##* ##PB-07S */
		/* ##* JV-SVC-UN-NO OF DCLNPSXTSU = PA-JV-UN-NO */
		/* ##* ##PB-07E */
		/* ##* * ##BM-05E */
		nps221WorkFieldsInner.wsPrtMku.set(paFieldsInner.paFgnStrPrtMku);
		npsxtsu.fgnStrPrtMkuPc.set(nps221WorkFieldsInner.wsPrtMku);
		/* TSA-01-S */
		nps221WorkFieldsInner.wsInhomeMku.set(paFieldsInner.paInhomePrtMku);
		npsxtsu.prmSitPrtMkuPc.set(nps221WorkFieldsInner.wsInhomeMku);
		nps221WorkFieldsInner.wsShopMku.set(paFieldsInner.paShopPrtMku);
		npsxtsu.prmShpPrtMkuPc.set(nps221WorkFieldsInner.wsShopMku);
		/* TSA-01-E */
		npsxtsu.steRegNo.set(paFieldsInner.paStateRegNo);
		npsxtsu.prtShCd.set(paFieldsInner.paShipDest);
		npsxtsu.svcUnTvlIstDs.set(ps221ss.ssNps221DrivInst);
		nps221WorkFieldsInner.wsCustSvcTelAc.set(ps221ss.ssNps221CustSvcAc);
		nps221WorkFieldsInner.wsCustSvcTel3.set(ps221ss.ssNps221CustSvcPhn3);
		nps221WorkFieldsInner.wsCustSvcTel4.set(ps221ss.ssNps221CustSvcPhn4);
		nps221WorkFieldsInner.wsPrnInd.set(ps221ss.ssNps221PrnInd);
		npsxtsu.svcUnNo.set(paFieldsInner.paSuNo);
		npsxtsu.svcPvdFl.set(paFieldsInner.paSvcPvdFl);
		npsxtsu.mktAtvFl.set(paFieldsInner.paMktAtvFl);
		npsxtsu.prtInvCryFl.set(paFieldsInner.paPrtInvCryFl);
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTSU")
			        + " "
			        + "(SVC_UN_NO, SVC_UN_PHN_NO, SVC_PVD_FL, MKT_ATV_FL, PRT_INV_CRY_FL, UN_OPN_DT, SVC_UN_CLO_DT, SVC_UN_TVL_IST_DS, CNV_NPN_DT, CNV_SPDE_DT, SPDE_SVC_UN_FL, CNV_CARS_DT, CPU_AID_RTE_FL, POS_STA_DT, POS_UN_NO, FGN_STR_PRT_MKU_PC, STE_REG_NO, HOS_SVC_UN_NO, PRN_IND, PRT_SH_CD, SVC_UN_CNV_FL, PRM_SHP_PRT_MKU_PC, PRM_SIT_PRT_MKU_PC)"
			        + " VALUES ('" + npsxtsu.svcUnNo + "', '" + nps221WorkFieldsInner.wsCustSvcPhn + "', '"
			        + npsxtsu.svcPvdFl + "', '" + npsxtsu.mktAtvFl + "', '" + npsxtsu.prtInvCryFl + "', '"
			        + npsxtsu.unOpnDt + "', '" + npsxtsu.svcUnCloDt + "', '" + npsxtsu.svcUnTvlIstDs + "', '"
			        + npsxtsu.cnvNpnDt + "', '" + npsxtsu.cnvSpdeDt + "', '" + npsxtsu.spdeSvcUnFl + "', '"
			        + npsxtsu.cnvCarsDt + "', '" + npsxtsu.cpuAidRteFl + "', '" + npsxtsu.posStaDt + "', '"
			        + npsxtsu.posUnNo + "', '" + npsxtsu.fgnStrPrtMkuPc + "', '" + npsxtsu.steRegNo + "', '"
			        + paFieldsInner.paHostNo + "', '" + nps221WorkFieldsInner.wsPrnInd + "', '" + npsxtsu.prtShCd
			        + "', '" + paFieldsInner.paUnitConverted + "', '" + npsxtsu.prmShpPrtMkuPc + "', '"
			        + npsxtsu.prmSitPrtMkuPc + "')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTSU")
			        + "(SVC_UN_NO, SVC_UN_PHN_NO, SVC_PVD_FL, MKT_ATV_FL, PRT_INV_CRY_FL, UN_OPN_DT, SVC_UN_CLO_DT, SVC_UN_TVL_IST_DS, CNV_NPN_DT, CNV_SPDE_DT, SPDE_SVC_UN_FL, CNV_CARS_DT, CPU_AID_RTE_FL, POS_STA_DT, POS_UN_NO, FGN_STR_PRT_MKU_PC, STE_REG_NO, HOS_SVC_UN_NO, PRN_IND, PRT_SH_CD, SVC_UN_CNV_FL, PRM_SHP_PRT_MKU_PC, PRM_SIT_PRT_MKU_PC)"
			        + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			sqlparams = new BaseData[]{npsxtsu.svcUnNo, nps221WorkFieldsInner.wsCustSvcPhn, 
					npsxtsu.svcPvdFl, npsxtsu.mktAtvFl, npsxtsu.prtInvCryFl, 
					npsxtsu.unOpnDt, npsxtsu.svcUnCloDt, npsxtsu.svcUnTvlIstDs, 
					npsxtsu.cnvNpnDt, npsxtsu.cnvSpdeDt, npsxtsu.spdeSvcUnFl,
					npsxtsu.cnvCarsDt, npsxtsu.cpuAidRteFl, npsxtsu.posStaDt, 
					npsxtsu.posUnNo, npsxtsu.fgnStrPrtMkuPc, npsxtsu.steRegNo,
					paFieldsInner.paHostNo, nps221WorkFieldsInner.wsPrnInd, npsxtsu.prtShCd,
					paFieldsInner.paUnitConverted, npsxtsu.prmShpPrtMkuPc, npsxtsu.prmSitPrtMkuPc};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		/* ##* ##PB-07E */
		/* TC-04S */
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else if (isEQ(getAppVars().getSqlErrorCode(), -803)) {
			updateNpsxtsu();
		} else {
			sqCallNumber.set("15");
			z991SqlError();
		}
		/* TC-04E */
		/* ##* ADD ROWS TO THE NPJXTXU TABLE */
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			if (isEQ(nps221WorkFieldsInner.wsSub, 2)) {
				nps221WorkFieldsInner.wsOprFrTimeR.set(nps221WorkFieldsInner.wsSiteFrTime[2]);
				npjxtxu.xuOperateHrFr.set(nps221WorkFieldsInner.wsOprFrTime);
				nps221WorkFieldsInner.wsOprToTimeR.set(nps221WorkFieldsInner.wsSiteToTime[2]);
				npjxtxu.xuOperateHrTo.set(nps221WorkFieldsInner.wsOprToTime);
			}
			/* ##* Ending: IF WS-SUB = 2... */
			if (isGT(nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)) {
				nps221WorkFieldsInner.wsDays[nps221WorkFieldsInner.wsSub.toInt()].set("Y");
			} else {
				nps221WorkFieldsInner.wsDays[nps221WorkFieldsInner.wsSub.toInt()].set("N");
			}
			/* ##* Ending: IF WS-SITE-FR-TIME-A (WS-SUB) > SPACES... */
		}
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPJXTXU")
			        + " "
			        + "(XU_SU_NO, XU_SU_NAME, XU_SU_ADDR_L1, XU_SU_ADDR_L2, XU_SU_CITY, XU_SU_STATE_PROV, XU_SU_ZIP_PC, XU_SU_ZIP_8, XU_SU_CLOSE_DATE, XU_REGION_NO, XU_ST_REGISTER_NO, XU_SU_TEL_NO, XU_OPERATE_DAYS, XU_OPERATE_HR_FR, XU_OPERATE_HR_TO, XU_MSA_IND, XU_PM_CHECK_IND)"
			        + " VALUES ('" + paFieldsInner.paSuNo + "', '" + paFieldsInner.paSuName + "', '"
			        + paFieldsInner.paAddrLine1 + "', '" + paFieldsInner.paAddrLine2 + "', '" + paFieldsInner.paCity
			        + "', '" + paFieldsInner.paState + "', '" + paFieldsInner.paZip5 + "', '" + paFieldsInner.paZip4
			        + "', '1111-11-11', '" + paFieldsInner.paRegionNo + "', '" + paFieldsInner.paStateRegNo + "', '"
			        + nps221WorkFieldsInner.wsCustSvcPhn + "', '" + nps221WorkFieldsInner.wsOperateDays + "', '"
			        + npjxtxu.xuOperateHrFr + "', '" + npjxtxu.xuOperateHrTo + "', 'N', 'N')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPJXTXU")
			        + "(XU_SU_NO, XU_SU_NAME, XU_SU_ADDR_L1, XU_SU_ADDR_L2, XU_SU_CITY, XU_SU_STATE_PROV, XU_SU_ZIP_PC, XU_SU_ZIP_8, XU_SU_CLOSE_DATE, XU_REGION_NO, XU_ST_REGISTER_NO, XU_SU_TEL_NO, XU_OPERATE_DAYS, XU_OPERATE_HR_FR, XU_OPERATE_HR_TO, XU_MSA_IND, XU_PM_CHECK_IND)"
			        + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, '1111-11-11', ?, ?, ?, ?, ?, ?, 'N', 'N')";
			sqlparams = new BaseData[]{paFieldsInner.paSuNo, paFieldsInner.paSuName,
					 paFieldsInner.paAddrLine1, paFieldsInner.paAddrLine2, paFieldsInner.paCity,
					 paFieldsInner.paState, paFieldsInner.paZip5, paFieldsInner.paZip4,
					 paFieldsInner.paRegionNo, paFieldsInner.paStateRegNo,
					 nps221WorkFieldsInner.wsCustSvcPhn, nps221WorkFieldsInner.wsOperateDays,
					 npjxtxu.xuOperateHrFr, npjxtxu.xuOperateHrTo};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		/* TC-04S */
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else if (isEQ(getAppVars().getSqlErrorCode(), -803)) {
			updateNpjxtxu();
		} else {
			sqCallNumber.set("16");
			z991SqlError();
			/* TC-04E */
			/* ##* ADD ROWS TO THE NPSXTSS TABLE(ALT) */
			npsxtss.oprFrmTm.set(nps221WorkFieldsInner.wsOprFrTime);
			npsxtss.oprToTm.set(nps221WorkFieldsInner.wsOprToTime);
			npsxtss.svcUnNo.set(ps221ss.ssNps221SuNo);
			sqlerrorflag = false;
			try {
				// Start - Manual fix for INSERT
/*				sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
				        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)" + " VALUES ('" + npsxtss.svcUnNo
				        + "', 'AL', '0', '" + npsxtss.oprFrmTm + "', '" + npsxtss.oprToTm + "')";
				sqlparams = null;
*/
				sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
				        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)" + " VALUES (?, 'AL', '0', ?, ?)";
				sqlparams = new BaseData[]{npsxtss.svcUnNo, npsxtss.oprFrmTm, npsxtss.oprToTm};
				// End - Manual fix for INSERT
				getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
			} catch (SQLException ex) {
				sqlerrorflag = true;
				getAppVars().setSqlErrorCode(ex);
			}
			if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
				nps221WorkFieldsInner.wsMessageKey.set("0025");
			} else {
				sqCallNumber.set("17");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = 0... */
		}
		/* ##* ADD ROWS TO THE NPSXTSS TABLE(SITE) */
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			if (isEQ(nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(nps221WorkFieldsInner.wsSiteFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(nps221WorkFieldsInner.wsSiteToTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(nps221WorkFieldsInner.wsSiteToTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				/* CONTINUE_STMT */
			} else {
				if (isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isNE(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						compute(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
						    add(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
					}
					/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) NOT = 12... */
				} else {
					if (isEQ(ps221ss.ssNps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
						if (isEQ(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
							nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
						}
						/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) = 12... */
					}
					/* ##* Ending: IF SS-NPS221-SITE-FR-AP (WS-SUB) = 'A' ... */
				}
				/* ##* Ending: IF SS-NPS221-SITE-FR-AP(WS-SUB) = 'P'... */
				if (isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isNE(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						compute(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
						    add(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
					}
					/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) NOT = 12... */
				} else {
					if (isEQ(ps221ss.ssNps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
						if (isEQ(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
							nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
						}
						/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) = 12... */
					}
					/* ##* Ending: IF SS-NPS221-SITE-TO-AP (WS-SUB) = 'A' ... */
				}
				/* ##* Ending: IF SS-NPS221-SITE-TO-AP (WS-SUB) = 'P'... */
				nps221WorkFieldsInner.wsOprFrTimeR.set(nps221WorkFieldsInner.wsSiteFrTime[nps221WorkFieldsInner.wsSub
				    .toInt()]);
				npsxtss.oprFrmTm.set(nps221WorkFieldsInner.wsOprFrTime);
				nps221WorkFieldsInner.wsOprToTimeR.set(nps221WorkFieldsInner.wsSiteToTime[nps221WorkFieldsInner.wsSub
				    .toInt()]);
				npsxtss.oprToTm.set(nps221WorkFieldsInner.wsOprToTime);
				npsxtss.svcUnNo.set(ps221ss.ssNps221SuNo);
				sqlerrorflag = false;
				try {
					// Start - Manual fix for INSERT
/*					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
					        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)" + " VALUES ('"
					        + npsxtss.svcUnNo + "', 'OS', '" + nps221WorkFieldsInner.wsSubR + "', '" + npsxtss.oprFrmTm
					        + "', '" + npsxtss.oprToTm + "')";
					sqlparams = null;
*/
					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
					        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)" + " VALUES (?, 'OS',?, ?,?)";
					sqlparams = new BaseData[]{ npsxtss.svcUnNo, nps221WorkFieldsInner.wsSubR, npsxtss.oprFrmTm, npsxtss.oprToTm};
					// End - Manual fix for INSERT
					getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					nps221WorkFieldsInner.wsMessageKey.set("0025");
				} else {
					sqCallNumber.set("18");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF WS-SITE-FR-TIME-A(WS-SUB) = SPACES OR ... */
		}
		/* ##* ADD ROWS TO THE NPSXTSS TABLE(SHOP) */
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			if (isEQ(nps221WorkFieldsInner.wsShopFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(nps221WorkFieldsInner.wsShopFrTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)
			        || isEQ(nps221WorkFieldsInner.wsShopToTimeA[nps221WorkFieldsInner.wsSub.toInt()], SPACES)
			        || isEQ(nps221WorkFieldsInner.wsShopToTimeA[nps221WorkFieldsInner.wsSub.toInt()], LOVALUES)) {
				/* CONTINUE_STMT */
			} else {
				if (isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isNE(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						compute(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
						    add(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
					}
					/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) NOT = 12... */
				} else {
					if (isEQ(ps221ss.ssNps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
						if (isEQ(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
							nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
						}
						/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) = 12... */
					}
					/* ##* Ending: IF SS-NPS221-SHOP-FR-AP (WS-SUB) = 'A' ... */
				}
				/* ##* Ending: IF SS-NPS221-SHOP-FR-AP (WS-SUB) = 'P'... */
				if (isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], "P")) {
					if (isNE(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
						compute(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 0).set(
						    add(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12));
					}
					/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) NOT = 12... */
				} else {
					if (isEQ(ps221ss.ssNps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()], "A")) {
						if (isEQ(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
							nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set(0);
						}
						/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) = 12... */
					}
					/* ##* Ending: IF SS-NPS221-SHOP-TO-AP (WS-SUB) = 'A' ... */
				}
				/* ##* Ending: IF SS-NPS221-SHOP-TO-AP (WS-SUB) = 'P'... */
				nps221WorkFieldsInner.wsOprFrTimeR.set(nps221WorkFieldsInner.wsShopFrTime[nps221WorkFieldsInner.wsSub
				    .toInt()]);
				npsxtss.oprFrmTm.set(nps221WorkFieldsInner.wsOprFrTime);
				nps221WorkFieldsInner.wsOprToTimeR.set(nps221WorkFieldsInner.wsShopToTime[nps221WorkFieldsInner.wsSub
				    .toInt()]);
				npsxtss.oprToTm.set(nps221WorkFieldsInner.wsOprToTime);
				npsxtss.svcUnNo.set(ps221ss.ssNps221SuNo);
				sqlerrorflag = false;
				try {
					// Start - Manual fix for INSERT
/*					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
					        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)" + " VALUES ('"
					        + npsxtss.svcUnNo + "', 'IS', '" + nps221WorkFieldsInner.wsSubR + "', '" + npsxtss.oprFrmTm
					        + "', '" + npsxtss.oprToTm + "')";
					sqlparams = null;
*/
					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSS") + " "
					        + "(SVC_UN_NO, SCH_TYP_CD, OPR_DAY_CD, OPR_FRM_TM, OPR_TO_TM)" + " VALUES (?, 'IS',?, ?, ?)";
					sqlparams = new BaseData[]{npsxtss.svcUnNo, nps221WorkFieldsInner.wsSubR, npsxtss.oprFrmTm, npsxtss.oprToTm};
					// End - Manual fix for INSERT
					getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					nps221WorkFieldsInner.wsMessageKey.set("0025");
				} else {
					sqCallNumber.set("19");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF WS-SHOP-FR-TIME-A (WS-SUB) = SPACES OR ... */
		}
		/* ##* ##LH-06 START */
		readIpspltflForCams();
		if (nps221WorkFieldsInner.notConvertedToCams.isTrue()) {
			addToCiEa();
		}
		/* ##* Ending: IF NOT-CONVERTED-TO-CAMS... */
		/* TSA-01 ##LH-06 END */
		/* ##* ##JA-03S */
		if (isGT(paFieldsInner.paAcsDckUnNo, SPACES)) {
			addAcsDck();
		}
		/* ##* Ending: IF PA-ACS-DCK-UN-NO > SPACES... */
		if (isEQ(paFieldsInner.paCrtDrcOrdFl, "Y")) {
			addToDrcFile();
		}
		/* ##* Ending: IF PA-CRT-DRC-ORD-FL = 'Y'... */
		/* ##* ##JA-03E */
		if (isEQ(nps221WorkFieldsInner.wsMessageKey, "0025")) {
			tpCommareaInner.caCustInd[1].set(SPACES);
			paFieldsInner.unitFl.set("O");
		}
		/* ##* Ending: IF WS-MESSAGE-KEY = '0025'... */
	}

	/**
	 * Method generated from paragraph 1306-READ-IPSPLTFL-FOR-CAMS.
	 */
	private void readIpspltflForCams() {
		ipspltflLogonUnNo.set(ps221ss.ssNps221SuNo);
		ipspltflSvcUnNo.set(ps221ss.ssNps221SuNo);
		ipspltflFunction.set("CAMS");
		cicsCallNumber.set("1");
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setDataset(IpspltflKsdsVsam.class);
		read.setInto(ipspltflRec);
		read.setRecordIdField(ipspltflKey);
		read.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isEQ(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			if (isEQ(ipspltflFl, "Y") || isEQ(ipspltflFl, "H")) {
				/* VS-10S */
				nps221WorkFieldsInner.wsConvertedToCamsFl.set("Y");
			} else {
				nps221WorkFieldsInner.wsConvertedToCamsFl.set("N");
			}
			/* ##* Ending: IF IPSPLTFL-FL = 'Y' OR 'H' ... */
		} else {
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				ipspltflLogonUnNo.set("9999999");
				ipspltflSvcUnNo.set("9999999");
				ipspltflFunction.set("CAMS");
				cicsCallNumber.set("2");
				ReadDirectly read2 = CICSCommandFactory.getReadDirectly(getCICSContext());
				read2.setDataset(IpspltflKsdsVsam.class);
				read2.setInto(ipspltflRec);
				read2.setRecordIdField(ipspltflKey);
				read2.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (isEQ(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
					if (isEQ(ipspltflFl, "Y") || isEQ(ipspltflFl, "H")) {
						/* VS-10S */
						nps221WorkFieldsInner.wsConvertedToCamsFl.set("Y");
					} else {
						nps221WorkFieldsInner.wsConvertedToCamsFl.set("N");
					}
					/* ##* Ending: IF IPSPLTFL-FL = 'Y' OR 'H' ... */
				} else {
					if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
						nps221WorkFieldsInner.wsConvertedToCamsFl.set("N");
					} else {
						/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
						clErrorflag = "C";
						accessError();
					}
					/* ##* Ending: IF NOTFND... */
				}
				/* ##* Ending: IF EIBRCODE = LOW-VALUES... */
				/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
			} else {
				/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
				clErrorflag = "C";
				accessError();
			}
			/* ##* Ending: IF NOTFND... */
		}
		/* ##* Ending: IF EIBRCODE = LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1307-INSERT-UP.
	 */
	private void insertUp() {
		npsxtup.busOrgCd.set(psxtupinTblInner.wsBusOrgCd[psxtupinTblInner.psxtupinSub.toInt()]);
		npsxtup.prnPusCd.set(psxtupinTblInner.wsPrnPusCd[psxtupinTblInner.psxtupinSub.toInt()]);
		npsxtup.prnSeqNo.set(psxtupinTblInner.wsPrnSeqNoN[psxtupinTblInner.psxtupinSub.toInt()]);
		npsxtup.prnIdNo.set(SPACES);
		npsxtup.prnDs.set(psxtupinTblInner.wsPrnDs[psxtupinTblInner.psxtupinSub.toInt()]);
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTUP") + " "
			        + "(SVC_UN_NO, BUS_ORG_CD, PRN_PUS_CD, PRN_SEQ_NO, PRN_ID_NO, PRN_DS)" + " VALUES ('"
			        + paFieldsInner.paSuNo + "', '" + npsxtup.busOrgCd + "', '" + npsxtup.prnPusCd + "', '"
			        + npsxtup.prnSeqNo + "', '" + npsxtup.prnIdNo + "', '" + npsxtup.prnDs + "')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTUP") + " "
			        + "(SVC_UN_NO, BUS_ORG_CD, PRN_PUS_CD, PRN_SEQ_NO, PRN_ID_NO, PRN_DS)" + " VALUES ("
			        + "?, ?, ?, "
			        + "?, ?, ?)";
			sqlparams = new BaseData[]{paFieldsInner.paSuNo, npsxtup.busOrgCd, npsxtup.prnPusCd, 
					npsxtup.prnSeqNo, npsxtup.prnIdNo, npsxtup.prnDs};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			/* CONTINUE_STMT */
		} else {
			sqCallNumber.set("20");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 1310-ADD-TO-CI-EA.
	 */
	private void addToCiEa() {
		npsxtci.svcUnNo.set(ps221ss.ssNps221SuNo);
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTCI")
			        + " "
			        + "(SVC_UN_NO, WRK_ARE_CD, CAL_LD_ARE_NM, ALL_DAY_FL, PRT_TFR_UN_NO, ALT_FRM_TM, ALT_TO_TM, MN_FL, TIR_PRC_SCH_NO)"
			        + " VALUES ('" + npsxtci.svcUnNo
			        + "', '   ', 'CDFAULT', 'N', '       ', '00.00.01', '00.00.01', 'Y', '  ')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTCI")
			        + " "
			        + "(SVC_UN_NO, WRK_ARE_CD, CAL_LD_ARE_NM, ALL_DAY_FL, PRT_TFR_UN_NO, ALT_FRM_TM, ALT_TO_TM, MN_FL, TIR_PRC_SCH_NO)"
//			        + " VALUES (?, '   ', 'CDFAULT', 'N', '       ', '00.00.01', '00.00.01', 'Y', '  ')";
			        + " VALUES (?, '   ', 'CDFAULT', 'N', '       ', '00:00:01', '00:00:01', 'Y', '  ')";
			sqlparams = new BaseData[]{npsxtci.svcUnNo};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0) || isEQ(getAppVars().getSqlErrorCode(), -803)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("21");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0 OR -803... */
		npsxtea.svcUnNo.set(ps221ss.ssNps221SuNo);
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTEA") + " "
			        + "(SVC_UN_NO, WRK_ARE_CD, EMR_CNT_ARE_NM, EMR_CAL_HDL_FL, NOT_OPR_FRM_TM, NOT_OPR_TO_TM)"
			        + " VALUES ('" + npsxtea.svcUnNo + "', '   ', 'EDFAULT', 'Y', '00.00.01', '00.00.01')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTEA") + " "
			        + "(SVC_UN_NO, WRK_ARE_CD, EMR_CNT_ARE_NM, EMR_CAL_HDL_FL, NOT_OPR_FRM_TM, NOT_OPR_TO_TM)"
//			        + " VALUES (?, '   ', 'EDFAULT', 'Y', '00.00.01', '00.00.01')";
			        + " VALUES (?, '   ', 'EDFAULT', 'Y', '00:00:01', '00:00:01')";
			sqlparams = new BaseData[]{npsxtea.svcUnNo};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0) || isEQ(getAppVars().getSqlErrorCode(), -803)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("22");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0 OR -803... */
	}

	/**
	 * Method generated from paragraph 1311-ADD-ACS-DCK.
	 */
	private void addAcsDck() {
		npsxtru.acsDckUnNo.set(paFieldsInner.paAcsDckUnNo);
		npsxtru.svcRtlUnNo.set(tpCommareaInner.caSvcUnNo);
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTRU") + " "
			        + "(ACS_DCK_UN_NO, SVC_RTL_UN_NO)" + " VALUES ('" + npsxtru.acsDckUnNo + "', '"
			        + npsxtru.svcRtlUnNo + "')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTRU") + " "
			        + "(ACS_DCK_UN_NO, SVC_RTL_UN_NO)" + " VALUES (?, ?)";
			sqlparams = new BaseData[]{npsxtru.acsDckUnNo, npsxtru.svcRtlUnNo};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			/* CONTINUE_STMT */
		} else {
			sqCallNumber.set("23");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 1312-ADD-TO-DRC-FILE.
	 */
	private void addToDrcFile() {
		ipsdrcflRec.set(SPACES);
		ipsdrcflKey.set(tpCommareaInner.caSvcUnNo);
		cicsCallNumber.set("3");
		WriteRecord write = CICSCommandFactory.getWriteRecord(getCICSContext());
		write.setFrom(ipsdrcflRec);
		write.setDataset(IpsdrcflKsdsVsam.class);
		write.setLength(ipsdrcflRec.getLength());
		write.setRecordIdField(ipsdrcflKey);
		write.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1315-WRITE-TO-UPJTSRP.
	 */
	private void writeToUpjtsrp() {
		if (isEQ(paFieldsInner.paUnitType, "RG")) {
			tsrOrgDesc.set("RGN");
			tsrOrgId.set("10");
		} else {
			tsrOrgDesc.set("UNIT");
			tsrOrgId.set("11");
		}
		/* ##* Ending: IF PA-UNIT-TYPE = 'RG'... */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT DISTINCT (CURRENT_TIMESTAMP)" + " FROM   "
			        + getAppVars().getTableNameOverriden("NPSXTD1") + " ";
			sqlinto = new BaseData[] { nps221WorkFieldsInner.wsTimestamp };
			sqlparams = null;
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			tsrOrgTstamp.set(nps221WorkFieldsInner.wsTimestamp);
		} else {
			sqCallNumber.set("24");
			z991SqlError();
		}
		tsrOrgNumber.set(tpCommareaInner.caSvcUnNo);
		cicsCallNumber.set("4");
		WriteRecord write = CICSCommandFactory.getWriteRecord(getCICSContext());
		write.setFrom(tsrOrgActivity);
		write.setDataset(UpjtsrpKsdsVsam.class);
		write.setLength(tsrOrgActivity.getLength());
		write.setRecordIdField(tsrOrgKey);
		write.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1320-DELETE-FRM-TABLE.
	 */
	private void deleteFrmTable() {
		sqlerrorflag = false;
		try {
			sqlstmt = " DELETE FROM  " + getAppVars().getTableNameOverriden("NPSXTSS") + " " + " WHERE SVC_UN_NO = ?"
			        + " AND OPR_DAY_CD = ?" + " AND SCH_TYP_CD = ?";
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo, nps221WorkFieldsInner.wsSubR,
			        nps221WorkFieldsInner.wsSchdType };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0) || isEQ(getAppVars().getSqlErrorCode(), 100)) {
			/* CONTINUE_STMT */
		} else {
			sqCallNumber.set("25");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0 OR 100... */
	}

	/**
	 * Method generated from paragraph 1330-CHECK-REC-TYPE.
	 */
	private void checkRecType() {
		nps221WorkFieldsInner.wsEffDateMm.set(ps221ss.ssNps221EffDateMm);
		nps221WorkFieldsInner.wsEffDateDd.set(ps221ss.ssNps221EffDateDd);
		nps221WorkFieldsInner.wsEffYear.set(ps221ss.ssNps221EffDateYy);
		nps221WorkFieldsInner.wsExpDateMm.set(ps221ss.ssNps221ExpDateMm);
		nps221WorkFieldsInner.wsExpDateDd.set(ps221ss.ssNps221ExpDateDd);
		nps221WorkFieldsInner.wsExpYear.set(ps221ss.ssNps221ExpDateYy);
		if (isEQ(nps221WorkFieldsInner.remarks1Flg, "Y")) {
			upsmuiflRecInner.upsmuiflSvcUnNo.set(ps221ss.ssNps221SuNo);
			upsmuiflRecInner.upsmuiflRecType.set("R");
			upsmuiflRecInner.upsmuiflSeqNo.set("01");
			nps221WorkFieldsInner.wsUpsmuiflFields.set(SPACES);
			nps221WorkFieldsInner.wsUpsmuiflRemarks.set(ps221ss.ssNps221Remarks1);
			nps221WorkFieldsInner.wsUpsmuiflEffectDate.set(nps221WorkFieldsInner.wsEffDate);
			nps221WorkFieldsInner.wsUpsmuiflExpireDate.set(nps221WorkFieldsInner.wsExpDate);
			updateVsam();
		}
		/* ##* Ending: IF REMARKS1-FLG = 'Y'... */
		if (isEQ(nps221WorkFieldsInner.remarks2Flg, "Y")) {
			upsmuiflRecInner.upsmuiflSvcUnNo.set(ps221ss.ssNps221SuNo);
			upsmuiflRecInner.upsmuiflRecType.set("R");
			upsmuiflRecInner.upsmuiflSeqNo.set("02");
			nps221WorkFieldsInner.wsUpsmuiflFields.set(SPACES);
			nps221WorkFieldsInner.wsUpsmuiflRemarks.set(ps221ss.ssNps221Remarks2);
			nps221WorkFieldsInner.wsUpsmuiflEffectDate.set(nps221WorkFieldsInner.wsEffDate);
			nps221WorkFieldsInner.wsUpsmuiflExpireDate.set(nps221WorkFieldsInner.wsExpDate);
			updateVsam();
		}
		/* ##* Ending: IF REMARKS2-FLG = 'Y'... */
		if (isEQ(nps221WorkFieldsInner.mrktZoneFlg, "Y")) {
			upsmuiflRecInner.upsmuiflSvcUnNo.set(ps221ss.ssNps221SuNo);
			upsmuiflRecInner.upsmuiflRecType.set("M");
			upsmuiflRecInner.upsmuiflSeqNo.set("01");
			nps221WorkFieldsInner.wsUpsmuiflFields.set(SPACES);
			nps221WorkFieldsInner.wsUpsmuiflMkgZone1.set(ps221ss.ssNps221MrktZone1);
			nps221WorkFieldsInner.wsUpsmuiflMkgZone2.set(ps221ss.ssNps221MrktZone2);
			nps221WorkFieldsInner.wsUpsmuiflMkgZone3.set(ps221ss.ssNps221MrktZone3);
			nps221WorkFieldsInner.wsUpsmuiflMkgZone4.set(ps221ss.ssNps221MrktZone4);
			nps221WorkFieldsInner.wsUpsmuiflMkgZone5.set(ps221ss.ssNps221MrktZone5);
			updateVsam();
		}
		/* ##* Ending: IF MRKT-ZONE-FLG = 'Y'... */
	}

	/**
	 * Method generated from paragraph 1340-UPDATE-VSAM.
	 */
	private void updateVsam() {
		cicsCallNumber.set("5");
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setDataset(UpsmuiflKsdsVsam.class);
		read.setInto(upsmuiflRecInner.upsmuiflRec);
		read.setLength(upsmuiflRecInner.upsmuiflRec.getLength());
		read.setRecordIdField(upsmuiflRecInner.upsmuiflKey);
		read.setKeylength(upsmuiflRecInner.upsmuiflKey.getLength());
		read.setUpdate(true);
		read.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				addToVsam();
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps221WorkFieldsInner.wsMessageKey.set("3009");
					nps221WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps221WorkFieldsInner.wsMessageKey.set("3010");
						nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps221WorkFieldsInner.wsMessageKey.set("3011");
							nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps221WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC ... */
					}
					/* ##* Ending: IF NOTOPEN ... */
				}
				/* ##* Ending: IF IOERR ... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			upsmuiflRecInner.upsmuiflFields.set(nps221WorkFieldsInner.wsUpsmuiflFields);
			cicsCallNumber.set("6");
			RewriteRecord rewrite = CICSCommandFactory.getRewriteRecord(getCICSContext());
			rewrite.setDataset(UpsmuiflKsdsVsam.class);
			rewrite.setFrom(upsmuiflRecInner.upsmuiflRec);
			rewrite.setLength(upsmuiflRecInner.upsmuiflRec.getLength());
			rewrite.execute();
			if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
				/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
				clErrorflag = "C";
				accessError();
				/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
			} else {
				nps221WorkFieldsInner.wsMessageKey.set("0025");
			}
			/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1350-ADD-TO-VSAM.
	 */
	private void addToVsam() {
		upsmuiflRecInner.upsmuiflFields.set(nps221WorkFieldsInner.wsUpsmuiflFields);
		cicsCallNumber.set("7");
		WriteRecord write = CICSCommandFactory.getWriteRecord(getCICSContext());
		write.setFrom(upsmuiflRecInner.upsmuiflRec);
		write.setDataset(UpsmuiflKsdsVsam.class);
		write.setLength(upsmuiflRecInner.upsmuiflRec.getLength());
		write.setRecordIdField(upsmuiflRecInner.upsmuiflKey);
		write.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
			/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps221WorkFieldsInner.wsMessageKey.set("0024");
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1360-DEL-FROM-VSAM.
	 */
	private void delFromVsam() {
		upsmuiflRecInner.upsmuiflFields.set(nps221WorkFieldsInner.wsUpsmuiflFields);
		cicsCallNumber.set("8");
		DeleteRecord delete = CICSCommandFactory.getDeleteRecord(getCICSContext());
		delete.setDataset(UpsmuiflKsdsVsam.class);
		delete.setRecordIdField(upsmuiflRecInner.upsmuiflKey);
		delete.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				/* CONTINUE_STMT */
				/* ##* WS-MESSAGE-KEY = '2101' */
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps221WorkFieldsInner.wsMessageKey.set("3009");
					nps221WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps221WorkFieldsInner.wsMessageKey.set("3010");
						nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps221WorkFieldsInner.wsMessageKey.set("3011");
							nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps221WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC... */
					}
					/* ##* Ending: IF NOTOPEN... */
				}
				/* ##* Ending: IF IOERR... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1370-UPDATE-MSG-CMY-LST.
	 */
	private void updateMsgCmyLst() {
		nps221WorkFieldsInner.wsMessageList.set(paFieldsInner.paMsgCmyLst);
		nps221WorkFieldsInner.wsSubCmy.set(ZERO);
		while (!(isGTE(nps221WorkFieldsInner.wsSubCmy, 16))) {
			compute(nps221WorkFieldsInner.wsSubCmy, 0).set(add(nps221WorkFieldsInner.wsSubCmy, 1));
			nps221WorkFieldsInner.wsChar.set(nps221WorkFieldsInner.wsMsgCmyLst[nps221WorkFieldsInner.wsSubCmy.toInt()]);
			if (isEQ(nps221WorkFieldsInner.wsChar, ALPHABETIC) && isGT(nps221WorkFieldsInner.wsChar, SPACES)) {
				updateIpsumgfl();
			}
			/* ##* Ending: IF WS-CHAR IS ALPHABETIC AND... */
		}

	}

	/**
	 * Method generated from paragraph 1380-UPDATE-IPSUMGFL.
	 */
	private void updateIpsumgfl() {
		ipsumgflRecord.set(SPACES);
		ipsumgflUnNo.set(tpCommareaInner.caSvcUnNo);
		ipsumgflInqCmyCd.set(nps221WorkFieldsInner.wsMsgCmyLst[nps221WorkFieldsInner.wsSubCmy.toInt()]);
		nps221WorkFieldsInner.csmtVsamName.set("IPSUMGFL");
		cicsCallNumber.set("9");
		WriteRecord write = CICSCommandFactory.getWriteRecord(getCICSContext());
		write.setFrom(ipsumgflRecord);
		write.setDataset(IpsumgflKsdsVsam.class);
		write.setLength(ipsumgflRecord.getLength());
		write.setRecordIdField(ipsumgflKey);
		write.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			if (apsEibfnEibrcodeInner.duprec.isTrue() || apsEibfnEibrcodeInner.dupkey.isTrue()) {
				/* CONTINUE_STMT */
			} else {
				/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
				clErrorflag = "C";
				accessError();
			}
			/* ##* Ending: IF DUPREC OR DUPKEY... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1400-UPDATE-NPSXTSU.
	 */
	private void updateNpsxtsu() {
		sqlerrorflag = false;
		try {
			sqlstmt = " UPDATE  "
			        + getAppVars().getTableNameOverriden("NPSXTSU")
			        + " "
			        + " SET SVC_UN_PHN_NO = ?, SVC_PVD_FL = ?, MKT_ATV_FL = ?, PRT_INV_CRY_FL = ?, UN_OPN_DT = ?, SVC_UN_CLO_DT = ?, SVC_UN_TVL_IST_DS = ?, CNV_NPN_DT = ?, CNV_SPDE_DT = ?, SPDE_SVC_UN_FL = ?, CNV_CARS_DT = ?, CPU_AID_RTE_FL = ?, POS_STA_DT = ?, POS_UN_NO = ?, FGN_STR_PRT_MKU_PC = ?, STE_REG_NO = ?, HOS_SVC_UN_NO = ?, PRN_IND = ?, PRT_SH_CD = ?, SVC_UN_CNV_FL = ?, PRM_SHP_PRT_MKU_PC = ?, PRM_SIT_PRT_MKU_PC = ?"
			        + " WHERE SVC_UN_NO = ?";
			sqlparams = new BaseData[] { nps221WorkFieldsInner.wsCustSvcPhn, npsxtsu.svcPvdFl, npsxtsu.mktAtvFl,
			        npsxtsu.prtInvCryFl, npsxtsu.unOpnDt, npsxtsu.svcUnCloDt, npsxtsu.svcUnTvlIstDs, npsxtsu.cnvNpnDt,
			        npsxtsu.cnvSpdeDt, npsxtsu.spdeSvcUnFl, npsxtsu.cnvCarsDt, npsxtsu.cpuAidRteFl, npsxtsu.posStaDt,
			        npsxtsu.posUnNo, npsxtsu.fgnStrPrtMkuPc, npsxtsu.steRegNo, paFieldsInner.paHostNo,
			        nps221WorkFieldsInner.wsPrnInd, npsxtsu.prtShCd, paFieldsInner.paUnitConverted,
			        npsxtsu.prmShpPrtMkuPc, npsxtsu.prmSitPrtMkuPc, npsxtsu.svcUnNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("26");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 1420-UPDATE-NPJXTXU.
	 */
	private void updateNpjxtxu() {
		sqlerrorflag = false;
		try {
			sqlstmt = " UPDATE  "
			        + getAppVars().getTableNameOverriden("NPJXTXU")
			        + " "
			        + " SET XU_SU_NAME = ?, XU_SU_ADDR_L1 = ?, XU_SU_ADDR_L2 = ?, XU_SU_CITY = ?, XU_SU_STATE_PROV = ?, XU_SU_ZIP_PC = ?, XU_SU_ZIP_8 = ?, XU_SU_CLOSE_DATE = '1111-11-11', XU_REGION_NO = ?, XU_ST_REGISTER_NO = ?, XU_SU_TEL_NO = ?, XU_OPERATE_DAYS = ?, XU_OPERATE_HR_FR = ?, XU_OPERATE_HR_TO = ?, XU_MSA_IND = 'N', XU_PM_CHECK_IND = 'N'"
			        + " WHERE XU_SU_NO = ?";
			sqlparams = new BaseData[] { paFieldsInner.paSuName, paFieldsInner.paAddrLine1, paFieldsInner.paAddrLine2,
			        paFieldsInner.paCity, paFieldsInner.paState, paFieldsInner.paZip5, paFieldsInner.paZip4,
			        paFieldsInner.paRegionNo, paFieldsInner.paStateRegNo, nps221WorkFieldsInner.wsCustSvcPhn,
			        nps221WorkFieldsInner.wsOperateDays, npjxtxu.xuOperateHrFr, npjxtxu.xuOperateHrTo,
			        paFieldsInner.paSuNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("27");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 1540-WRITE-CSMT-MSG.
	 */
	private void writeCsmtMsg() {
		nps221WorkFieldsInner.csmtVsamName.set("UPSMUIFL");
		nps221WorkFieldsInner.csmtEibrcode.set(getCICSContext().getEIB().getResponseCode());
		nps221WorkFieldsInner.csmtEibfn.set(getCICSContext().getEIB().getLastCommand());
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(nps221WorkFieldsInner.wsNps221VsamMsg);
		writeqTd.setLength(nps221WorkFieldsInner.wsNps221VsamMsg.getLength());
		writeqTd.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2000-PROGRAM-INV-PROCESSING.
	 */
	private void programInvProcessing() {
		if (isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS050")) {
			tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set(SPACES);
			compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
			tpCommareaInner.caCurrPageNo.set(1);
			/* : === BEGIN CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
			ssPageNumber.set(tpCommareaInner.caCurrPageNo);
			ssArea2.set(SPACES);
			ssProgName.set("NPS221");
			StringUtil stringVariable1 = new StringUtil();
			stringVariable1.addExpression(ssProgNameSfx);
			stringVariable1.addExpression("0");
			stringVariable1.setStringInto(ssArea1);
			z100RestoreScreen();
			nps221FillerRecordInner.nps221Record.set(ssTsRecord);
			/* : === END CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
			if (isEQ(nps221FillerRecordInner.nps221SuNameLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221DrivInstLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221CustSvcAcLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221CustSvcPhn3Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221CustSvcPhn4Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221Remarks1Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221Remarks2Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221EffDateMmLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221EffDateDdLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221EffDateYyLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221ExpDateMmLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221ExpDateDdLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221ExpDateYyLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221MrktZone1Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221MrktZone2Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221MrktZone3Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221MrktZone4Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221MrktZone5Length, -1)
			        || isEQ(nps221FillerRecordInner.nps221ScheduleNoLength, -1)
			        || isEQ(nps221FillerRecordInner.nps221PrnIndLength, -1)) {
				nps221CursorFlag.set("T");
			}
			/* ##* Ending: IF NPS221-SU-NAME-LENGTH = -1 OR... */
			for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
			    .add(1)) {
				/* No processing required. */
			}
			if (isEQ(nps221FillerRecordInner.nps221DaysLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221SiteFrHhLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221SiteFrMmLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221SiteFrApLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221SiteToHhLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221SiteToMmLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221SiteToApLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221ShopFrHhLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221ShopFrMmLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221ShopFrApLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221ShopToHhLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221ShopToMmLength[nps221WorkFieldsInner.wsSub.toInt()], -1)
			        || isEQ(nps221FillerRecordInner.nps221ShopToApLength[nps221WorkFieldsInner.wsSub.toInt()], -1)) {
				nps221CursorFlag.set("T");
			}
			/* ##* Ending: IF NPS221-DAYS-LENGTH (WS-SUB) = -1 OR... */
			ps221ss.ssNps221Record.set(nps221FillerRecordInner.nps221Record);
			paFieldsInner.paFields.set(tpCommareaInner.caRemainig1);
			sendScreen();
		} else {
			if (isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS220")
			        || isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS671")) {
				if (isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS220")) {
					compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
					tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set("NPS221");
				} else {
					tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set(SPACES);
					compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
				}
				/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) = ... */
				paFieldsInner.paFields.set(tpCommareaInner.caRemainig1);
				firstTimeThru();
				sendScreen();
			} else {
				tpCommareaInner.caErrorKey.set("0007");
				cicsCallNumber.set("10");
				apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
				tpCommareaInner.tpInvocationMode.set("L");
				tpCommareaInner.tpAddrTable.set(LOVALUES);
				tpCommareaInner.tpAddrCount.set(0);
				LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
				link.setProgram(NPSErrorMessageHandler.class);
				link.setCommarea(tpCommareaInner.tpCommarea);
				link.setLength(5620);
				link.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
				wsMessageLine1.set(tpCommareaInner.caErrorMsg);
				wsMessagePgmId.set("NPS221");
				tpCommareaInner.caErrorKey.set("I007");
				cicsCallNumber.set("11");
				apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
				tpCommareaInner.tpInvocationMode.set("L");
				tpCommareaInner.tpAddrTable.set(LOVALUES);
				tpCommareaInner.tpAddrCount.set(0);
				LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
				link2.setProgram(NPSErrorMessageHandler.class);
				link2.setCommarea(tpCommareaInner.tpCommarea);
				link2.setLength(5620);
				link2.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
				wsMessageLine2.set(tpCommareaInner.caErrorMsg);
				cicsCallNumber.set("12");
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(wsMessageArea);
				sendText.setLength(158);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
					/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
					clErrorflag = "C";
					accessError();
				}
				/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
				/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar.execute();
			}
			/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) = ... */
		}
		/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) = ... */
	}

	/**
	 * Method generated from paragraph 2100-FIRST-TIME-THRU.
	 */
	private void firstTimeThru() {
		/* ##* SELECT DATA FROM NPSXTBU TABLE */
		tpCommareaInner.caErrorFlag.set("N");
		nps221FillerRecordInner.nps221TdScrnDate.set(tpCommareaInner.caTdScreenDate);
		nps221FillerRecordInner.nps221PgmLevel.set(nps221WorkFieldsInner.wsPgmLevel);
		nps221FillerRecordInner.nps221Msg.set(SPACES);
		nps221FillerRecordInner.nps221Msg2.set(SPACES);
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  UN_NO, UN_NM, UN_TYP_CD, ALT_RPR_UN_NO, CTR_SVC_UN_NO" + " FROM   "
			        + getAppVars().getTableNameOverriden("NPSXTBU") + " " + " WHERE UN_NO = ?";
			sqlinto = new BaseData[] { npsxtbu.unNo, npsxtbu.unNm, npsxtbu.unTypCd, npsxtbu.altRprUnNo,
			        npsxtbu.ctrSvcUnNo };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221FillerRecordInner.nps221SuNo.set(npsxtbu.unNo);
			nps221FillerRecordInner.nps221SuName.set(npsxtbu.unNm);
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100) && tpCommareaInner.userFromSco.isTrue()) {
				nps221FillerRecordInner.nps221SuNameLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps221CursorFlag.set("T");
				nps221FillerRecordInner.nps221SuNo.set(tpCommareaInner.caSvcUnNo);
				nps221FillerRecordInner.nps221SuName.set(paFieldsInner.paSuName);
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  SVC_UN_NO, TIR_PRC_SCH_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTSC")
			        + " " + " WHERE SVC_UN_NO = ?";
			sqlinto = new BaseData[] { npsxtsc.svcUnNo, npsxtsc.tirPrcSchNo };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221FillerRecordInner.nps221SuNo.set(npsxtsc.svcUnNo);
			nps221FillerRecordInner.nps221ScheduleNo.set(npsxtsc.tirPrcSchNo);
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				/* CONTINUE_STMT */
			} else {
				sqCallNumber.set("28");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* ##* SELECT DATA FROM NPSXTSU TABLE */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  SVC_UN_NO, SVC_UN_PHN_NO, SVC_UN_TVL_IST_DS, PRN_IND, PRT_SH_CD" + " FROM   "
			        + getAppVars().getTableNameOverriden("NPSXTSU") + " " + " WHERE SVC_UN_NO = ?";
			sqlinto = new BaseData[] { npsxtsu.svcUnNo, nps221WorkFieldsInner.wsCustSvcPhn, npsxtsu.svcUnTvlIstDs,
			        npsxtsu.prnInd, npsxtsu.prtShCd };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221FillerRecordInner.nps221SuNo.set(npsxtsu.svcUnNo);
			nps221FillerRecordInner.nps221CustSvcAc.set(nps221WorkFieldsInner.wsCustSvcTelAc);
			nps221FillerRecordInner.nps221CustSvcPhn3.set(nps221WorkFieldsInner.wsCustSvcTel3);
			nps221FillerRecordInner.nps221CustSvcPhn4.set(nps221WorkFieldsInner.wsCustSvcTel4);
			nps221FillerRecordInner.nps221DrivInst.set(npsxtsu.svcUnTvlIstDs);
			nps221FillerRecordInner.nps221PrnInd.set(npsxtsu.prnInd);
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				/* CONTINUE_STMT */
			} else {
				sqCallNumber.set("29");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		nps221WorkFieldsInner.wsSchdType.set("IS");
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			nps221FillerRecordInner.nps221Days[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsDaysRow[nps221WorkFieldsInner.wsSub.toInt()]);
			shopSelect();
		}
		nps221WorkFieldsInner.wsSchdType.set("OS");
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			siteSelect();
		}
		readVsam();
		if (tpCommareaInner.userFromSco.isTrue()) {
			resetScreenAttr();
		} else {
			protScreen();
			nps221WorkFieldsInner.wsMessageKey.set("3081");
		}
		/* ##* Ending: IF USER-FROM-SCO... */
		ps221ss.ssNps221Record.set(nps221FillerRecordInner.nps221Record);
		setSaveScreenAttr();
	}

	/**
	 * Method generated from paragraph 2115-SHOP-SELECT.
	 */
	private void shopSelect() {
		/* ##* SELECT SHOP TO AND FROM TIMES FROM NPSXTSS TABLE */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  OPR_FRM_TM, OPR_TO_TM" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTSS")
			        + " " + " WHERE SVC_UN_NO = ?" + " AND OPR_DAY_CD = ?" + " AND SCH_TYP_CD = ?";
			sqlinto = new BaseData[] { npsxtss.oprFrmTm, npsxtss.oprToTm };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo, nps221WorkFieldsInner.wsSubR,
			        nps221WorkFieldsInner.wsSchdType };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsOprFrTime.set(npsxtss.oprFrmTm);
			nps221WorkFieldsInner.wsShopFrTime[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsOprFrTimeR);
			if (isGT(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
				nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].subtract(12);
				nps221FillerRecordInner.nps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
			} else {
				if (isEQ(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
					nps221FillerRecordInner.nps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
				} else {
					if (isEQ(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()], 0)) {
						nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(12);
						nps221FillerRecordInner.nps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					} else {
						nps221FillerRecordInner.nps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					}
					/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) = 00... */
				}
				/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) = 12... */
			}
			/* ##* Ending: IF WS-SHOP-FR-HH (WS-SUB) > 12... */
			nps221FillerRecordInner.nps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsShopFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
			nps221FillerRecordInner.nps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsShopFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
			nps221WorkFieldsInner.wsOprToTime.set(npsxtss.oprToTm);
			nps221WorkFieldsInner.wsShopToTime[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsOprToTimeR);
			if (isGT(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
				nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()].subtract(12);
				nps221FillerRecordInner.nps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
			} else {
				if (isEQ(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
					nps221FillerRecordInner.nps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
				} else {
					if (isEQ(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()], 0)) {
						nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set(12);
						nps221FillerRecordInner.nps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					} else {
						nps221FillerRecordInner.nps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					}
					/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) = 00... */
				}
				/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) = 12... */
			}
			/* ##* Ending: IF WS-SHOP-TO-HH (WS-SUB) > 12... */
			nps221FillerRecordInner.nps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsShopToHh[nps221WorkFieldsInner.wsSub.toInt()]);
			nps221FillerRecordInner.nps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsShopToMm[nps221WorkFieldsInner.wsSub.toInt()]);
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				nps221FillerRecordInner.nps221ShopFrAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221ShopFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221ShopFrMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221ShopToAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221ShopToHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221ShopToMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			} else {
				sqCallNumber.set("30");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 2116-SITE-SELECT.
	 */
	private void siteSelect() {
		/* ##* SELECT SITE TO AND FROM TIMES FROM NPSXTSS TABLE */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  OPR_FRM_TM, OPR_TO_TM" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTSS")
			        + " " + " WHERE SVC_UN_NO = ?" + " AND OPR_DAY_CD = ?" + " AND SCH_TYP_CD = ?";
			sqlinto = new BaseData[] { npsxtss.oprFrmTm, npsxtss.oprToTm };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo, nps221WorkFieldsInner.wsSubR,
			        nps221WorkFieldsInner.wsSchdType };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps221WorkFieldsInner.wsOprFrTime.set(npsxtss.oprFrmTm);
			nps221WorkFieldsInner.wsSiteFrTime[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsOprFrTimeR);
			if (isGT(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
				nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].subtract(12);
				nps221FillerRecordInner.nps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
			} else {
				if (isEQ(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
					nps221FillerRecordInner.nps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
				} else {
					if (isEQ(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()], 0)) {
						nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(12);
						nps221FillerRecordInner.nps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					} else {
						nps221FillerRecordInner.nps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					}
					/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) = 00... */
				}
				/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) = 12... */
			}
			/* ##* Ending: IF WS-SITE-FR-HH (WS-SUB) > 12... */
			nps221FillerRecordInner.nps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsSiteFrHh[nps221WorkFieldsInner.wsSub.toInt()]);
			nps221FillerRecordInner.nps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsSiteFrMm[nps221WorkFieldsInner.wsSub.toInt()]);
			nps221WorkFieldsInner.wsOprToTime.set(npsxtss.oprToTm);
			nps221WorkFieldsInner.wsSiteToTime[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsOprToTimeR);
			if (isGT(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
				nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()].subtract(12);
				nps221FillerRecordInner.nps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
			} else {
				if (isEQ(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 12)) {
					nps221FillerRecordInner.nps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set("P");
				} else {
					if (isEQ(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()], 0)) {
						nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set(12);
						nps221FillerRecordInner.nps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					} else {
						nps221FillerRecordInner.nps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set("A");
					}
					/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) = 00... */
				}
				/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) = 12... */
			}
			/* ##* Ending: IF WS-SITE-TO-HH (WS-SUB) > 12... */
			nps221FillerRecordInner.nps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsSiteToHh[nps221WorkFieldsInner.wsSub.toInt()]);
			nps221FillerRecordInner.nps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(nps221WorkFieldsInner.wsSiteToMm[nps221WorkFieldsInner.wsSub.toInt()]);
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				nps221FillerRecordInner.nps221SiteFrAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221SiteFrHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221SiteFrMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221SiteToAp[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221SiteToHh[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps221FillerRecordInner.nps221SiteToMm[nps221WorkFieldsInner.wsSub.toInt()].set(SPACES);
			} else {
				sqCallNumber.set("31");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 2118-READ-VSAM.
	 */
	private void readVsam() {
		upsmuiflRecInner.upsmuiflSvcUnNo.set(tpCommareaInner.caSvcUnNo);
		upsmuiflRecInner.upsmuiflRecType.set("M");
		upsmuiflRecInner.upsmuiflSeqNo.set(1);
		cicsCallNumber.set("13");
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setDataset(UpsmuiflKsdsVsam.class);
		read.setInto(upsmuiflRecInner.upsmuiflRec);
		read.setLength(upsmuiflRecInner.upsmuiflRec.getLength());
		read.setRecordIdField(upsmuiflRecInner.upsmuiflKey);
		read.setKeylength(upsmuiflRecInner.upsmuiflKey.getLength());
		read.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				/* CONTINUE_STMT */
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps221WorkFieldsInner.wsMessageKey.set("3009");
					nps221WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps221WorkFieldsInner.wsMessageKey.set("3010");
						nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps221WorkFieldsInner.wsMessageKey.set("3011");
							nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps221WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC... */
					}
					/* ##* Ending: IF NOTOPEN... */
				}
				/* ##* Ending: IF IOERR... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps221FillerRecordInner.nps221MrktZone1.set(SPACES);
			nps221FillerRecordInner.nps221MrktZone2.set(SPACES);
			nps221FillerRecordInner.nps221MrktZone3.set(SPACES);
			nps221FillerRecordInner.nps221MrktZone4.set(SPACES);
			nps221FillerRecordInner.nps221MrktZone5.set(SPACES);
			nps221FillerRecordInner.nps221MrktZone1.set(upsmuiflRecInner.upsmuiflMkgZone1);
			nps221FillerRecordInner.nps221MrktZone2.set(upsmuiflRecInner.upsmuiflMkgZone2);
			nps221FillerRecordInner.nps221MrktZone3.set(upsmuiflRecInner.upsmuiflMkgZone3);
			nps221FillerRecordInner.nps221MrktZone4.set(upsmuiflRecInner.upsmuiflMkgZone4);
			nps221FillerRecordInner.nps221MrktZone5.set(upsmuiflRecInner.upsmuiflMkgZone5);
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		upsmuiflRecInner.upsmuiflSvcUnNo.set(tpCommareaInner.caSvcUnNo);
		upsmuiflRecInner.upsmuiflRecType.set("R");
		upsmuiflRecInner.upsmuiflSeqNo.set(2);
		cicsCallNumber.set("14");
		ReadDirectly read2 = CICSCommandFactory.getReadDirectly(getCICSContext());
		read2.setDataset(UpsmuiflKsdsVsam.class);
		read2.setInto(upsmuiflRecInner.upsmuiflRec);
		read2.setLength(upsmuiflRecInner.upsmuiflRec.getLength());
		read2.setRecordIdField(upsmuiflRecInner.upsmuiflKey);
		read2.setKeylength(upsmuiflRecInner.upsmuiflKey.getLength());
		read2.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				/* CONTINUE_STMT */
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps221WorkFieldsInner.wsMessageKey.set("3009");
					nps221WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps221WorkFieldsInner.wsMessageKey.set("3010");
						nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps221WorkFieldsInner.wsMessageKey.set("3011");
							nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps221WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC... */
					}
					/* ##* Ending: IF NOTOPEN... */
				}
				/* ##* Ending: IF IOERR... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps221FillerRecordInner.nps221Remarks2.set(upsmuiflRecInner.upsmuiflRemarks);
			nps221WorkFieldsInner.wsEffDate.set(upsmuiflRecInner.upsmuiflEffectDate);
			/* TSA-01-S */
			nps221FillerRecordInner.nps221EffDateMm.set(nps221WorkFieldsInner.wsEffDateMm);
			nps221FillerRecordInner.nps221EffDateDd.set(nps221WorkFieldsInner.wsEffDateDd);
			nps221FillerRecordInner.nps221EffDateYy.set(nps221WorkFieldsInner.wsEffYear);
			nps221WorkFieldsInner.wsExpDate.set(upsmuiflRecInner.upsmuiflExpireDate);
			nps221FillerRecordInner.nps221ExpDateMm.set(nps221WorkFieldsInner.wsExpDateMm);
			nps221FillerRecordInner.nps221ExpDateDd.set(nps221WorkFieldsInner.wsExpDateDd);
			nps221FillerRecordInner.nps221ExpDateYy.set(nps221WorkFieldsInner.wsExpYear);
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* TSA-01-E */
		/* ##* NPS221-EFF-DATE-MM = UPSMUIFL-EFFECT-DATE */
		/* ##* NPS221-EXP-DATE-MM = UPSMUIFL-EXPIRE-DATE */
		upsmuiflRecInner.upsmuiflSvcUnNo.set(tpCommareaInner.caSvcUnNo);
		upsmuiflRecInner.upsmuiflRecType.set("R");
		upsmuiflRecInner.upsmuiflSeqNo.set(1);
		cicsCallNumber.set("15");
		ReadDirectly read3 = CICSCommandFactory.getReadDirectly(getCICSContext());
		read3.setDataset(UpsmuiflKsdsVsam.class);
		read3.setInto(upsmuiflRecInner.upsmuiflRec);
		read3.setLength(upsmuiflRecInner.upsmuiflRec.getLength());
		read3.setRecordIdField(upsmuiflRecInner.upsmuiflKey);
		read3.setKeylength(upsmuiflRecInner.upsmuiflKey.getLength());
		read3.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				/* CONTINUE_STMT */
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps221WorkFieldsInner.wsMessageKey.set("3009");
					nps221WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps221WorkFieldsInner.wsMessageKey.set("3010");
						nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps221WorkFieldsInner.wsMessageKey.set("3011");
							nps221WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps221WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC... */
					}
					/* ##* Ending: IF NOTOPEN... */
				}
				/* ##* Ending: IF IOERR... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps221FillerRecordInner.nps221Remarks1.set(upsmuiflRecInner.upsmuiflRemarks);
			nps221WorkFieldsInner.wsEffDate.set(upsmuiflRecInner.upsmuiflEffectDate);
			nps221FillerRecordInner.nps221EffDateMm.set(nps221WorkFieldsInner.wsEffDateMm);
			nps221FillerRecordInner.nps221EffDateDd.set(nps221WorkFieldsInner.wsEffDateDd);
			nps221FillerRecordInner.nps221EffDateYy.set(nps221WorkFieldsInner.wsEffYear);
			nps221WorkFieldsInner.wsExpDate.set(upsmuiflRecInner.upsmuiflExpireDate);
			nps221FillerRecordInner.nps221ExpDateMm.set(nps221WorkFieldsInner.wsExpDateMm);
			nps221FillerRecordInner.nps221ExpDateDd.set(nps221WorkFieldsInner.wsExpDateDd);
			nps221FillerRecordInner.nps221ExpDateYy.set(nps221WorkFieldsInner.wsExpYear);
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2120-PROT-SCREEN.
	 */
	private void protScreen() {
		nps221FillerRecordInner.nps221SuNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221SuNameAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221DrivInstAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221CustSvcAcAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221CustSvcPhn3Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221CustSvcPhn4Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221Remarks1Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221Remarks2Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221EffDateMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221EffDateDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221EffDateYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221ExpDateMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221ExpDateDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221ExpDateYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221MrktZone1Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221MrktZone2Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221MrktZone3Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221MrktZone4Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221MrktZone5Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221PrnIndAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps221FillerRecordInner.nps221ScheduleNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* TP-ATTR NPS221 PROT COMMAND */
		nps221FillerRecordInner.nps221MsgAttr.set(apsScreenAttributesInner.tpAttrPbfft);
		nps221FillerRecordInner.nps221Msg2Attr.set(apsScreenAttributesInner.tpAttrPbfft);
		for (nps221WorkFieldsInner.wsSub.set(1); !(isGT(nps221WorkFieldsInner.wsSub, 7)); nps221WorkFieldsInner.wsSub
		    .add(1)) {
			nps221FillerRecordInner.nps221DaysAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221SiteFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221SiteFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221SiteFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221SiteToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221SiteToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221SiteToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221ShopFrHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221ShopFrMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221ShopFrApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221ShopToHhAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221ShopToMmAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
			nps221FillerRecordInner.nps221ShopToApAttr[nps221WorkFieldsInner.wsSub.toInt()]
			    .set(apsScreenAttributesInner.tpAttrPnfff);
		}
	}

	/**
	 * Method generated from paragraph 3000-TRANSID-INV-PROCESSING.
	 */
	private void transidInvProcessing() {
		tpCommareaInner.caErrorKey.set("I005");
		cicsCallNumber.set("16");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		wsMessageArea.set(tpCommareaInner.caErrorMsg);
		cicsCallNumber.set("17");
		ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
		sendText.setFrom(wsMessageArea);
		sendText.setLength(79);
		sendText.setErase(true);
		sendText.setFreekb(true);
		sendText.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 9000-SEND-SCREEN.
	 */
	private void sendScreen() {
		if (isGT(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
			tpCommareaInner.caErrorKey.set(nps221WorkFieldsInner.wsMessageKey);
			cicsCallNumber.set("18");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
			link.setProgram(NPSErrorMessageHandler.class);
			link.setCommarea(tpCommareaInner.tpCommarea);
			link.setLength(5620);
			link.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			nps221FillerRecordInner.nps221Msg.set(tpCommareaInner.caErrorMsg);
			tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
			ps221ss.ssNps221Msg.set(nps221FillerRecordInner.nps221Msg);
			nps221FillerRecordInner.nps221MsgAttr.set(apsScreenAttributesInner.tpAttrPbfft);
			ps221ss.scaSsNps221Msg.set(nps221FillerRecordInner.scaNps221Msg);
		}
		/* ##* Ending: IF WS-MESSAGE-KEY > SPACES... */
		/* : === CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		ssPageNumber.set(1);
		ssArea2.set(SPACES);
		ssProgName.set("NPS221");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		ssTsRecord.set(nps221FillerRecordInner.nps221Record);
		z100SaveScreen();
		/* : === END OF CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		cicsCallNumber.set("19");
		tpCommareaInner.tpInvocationMode.set("S");
		tpCommareaInner.tpCallingProgramId.set("NPS221");
		if (!nps221CursorPos.isTrue()) {
			nps221FillerRecordInner.nps221SuNameLength.set(apsScreenAttributesInner.tpPositionCursor);
		}
		/* ##* Ending: IF NOT NPS221-CURSOR-POS... */
		ScreenSendMap sendMap = CICSCommandFactory.getScreenSendMap(getCICSContext());
		sendMap.setScreen(Nps221ScreenVars.class);
		sendMap.setFrom(nps221FillerRecordInner.nps221Record);
		sendMap.setCursor(true);
		sendMap.setErase(true);
		sendMap.setFreekb(true);
		sendMap.execute();
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.setTransid("PS6F");
		returnVar.setCommarea(tpCommareaInner.tpCommarea);
		returnVar.setLength(5620);
		returnVar.execute();
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph 9100-SEND-SCREEN-DATAONLY.
	 */
	private void sendScreenDataonly() {
		if (isGT(nps221WorkFieldsInner.wsMessageKey, SPACES)) {
			tpCommareaInner.caErrorKey.set(nps221WorkFieldsInner.wsMessageKey);
			cicsCallNumber.set("20");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
			link.setProgram(NPSErrorMessageHandler.class);
			link.setCommarea(tpCommareaInner.tpCommarea);
			link.setLength(5620);
			link.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			nps221FillerRecordInner.nps221Msg.set(tpCommareaInner.caErrorMsg);
			tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
			ps221ss.ssNps221Msg.set(nps221FillerRecordInner.nps221Msg);
			nps221FillerRecordInner.nps221MsgAttr.set(apsScreenAttributesInner.tpAttrPbfft);
			ps221ss.scaSsNps221Msg.set(nps221FillerRecordInner.scaNps221Msg);
		}
		/* ##* Ending: IF WS-MESSAGE-KEY > SPACES... */
		tpCommareaInner.caRemainig1.set(paFieldsInner.paFields);
		/* : === CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		ssPageNumber.set(1);
		ssArea2.set(SPACES);
		ssProgName.set("NPS221");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		ssTsRecord.set(ps221ss.ssNps221Record);
		z100SaveScreen();
		/* : === END OF CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		nps221FillerRecordInner.nps221Record.set(ps221ss.ssNps221Record);
		cicsCallNumber.set("21");
		tpCommareaInner.tpInvocationMode.set("S");
		tpCommareaInner.tpCallingProgramId.set("NPS221");
		if (!nps221CursorPos.isTrue()) {
			nps221FillerRecordInner.nps221SuNameLength.set(apsScreenAttributesInner.tpPositionCursor);
		}
		/* ##* Ending: IF NOT NPS221-CURSOR-POS... */
		ScreenSendMap sendMap = CICSCommandFactory.getScreenSendMap(getCICSContext());
		sendMap.setScreen(Nps221ScreenVars.class);
		sendMap.setFrom(nps221FillerRecordInner.nps221Record);
		sendMap.setCursor(true);
		sendMap.setDataonly(true);
		sendMap.setFreekb(true);
		sendMap.execute();
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.setTransid("PS6F");
		returnVar.setCommarea(tpCommareaInner.tpCommarea);
		returnVar.setLength(5620);
		returnVar.execute();
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph 9200-XCTL.
	 */
	private void xctl() {
		if (isNE(nps221WorkFieldsInner.wsXctlPgm, "NPS050")) {
			/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
			dqProgName.set("NPS221");
			z100DeleteQueues();
		}
		/* ##* Ending: IF WS-XCTL-PGM NOT = 'NPS050'... */
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		cicsCallNumber.set("22");
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		cicsCallNumber.set("23");
		tpCommareaInner.tpInvocationMode.set("P");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
		xctl.setProgram(nps221WorkFieldsInner.wsXctlPgm);
		xctl.setCommarea(tpCommareaInner.tpCommarea);
		xctl.setLength(5620);
		xctl.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph Z100-DELETE-QUEUES.
	 */
	private void z100DeleteQueues() {
		/* : PARAGRAPH TO DELETE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-DELETE-QUEUES) : */
		/* DELETE QUEUE */
		dqProgQueueSysid.set(dqProgNameSysid);
		dqProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(dqProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("24");
		ReleaseTemporaryStorage deleteqTs = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs.setQueue(dqProgQueue);
		deleteqTs.setNoHandle(true);
		deleteqTs.execute();
		StringUtil stringVariable2 = new StringUtil();
		stringVariable2.addExpression(dqProgNameSfx);
		stringVariable2.addExpression("1");
		stringVariable2.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("25");
		ReleaseTemporaryStorage deleteqTs2 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs2.setQueue(dqProgQueue);
		deleteqTs2.setNoHandle(true);
		deleteqTs2.execute();
		StringUtil stringVariable3 = new StringUtil();
		stringVariable3.addExpression(dqProgNameSfx);
		stringVariable3.addExpression("2");
		stringVariable3.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("26");
		ReleaseTemporaryStorage deleteqTs3 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs3.setQueue(dqProgQueue);
		deleteqTs3.setNoHandle(true);
		deleteqTs3.execute();
		StringUtil stringVariable4 = new StringUtil();
		stringVariable4.addExpression(dqProgNameSfx);
		stringVariable4.addExpression("3");
		stringVariable4.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("27");
		ReleaseTemporaryStorage deleteqTs4 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs4.setQueue(dqProgQueue);
		deleteqTs4.setNoHandle(true);
		deleteqTs4.execute();
	}

	/**
	 * Method generated from paragraph 99700-ACCESS-ERROR.
	 */
	private void accessError() {
		/* : PARAGRAPH TO PROCESS CICS ERRORS : */
		/* : (GENERATED BY $NPS-ACCESS-ERROR) : */
		/* WRITE A MESSAGE TO THE CSMT */
		clCsmtMsg1Inner.clPgmId1.set("NPS221");
		clCsmtMsg1Inner.clEibrcode.set(getCICSContext().getEIB().getResponseCode());
		msg2Eibfn.set(getCICSContext().getEIB().getLastCommand());
		clCsmtMsg1Inner.clTermid.set(getCICSContext().getEIB().getTerminalId());
		clCsmtMsg1Inner.clUserid.set(tpCommareaInner.caUserid);
		if (isEQ(clErrorflag, "V")) {
			clCsmtMsg1Inner.clErrortype.set(" ** VSAM ERROR ** ");
		} else {
			if (isEQ(clErrorflag, "C")) {
				clCsmtMsg1Inner.clCallNumber.set(cicsCallNumber);
				clCsmtMsg1Inner.clCallLiteral.set("CICS-CALL-NUMBER=");
				clCsmtMsg1Inner.clErrortype.set(" ** CICS ERROR ** ");
			} else {
				if (isEQ(clErrorflag, "M")) {
					clCsmtMsg1Inner.clErrortype.set(" ** COMM ERROR ** ");
				} else {
					if (isEQ(clErrorflag, "T")) {
						clCsmtMsg1Inner.clErrortype.set(" ** TABLE ERROR ** ");
					}
					/* ##* Ending: IF CL-ERRORFLAG = 'T'... */
				}
				/* ##* Ending: IF CL-ERRORFLAG = 'M'... */
			}
			/* ##* Ending: IF CL-ERRORFLAG = 'C'... */
		}
		/* ##* Ending: IF CL-ERRORFLAG = 'V'... */
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		clCsmtMsg1Inner.clTime.set(foTimeScreen);
		/* : === END OF CODE GENERATED BY $NPS-FORMAT-TIME == : */
		/* % SET WRITE-CONTROL */
		/* % BEGIN */
		/* % IF NOT &DEFINED(&WS-DEFINED) */
		/* % &WS-DEFINED = 1 */
		/* $NPS-MORE-MESSAGES-WS */
		/* % SET WORKING-STORAGE */
		/* $Z100-MORE-MSG */
		/* % BEGIN */
		/* MSG2-DATE = CA-TD-SCREEN-DATE */
		msg2Date.set(tpCommareaInner.caTdScreenDate);
		/* MSG2-SVC-UN-NO = CA-SVC-UN-NO */
		msg2SvcUnNo.set(tpCommareaInner.caSvcUnNo);
		/* % SET NOWRITE-CONTROL */
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(clCsmtBlanks);
		writeqTd.setLength(clCsmtBlanksLength);
		writeqTd.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd2 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd2.setQueue("CSMT");
		writeqTd2.setFrom(clCsmtBorder);
		writeqTd2.setLength(clCsmtBorderLength);
		writeqTd2.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd3 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd3.setQueue("CSMT");
		writeqTd3.setFrom(clCsmtMsg1Inner.clCsmtMsg1);
		writeqTd3.setLength(clCsmtMsg1Length);
		writeqTd3.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd4 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd4.setQueue("CSMT");
		writeqTd4.setFrom(csmtMsg2);
		writeqTd4.setLength(csmtMsg2Length);
		writeqTd4.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd5 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd5.setQueue("CSMT");
		writeqTd5.setFrom(clCsmtBorder);
		writeqTd5.setLength(clCsmtBorderLength);
		writeqTd5.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd6 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd6.setQueue("CSMT");
		writeqTd6.setFrom(clCsmtBlanks);
		writeqTd6.setLength(clCsmtBlanksLength);
		writeqTd6.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.caErrorKey.set("9000");
		cicsCallNumber.set("28");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS221");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(6);
			tpCommareaInner.caEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(haMessageArea);
				sendText.setLength(79);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph 99400-FORMAT-TIME.
	 */
	private void formatTime() {
		/* : (GENERATED BY $NPS-FORMAT-TIME) : */
		foTimeNum.set(getCICSContext().getEIB().getTaskTime());
		foScrnHours.set(foHours);
		foScrnMinutes.set(foMinutes);
		foScrnSeconds.set(foSeconds);
	}

	/**
	 * Method generated from paragraph Z991-SQL-ERROR.
	 */
	private void z991SqlError() {
		/* : PARAGRAPH TO PROCESS SQL ERRORS : */
		/* : (GENERATED BY $NPS-SQL-ERROR) : */
		/* ROLLBACK THE TRANSACTION */
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* DELETE ANY EXISTING QUEUES */
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS221");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		/* SAVE THE SQLCODE IN THE COMMAREA */
		tpCommareaInner.caSqlcode.set(getAppVars().getSqlErrorCode());
		/* WRITE A MESSAGE TO THE CSMT */
		slSqlca.set(getAppVars().getSqlca());
		slProgId.set("NPS221");
		slCallNumber.set(sqCallNumber);
		tpCommareaInner.caProgramWorkArea.set(slWorkArea);
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(GetSqlErrorMessage.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		tpCommareaInner.caErrorKey.set("9001");
		cicsCallNumber.set("29");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
		link2.setProgram(NPSErrorMessageHandler.class);
		link2.setCommarea(tpCommareaInner.tpCommarea);
		link2.setLength(5620);
		link2.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(2);
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				if (isGT(getCICSContext().getEIB().getTerminalId(), SPACES)) {
					ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
					sendText.setFrom(haMessageArea);
					sendText.setLength(79);
					sendText.setErase(true);
					sendText.setFreekb(true);
					sendText.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				}
				/* ##* Ending: IF EIBTRMID > SPACES... */
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph Z100-RIGHT-JUSTIFY.
	 */
	private void z100RightJustify() {
		/* : THIS PARAGRAPH RIGHT JUSTIFYS THE INPUT FIELD : */
		/* : AND ADDS LEADING ZEROS. : */
		/* : THE FIELD IS ALSO VALIDATED TO ENSURE THERE ARE : */
		/* : NO ALPHA CHARACTERS OR EMBEDDED SPACES IN THE : */
		/* : INPUT. : */
		npsRightJustifyErr.set("N");
		npsOutputSub.set(16);
		npsOutput.set(ZERO);
		for (npsInputSub.set(16); !(isEQ(npsInputSub, 0) || isGT(npsInputChar[npsInputSub.toInt()], SPACES)); npsInputSub
		    .add(-1)) {
			/* No processing required. */
		}
		if (isEQ(npsInputSub, 0)) {
			npsRightJustifyErr.set("Y");
		}
		/* ##* Ending: IF NPS-INPUT-SUB = 0... */
		for (npsInputSub.set(npsInputSub); !(isEQ(npsRightJustifyErr, "Y") || isEQ(npsOutputSub, 0)
		        || isEQ(npsInputSub, 0) || isLTE(npsInputChar[npsInputSub.toInt()], SPACES)); npsInputSub.add(-1)) {
			if (isNE(npsInputChar[npsInputSub.toInt()], NUMERIC)) {
				npsRightJustifyErr.set("Y");
			} else {
				npsOutputChar[npsOutputSub.toInt()].set(npsInputChar[npsInputSub.toInt()]);
				compute(npsOutputSub, 0).set(sub(npsOutputSub, 1));
			}
			/* ##* Ending: IF NPS-INPUT-CHAR (NPS-INPUT-SUB) NOT NUMERIC... */
		}
		for (npsInputSub.set(npsInputSub); !(isEQ(npsRightJustifyErr, "Y") || isEQ(npsInputSub, 0)); npsInputSub
		    .add(-1)) {
			if (isGT(npsInputChar[npsInputSub.toInt()], SPACES)) {
				npsRightJustifyErr.set("Y");
			}
			/* ##* Ending: IF NPS-INPUT-CHAR (NPS-INPUT-SUB) > SPACE... */
		}
	}

	/**
	 * Method generated from paragraph Z100-LEFT-JUSTIFY.
	 */
	private void z100LeftJustify() {
		/* : THIS PARAGRAPH LEFT JUSTIFIES THE INPUT FIELD : */
		/* : AND ADDS TRAILING SPACES. : */
		npsLjNonSpaceFlag.set("N");
		npsLjOutputSub.set(1);
		npsLjOutput.set(SPACES);
		for (npsLjInputSub.set(1); !(!(isLT(npsLjInputSub, 67) && isEQ(npsLjInputChar[1], SPACES))); npsLjInputSub
		    .add(1)) {
			if (nonSpaceCharFound.isTrue()) {
				npsLjOutputChar[npsLjOutputSub.toInt()].set(npsLjInputChar[npsLjInputSub.toInt()]);
				compute(npsLjOutputSub, 0).set(add(npsLjOutputSub, 1));
			} else {
				if (isNE(npsLjInputChar[npsLjInputSub.toInt()], SPACES)) {
					npsLjNonSpaceFlag.set("Y");
					npsLjOutputChar[npsLjOutputSub.toInt()].set(npsLjInputChar[npsLjInputSub.toInt()]);
					compute(npsLjOutputSub, 0).set(add(npsLjOutputSub, 1));
				}
				/* ##* Ending: IF NPS-LJ-INPUT-CHAR(NPS-LJ-INPUT-SUB)... */
			}
			/* ##* Ending: IF NON-SPACE-CHAR-FOUND... */
		}
		if (isNE(npsLjInputChar[1], SPACES)) {
			npsLjOutput.set(npsLjInput);
		}
		/* ##* Ending: IF NPS-LJ-INPUT-CHAR(1) NOT = SPACE... */
	}

	/**
	 * Method generated from paragraph Z200-DELETE-SCREEN-QUEUE.
	 */
	private void z200DeleteScreenQueue() {
		/* : PARAGRAPH TO DELETE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* DELETE QUEUE */
		cicsCallNumber.set("30");
		ReleaseTemporaryStorage deleteqTs = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs.setQueue(ssProgQueue);
		deleteqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		/* Z200-DELETE-SCREEN-QUEUE--EXIT */
	}

	/**
	 * Method generated from paragraph Z200-REWRITE-SCREEN-ERROR.
	 */
	private void z200RewriteScreenError() {
		/* : PARAGRAPH TO OVERWRITE TS QUEUE RECORD : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* OVERWRITE RECORD */
		cicsCallNumber.set("31");
		WriteTemporaryStorage writeqTs = CICSCommandFactory.getWriteTemporaryStorage(getCICSContext());
		writeqTs.setQueue(ssProgQueue);
		writeqTs.setFrom(ssTsRecord);
		writeqTs.setLength(ssTsRecord.getLength());
		writeqTs.setItem(ssPageNumber);
		writeqTs.execute();
	}

	/**
	 * Method generated from paragraph Z100-SAVE-SCREEN.
	 */
	private void z100SaveScreen() {
		/* : PARAGRAPH TO SAVE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* BUILD QUEUE NAME */
		if (isEQ(ssArea2, SPACES)) {
			ssProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
			ssProgQueueSysid.set(ssProgNameSysid);
			ssProgQueueId.set(ssArea1Num);
		} else {
			ssProgQueue.set(ssArea2);
		}
		/* ##* Ending: IF SS-AREA-2 IS EQUAL TO SPACES... */
		cicsCallNumber.set("32");
		WriteTemporaryStorage writeqTs = CICSCommandFactory.getWriteTemporaryStorage(getCICSContext());
		writeqTs.setQueue(ssProgQueue);
		writeqTs.setFrom(ssTsRecord);
		writeqTs.setLength(ssTsRecord.getLength());
		writeqTs.setItem(ssPageNumber);
		writeqTs.setRewrite(true);
		writeqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (apsEibfnEibrcodeInner.qiderr.isTrue() || apsEibfnEibrcodeInner.itemerr.isTrue()) {
			z200RewriteScreenError();
		}
		/* ##* Ending: IF QIDERR OR ITEMERR... */
	}

	/**
	 * Method generated from paragraph Z100-RESTORE-SCREEN.
	 */
	private void z100RestoreScreen() {
		/* : PARAGRAPH TO RESTORE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-RESTORE-SCREEN) : */
		/* BUILD QUEUE NAME */
		if (isEQ(ssArea2, SPACES)) {
			ssProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
			ssProgQueueSysid.set(ssProgNameSysid);
			ssProgQueueId.set(ssArea1Num);
		} else {
			ssProgQueue.set(ssArea2);
		}
		/* ##* Ending: IF SS-AREA-2 IS EQUAL TO SPACES... */
		cicsCallNumber.set("33");
		ReadTemporaryStorage readqTs = CICSCommandFactory.getReadTemporaryStorage(getCICSContext());
		readqTs.setQueue(ssProgQueue);
		readqTs.setInto(ssTsRecord);
		readqTs.setLength(ssTsRecord.getLength());
		readqTs.setItem(ssPageNumber);
		readqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
	}

	/**
	 * Method generated from paragraph Z100-HANDLE-ABEND.
	 */
	private void z100HandleAbend() {
		/* : PARAGRAPH TO CREATE A DUMP : */
		/* : (GENERATED BY $NPS-HANDLE-ABEND) : */
		/* ROLLBACK THE TRANSACTION */
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* DELETE ANY EXISTING QUEUES */
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS221");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		/* WRITE A MESSAGE TO THE CSMT */
		haCsmtMsgInner.haMsgPgm.set("NPS221");
		AssignTransactionDetails assign = CICSCommandFactory.getAssignTransactionDetails(getCICSContext());
		assign.setAbcode(haCsmtMsgInner.haMsgAbendCode);
		assign.execute();
		haCsmtMsgInner.haMsgTermid.set(getCICSContext().getEIB().getTerminalId());
		haCsmtMsgInner.haMsgUserid.set(tpCommareaInner.caUserid);
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		haCsmtMsgInner.haMsgTime.set(foTimeScreen);
		/* : === END OF CODE GENERATED BY $NPS-FORMAT-TIME == : */
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(haCsmtMsgInner.haCsmtMsg);
		writeqTd.setLength(haCsmtMsgInner.haCsmtMsg.getLength());
		writeqTd.execute();
		if (isNE(haCsmtMsgInner.haMsgAbendCode, "AAL1") && isNE(haCsmtMsgInner.haMsgAbendCode, "ABM3")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AEY9") && isNE(haCsmtMsgInner.haMsgAbendCode, "AKCS")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "ATND") && isNE(haCsmtMsgInner.haMsgAbendCode, "ATNI")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AXFX") && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI4")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI6") && isNE(haCsmtMsgInner.haMsgAbendCode, "TX03")) {
			DumpApplication dump = CICSCommandFactory.getDumpApplication(getCICSContext());
			dump.setDumpcode(haCsmtMsgInner.haMsgAbendCode);
			dump.setComplete(true);
			dump.execute();
		}
		/* ##* Ending: IF HA-MSG-ABEND-CODE NOT = 'AAL1' AND... */
		tpCommareaInner.caErrorKey.set("9000");
		cicsCallNumber.set("34");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(4);
			tpCommareaInner.caEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(haMessageArea);
				sendText.setLength(79);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/*
	 * Class transformed from Data Structure TP-COMMAREA_INNER
	 */
	private static final class TpCommareaInner {

		private FixedLengthStringData tpCommarea = new FixedLengthStringData(5620);
		private FixedLengthStringData tpHeader = new FixedLengthStringData(40).isAPartOf(tpCommarea, 0);
		private FixedLengthStringData tpInvocationMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 0);
		private Validator tpTransidInvoked = new Validator(tpInvocationMode, "T");
		private Validator tpProgramInvoked = new Validator(tpInvocationMode, "P");
		private Validator tpScreenInvoked = new Validator(tpInvocationMode, "S");
		private Validator tpLinkInvoked = new Validator(tpInvocationMode, "L");
		private FixedLengthStringData tpPsbScheduledMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 1);
		private Validator tpPsbScheduled = new Validator(tpPsbScheduledMode, "P");
		private BinaryData tpAddrCount = new BinaryData(4, 0).isAPartOf(tpHeader, 2);
		private FixedLengthStringData tpCallingProgramId = new FixedLengthStringData(8).isAPartOf(tpHeader, 4);
		private FixedLengthStringData tpAddrTable = new FixedLengthStringData(80).isAPartOf(tpCommarea, 5540);
		private PointerData[] tpAddr = PtrArrayPartOfStructure(20, tpAddrTable, 0);

		private FixedLengthStringData filler2 = new FixedLengthStringData(5540).isAPartOf(tpCommarea, 0,
		    FILLER_REDEFINE);
		private FixedLengthStringData tpUserarea = new FixedLengthStringData(5500).isAPartOf(filler2, 40);
		private FixedLengthStringData commArea = new FixedLengthStringData(5500).isAPartOf(tpUserarea, 0, REDEFINE);
		/*
		 * NPS CICS COMMAREA FOR APS PROGRAMS * SYSTEM AREA = 120 * APPL COMMAREA = 2400* * TOTAL LENGTH = 2520* * TOTAL
		 * NPJ/NPS COMM-AREA = 5500 * MODIFICATION HISTORY * DATE CHANGED BY DESCRIPTION * 09/07/89 HANSON NG NEW FIELDS
		 * FOR SCT * 09/11/89 LANDOLT ATTACHED NPS (US) COMM-AREA * 10/09/89 HANSON NG ADD TIME & SERVICE LOCATION * -
		 * CA-LOGON-TIME * - CA-ITEM-SVCE-LOCN * 11/15/89 JOHN JEREB - CA-PREV-PGM-INDEX * 12/01/89 JOHN JEREB -
		 * CA-XE-SUP-GROUP * 03/28/90 ANDY SECORD ADDED CA-SO-NO * 03/29/90 SERGEI VARBANOV ADDED EXTRA 2000 BYTES *
		 * 07/23/92 BRECK KUHNKE ADDED CA-SPDE-SVC-UN-FL * 08/29/92 ALKA PATEL ADDED CA-BR-UN-NO * 08/27/02 IDA DOLINSKY
		 * ADDED CA-SVC-OGP-CD * LEVEL 03 07/02/93 ANNETTE STEPHENSON ADDED CA-SAVE-DATA-CNT * 09/22/93 SHEILA BRYANT
		 * ADDED CA-MENU-350-OPTION * 10/12/93 SHEILA BRYANT ADDED CA-BCH-NO (CA-SECTION8)* 09/29/94 SHEILA BRYANT ADDED
		 * CA-CUST-ALT-PHONE & * CA-CUST-CROSS-STREETS & * CA-CUST-APT-NO & * CA-CUST-ADDR-REC-TYPE TO * CA-SECTION9. 69
		 * BYTES TOTAL * FILLER WAS 700 BYTES NOW 630 * 04/28/94 B. ROBERTS ADDED CA-LAST-UNIT-NO * FIX NPS143
		 * PRODUCTION PROB. * 08/17/94 STEVEN GODEE ADDED POINTERS TO COMMON * STORAGE TABLES: CA-NPJ551-PTR* 11/29/94
		 * JOHN COLLINS ADDED CA-PRN-ID TO * CA-FILLER-SEC * 12/15/94 MOIRA CHASELEY ADDED CA-NPS020-OPTION * 01/10/95
		 * R. DYNAKO ADDED CA-AGR-ADJ-CNC-NO * 02/28/95 S. GODEE ADDED CA-MENU-285-OPTION * 04/28/95 M. YAU ADDED
		 * CA-TERMS-FLAG * 05/05/95 J. HUPPERT ADDED CA-CUST-SOURCE * 05/08/95 R. DYNAKO ADDED CA-RESTRICTED-ACCESS *
		 * 09/29/95 J. CORTEZ ADDED CA-CPU-AID-RTE-FL * CA-CPU-AID-RTE-PGM * 10/03/95 I. MARGULIS ADDED CA-SAVE-MU-NO *
		 * 06/20/96 J. CORTEZ ADDED CA-BUSINESS-CD * 07/03/96 M. WELTZER ADDED CA-HOMELIFE-UNIT * IN CA-FILLER-SEC *
		 * 07/30/96 M. SMITH ADDED CA-CUST-STREET-WOUT-APT* 11/05/96 M. YAU ADDED CA-WENT-TO-NPS471 * 01/07/97 J. CASEY
		 * ADDED CA-HOME-SERVICE-FL * 02/14/97 J. CASEY ADDED SECURITY-1-TO-7 * 10/08/97 J. VOGEL ADDED
		 * CA-FRH-RETURN-CODE, * CA-FRH-DIAG-CODE1, AND * VALUE '10' FOR CA-RETURN-CODE* 10/20/97 ALKA PATEL ADDED
		 * CA-MENU-602-OPTION * 10/30/97 ALKA PATEL ADDED CA-SYSID-604 * 04/22/99 T.R. GANESHA ADDED CA-INQUIRY-PA TO *
		 * CA-FILLER-SEC * 05/28/99 J. CASEY ADDED CA-SHOPBLOCK-FL * (REDEFINES CA-WENT-TO-NPS471* WHICH IS SOLELY USED
		 * BY * NPJ4701) * 07/13/99 A.PATEL/K.GILL 150 BYES FOR THIRD PARTY. * 12/21/99 M. HOWELL 30 BYES FOR TELESERV.
		 * * 02/25/99 P. NGUYEN ADDED CA-CRT-SO * 10/23/00 G. Hueneman ADDED CA-ath-py-dt. * 03/13/01 M.K.BALA ADDED
		 * THD-PTY-FLAG FOR GLBA * 06/02/01 J. JSARSFI ADDED 88 LEVEL FOR CA-BR-UN-NO* 01/31/02 C. TORRES ADDED GEOCODE,
		 * COUNTY CODE, * 7 JURISDICTION GLAGS, 3 TAX * FLAGS AND TAX RATE AT THE END * 08/27/02 I. DOLINSKY ADDED
		 * SERVICING ORGANIZATION * 10/02/02 I. DOLINSKY ADDED RACF-ID-ENTERED * 11/22/02 J. SMORYNSKI ADDED CA-OPTION2
		 * * 12/06/02 J. SMORYNSKI ADDED CA-ORI-CD * G. SAVAGE ADDED COMMENT FOR CA-CUST-IND * AND CA-CUST-TYPE. *
		 * 01/14/03 c. torres ADDED CA-CAP-NEEDED FOR DCL * 05/19/03 S. BROWN ADDED CA-EMP-SSN FOR IBO * 06/20/03 C.
		 * TORRES ADDED CA-FORCE-RSN FOR DCL * ADDED CA-NPS114-UN-NO for dcl * 02/12/04 i.Dolinsky Added
		 * ca-nps145-orig-sch-dt * for AE Growth project * 04/13/04 C. TORRES ADDED CA-BUS-ORG-CD * 11/02/04 C. TORRES
		 * ADDED CA-INQ-CMY-CD * 08/03/06 Kasinath Gupta Added Repair location unit no * as part of Call Code 97
		 * changes* 11/22/06 SURESH KAMARAJ ADDED CA-FST-AVL-DT AS PART * OF PROJECT JUMP * 12/26/07 VISWA C ADDED
		 * CA-PM-CHK-CD and adjust * the filler from 423 to 422 as* part of Call Close Project. * SYSTEM WORK AREA * -
		 * COMMON WORKFIELDS * . MENU FUNCTION * . RACF INFO *
		 */
		private FixedLengthStringData caSection1 = new FixedLengthStringData(130).isAPartOf(commArea, 0);
		private FixedLengthStringData caSection1Overlay = new FixedLengthStringData(130).isAPartOf(caSection1, 0,
		    REDEFINE);
		private FixedLengthStringData caTdScreenDate = new FixedLengthStringData(8).isAPartOf(caSection1Overlay, 86);
		/*
		 * ERROR MESSAGES * - ERROR MESSAGE NUMBER TO BE DISPLAYED ON SCREEN * SET IN EACH PROGRAM. * - ERROR MESSAGE TO
		 * CARRY FROM ONE SCREEN TO ANOTHER *
		 */
		private FixedLengthStringData caSection3 = new FixedLengthStringData(100).isAPartOf(commArea, 150);
		private FixedLengthStringData caSection3Overlay = new FixedLengthStringData(100).isAPartOf(caSection3, 0,
		    REDEFINE);
		private BinaryData caReturnCode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 0);
		/*
		 * 0 - SUCCESSFUL 2 - SQL ERROR 4 - CICS ABEND 6 - CICS ERROR 8 - PRINT PROBLEM 10 - FUNCTION ROUTER ERROR
		 * (DATASTREAM ERROR)
		 */
		private FixedLengthStringData caEibrcode = new FixedLengthStringData(6).isAPartOf(caSection3Overlay, 2);
		private BinaryData caSqlcode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 8);
		/* P R O G R A M W O R K A R E A * */
		private FixedLengthStringData caSection4 = new FixedLengthStringData(40).isAPartOf(commArea, 250);
		private FixedLengthStringData caSection4Overlay = new FixedLengthStringData(40).isAPartOf(caSection4, 0,
		    REDEFINE);
		private FixedLengthStringData caCurrPgmName = new FixedLengthStringData(8).isAPartOf(caSection4Overlay, 0);
		/*
		 * P R O G R A M C O N T R O L * . CONTAINS THE LOCATION IN THE STACK OF THE CURRENT TASK 1 PGM. . CHANGED BY
		 * EACH PROGRAM PRIOR TO TRANSFERING TO ANOTHER PROGRAM AND BY PF3 AND PF12 STUBS. . KEEP TRACK OF PROGRAMS UP
		 * TO 13 LEVELS. PGM-INDEX - CURRENT INDEX (MUST BE INCREMENTED BY 1 ON XCTL) STACK LEVEL - SET BY TASK 1 OF
		 * EACH PROGRAM. USED TO DETERMINE WHERE PROGRAM WILL RETURN TO FOR PF3 OR PF12 'X' EXIT POINT - 'R' RETURN
		 * POINT - BY-PASSED BY PF3 OPT-SEL - SELECTION ENTERED BY USER ON SCREEN. USED BETWEEN TRANSACTIONS FOR
		 * PROCESSING WHICH DEPENDS ON OPTION ENTERED ON PREVIOUS SCREEN PGM-NAME - PROGRAM NAME FOR PF3/PF12 TRANSFER
		 * CONTROL UPDATED IN TASK 2 OF EACH TRANSACTION.
		 */
		private FixedLengthStringData caSection5 = new FixedLengthStringData(260).isAPartOf(commArea, 290);
		private FixedLengthStringData caSection5Overlay = new FixedLengthStringData(260).isAPartOf(caSection5, 0,
		    REDEFINE);
		private BinaryData caCurrPgmIndex = new BinaryData(4, 0).isAPartOf(caSection5Overlay, 0);
		private FixedLengthStringData[] caPgmStack = FLSArrayPartOfStructure(13, 19, caSection5Overlay, 2);
		private FixedLengthStringData[] caPgmStackLevel = FLSDArrayPartOfArrayStructure(1, caPgmStack, 0);
		private FixedLengthStringData[] caPgmStackPgmName = FLSDArrayPartOfArrayStructure(8, caPgmStack, 3);
		/* P R O G R A M P A G I N G * */
		private FixedLengthStringData caSection6 = new FixedLengthStringData(30).isAPartOf(commArea, 550);
		private FixedLengthStringData caSection6Overlay = new FixedLengthStringData(30).isAPartOf(caSection6, 0,
		    REDEFINE);
		private BinaryData caCurrPageNo = new BinaryData(4, 0).isAPartOf(caSection6Overlay, 13);
		/*
		 * APPLICATION PROGRAM WORK AREA * NOTE - THIS IS A PUBLIC AREA. * ## ADDED 1000 EXTRA BYTES *
		 */
		private FixedLengthStringData caSection7 = new FixedLengthStringData(2000).isAPartOf(commArea, 580);
		private FixedLengthStringData caSection7Overlay1 = new FixedLengthStringData(2000).isAPartOf(caSection7, 0,
		    REDEFINE);
		private FixedLengthStringData caProgramWorkArea = new FixedLengthStringData(2000).isAPartOf(caSection7Overlay1,
		    0);
		/* PROGRAM SPECIFIC WORK/SCRATCH PAD AREA */
		private FixedLengthStringData caSection7Overlay3 = new FixedLengthStringData(2000).isAPartOf(caSection7, 0,
		    REDEFINE);
		private FixedLengthStringData caRemainig1 = new FixedLengthStringData(1000).isAPartOf(caSection7Overlay3, 1000);
		/*
		 * C U S T O M E R I N F O R M A T I O N * ## ADDED 500 BYTES TO THE FILLER *
		 */
		private FixedLengthStringData caSection9 = new FixedLengthStringData(650).isAPartOf(commArea, 2725);
		private FixedLengthStringData caSection9Overlay = new FixedLengthStringData(650).isAPartOf(caSection9, 0,
		    REDEFINE);
		/*
		 * '1' - MAIN CUSTOMER - WHICH WILL ALWAY BE THE CURRENT CUSTOMER WE ARE WORKING WITH. WILL ALWAYS BE WHERE
		 * CUSTOMER LEAD DATA IS READ FROM. '2' - NEW/MOVED/OCCUPANT CUSTOMER
		 */
		private FixedLengthStringData[] caCustInfo = FLSArrayPartOfStructure(2, 312, caSection9Overlay, 2);
		private FixedLengthStringData[] caCustInd = FLSDArrayPartOfArrayStructure(1, caCustInfo, 0);
		/*
		 * EXTRA FILLER PER NPJ REQUEST ##*** COMMUNICATION AREA - NPS SERVICE FOUNDATION *** ##** LENGTH OF
		 * COMMUNICATION AREA = 925 BYTES. ** ##* MISC INFORMATION *
		 */
		private FixedLengthStringData caMiscSec = new FixedLengthStringData(284).isAPartOf(commArea, 4075);
		private FixedLengthStringData caMiscSecOverlay = new FixedLengthStringData(284).isAPartOf(caMiscSec, 0,
		    REDEFINE);
		/* MENU OPTION ATTRIBUTE BYTE 1 */
		private FixedLengthStringData caMsg = new FixedLengthStringData(79).isAPartOf(caMiscSecOverlay, 2);
		/* MESSAGE LINE 2 */
		private FixedLengthStringData caUserid = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 160);
		/* INDUSTRY CODE */
		private FixedLengthStringData caSvcUnNo = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 227);
		/*
		 * SERVICE ORDER TYPE - OTC, QUICK, ONSITE, HI-TECH, & SRS
		 */
		private FixedLengthStringData caActionCd = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 273);
		private Validator caAdd = new Validator(caActionCd, "A");
		private Validator caInquiry = new Validator(caActionCd, "I");
		private Validator caUpdate = new Validator(caActionCd, "U");
		private Validator caDelete = new Validator(caActionCd, "D");
		private Validator caReinstate = new Validator(caActionCd, "R");
		/* ACTION CODE */
		private FixedLengthStringData caQueryNo = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 274);
		private Validator caNameEmpidSsnEntered = new Validator(caQueryNo, "1");
		private Validator caNameEmpidEntered = new Validator(caQueryNo, "2");
		private Validator caNameSsnEntered = new Validator(caQueryNo, "3");
		private Validator caEmpidSsnEntered = new Validator(caQueryNo, "4");
		private Validator caNameEntered = new Validator(caQueryNo, "5");
		private Validator caEmpidEntered = new Validator(caQueryNo, "6");
		private Validator caSsnEntered = new Validator(caQueryNo, "7");
		private Validator caViewEmployees = new Validator(caQueryNo, "8");
		private Validator caRacfIdEntered = new Validator(caQueryNo, "9");
		/* ##* ERROR MESSAGE * */
		private FixedLengthStringData caErrorSec = new FixedLengthStringData(79).isAPartOf(commArea, 4359);
		private FixedLengthStringData caErrorSecOverlay = new FixedLengthStringData(79).isAPartOf(caErrorSec, 0,
		    REDEFINE);
		private FixedLengthStringData caErrorMsg = new FixedLengthStringData(79).isAPartOf(caErrorSecOverlay, 0);
		private FixedLengthStringData caErrorKey = new FixedLengthStringData(4).isAPartOf(caErrorMsg, 0);
		/*
		 * HELP KEY FOR VSAM READING & UPDATES ##* NPS SYSTEM SECURITY LEVELS *
		 */
		private FixedLengthStringData caSecuritySec = new FixedLengthStringData(1).isAPartOf(commArea, 4515);
		private FixedLengthStringData caSecuritySecOverlay = new FixedLengthStringData(1).isAPartOf(caSecuritySec, 0,
		    REDEFINE);
		private FixedLengthStringData caSecurityLvl = new FixedLengthStringData(1).isAPartOf(caSecuritySecOverlay, 0);
		private Validator userFromUnit = new Validator(caSecurityLvl, "1", "2", "3");
		private Validator userFromUnit1 = new Validator(caSecurityLvl, "1");
		private Validator userFromUnit2 = new Validator(caSecurityLvl, "2");
		private Validator userFromUnit3 = new Validator(caSecurityLvl, "3");
		private Validator userFromRegion = new Validator(caSecurityLvl, "4", "5");
		private Validator userFromRegion1 = new Validator(caSecurityLvl, "4");
		private Validator userFromRegion2 = new Validator(caSecurityLvl, "5");
		private Validator userFromHq = new Validator(caSecurityLvl, "6");
		private Validator userFromSco = new Validator(caSecurityLvl, "7");
		private Validator security1To7 = new Validator(caSecurityLvl, new ValueRange("1", "7"));
		/* ##* SWITCHES AND FLAGS * */
		private FixedLengthStringData caSwFlagSec = new FixedLengthStringData(10).isAPartOf(commArea, 4547);
		private FixedLengthStringData caSwFlagOverlay = new FixedLengthStringData(10).isAPartOf(caSwFlagSec, 0,
		    REDEFINE);
		/* FLAGS */
		private FixedLengthStringData caWorkAreaPresentFlag = new FixedLengthStringData(1)
		    .isAPartOf(caSwFlagOverlay, 1);
		private Validator caWorkAreaInOtherTbl = new Validator(caWorkAreaPresentFlag, "Y");
		private FixedLengthStringData caErrorFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 2);
		private Validator outstandingError = new Validator(caErrorFlag, "Y");
		private FixedLengthStringData caEndOfDataFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 3);
		private Validator caEndOfData = new Validator(caEndOfDataFlag, "Y");
		private Validator endOfData = new Validator(caEndOfDataFlag, "Y");
		/* END-OF-DATA INDICATOR */
		private FixedLengthStringData caSaveFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 4);
		private Validator caSavedFromLastScreen = new Validator(caSaveFlag, "Y");
		/*
		 * ##* COMMUNICATION AREA FILLER * ##* ## ADDED 500 BYTES TO THE FILLER *
		 */
		private FixedLengthStringData caFillerSec = new FixedLengthStringData(943).isAPartOf(commArea, 4557);
		private FixedLengthStringData caFillerOverlay = new FixedLengthStringData(941).isAPartOf(caFillerSec, 0,
		    REDEFINE);
		private FixedLengthStringData caBrUnNo = new FixedLengthStringData(7).isAPartOf(caFillerOverlay, 12);
		private Validator validItronixUser = new Validator(caBrUnNo, "PD86   ");
		/* ADDED SPDE UNIT INDICATOR FLAG */
		private FixedLengthStringData caSpdeSvcUnFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 19);
		private Validator spdeUnit = new Validator(caSpdeSvcUnFl, "Y", "M");
		private Validator spdeMsgsWtg = new Validator(caSpdeSvcUnFl, "M");
		/* Used for EMP REF capture NPS100 */
		private FixedLengthStringData caThdPtyFlag = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 433);
		private Validator thdPty = new Validator(caThdPtyFlag, "Y", "F");
		private Validator notThdPty = new Validator(caThdPtyFlag, "N");
		/* ORIGINATION CODE */
		private FixedLengthStringData caCamsFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 474);
		private Validator camsParallel = new Validator(caCamsFl, "1");
		private Validator camsPilot = new Validator(caCamsFl, "2");
		private Validator nonCams = new Validator(caCamsFl, " ");
	}

	/*
	 * Class transformed from Data Structure TRC-CONVR-CONVERSATIONAL_INNER
	 */
	private static final class TrcConvrConversationalInner {

		/*
		 * UNUSED SPACE COPYRIGHT (C) 1993, 1995 TRANSCENTURY DATA SYSTEMS, SAN FRANCISCO CA TRANSCENTURY (TM) CALENDAR
		 * ROUTINES IS THE SUBJECT OF A PENDING UNITED STATES PATENT APPLICATION. ALL SOFTWARE FOR THE TRANSCENTURY (TM)
		 * CALENDAR ROUTINES PROGRAM IS PROTECTED BY THE COPYRIGHT LAWS OF THE UNITED STATES CUST-ID: SEA-110054 SEARS,
		 * ROEBUCK & COMPANY UNAUTHORIZED COPYING OF THIS DOCUMENT OR THE PROGRAM CONTAINED HEREIN, IN ORIGINAL OR
		 * MODIFIED FORM, IS A VIOLATION OF FEDERAL AND STATE LAW. TRCCONVR - CONVERSATIONAL AREA
		 */
		private FixedLengthStringData trcConvrConversational = new FixedLengthStringData(1000);
		private FixedLengthStringData trcConvrBusinessParameters = new FixedLengthStringData(89).isAPartOf(
		    trcConvrConversational, 0);
		private FixedLengthStringData trcConvrHolidayTbl = new FixedLengthStringData(2).isAPartOf(
		    trcConvrBusinessParameters, 0).init("01");
		private FixedLengthStringData trcConvrFiscyrStart = new FixedLengthStringData(2).isAPartOf(
		    trcConvrBusinessParameters, 2).init("01");
		private FixedLengthStringData trcConvrFiscmoStart = new FixedLengthStringData(2).isAPartOf(
		    trcConvrBusinessParameters, 4).init("01");
		private FixedLengthStringData trcConvrEndPntsDef = new FixedLengthStringData(1).isAPartOf(
		    trcConvrBusinessParameters, 6).init("T");
		private FixedLengthStringData trcConvrDowString = new FixedLengthStringData(7).isAPartOf(
		    trcConvrBusinessParameters, 7).init("0123456");
		private FixedLengthStringData trcConvrProcDayDef = new FixedLengthStringData(7).isAPartOf(
		    trcConvrBusinessParameters, 14).init("NEEEEEN");
		private FixedLengthStringData trcConvrCenturyBreak = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 21).init("19/20;40");
		private FixedLengthStringData trcConvrFromDateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 29).init("CCYYMMDD");
		private FixedLengthStringData trcConvrToDateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 37).init("CCYYMMDD");
		private FixedLengthStringData trcConvrOut1DateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 45).init("YYMMDD--");
		private FixedLengthStringData trcConvrOut2DateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 53).init("--YYMMDD");
		private FixedLengthStringData trcConvrOut3DateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 61).init("-CCYYDDD");
		private FixedLengthStringData filler = new FixedLengthStringData(20).isAPartOf(trcConvrBusinessParameters, 69,
		    FILLER).init(SPACES);
		private FixedLengthStringData trcConvrInputParameters = new FixedLengthStringData(56).isAPartOf(
		    trcConvrConversational, 89);
		private FixedLengthStringData trcConvrFunctionCode = new FixedLengthStringData(4).isAPartOf(
		    trcConvrInputParameters, 0);
		private FixedLengthStringData trcConvrFunctionType = new FixedLengthStringData(1).isAPartOf(
		    trcConvrFunctionCode, 0);
		private FixedLengthStringData trcConvrFunctionNumber = new FixedLengthStringData(3).isAPartOf(
		    trcConvrFunctionCode, 1);
		private FixedLengthStringData trcConvrFromDateX = new FixedLengthStringData(8).isAPartOf(
		    trcConvrInputParameters, 4);
		private ZonedDecimalData trcConvrFromDate9 = new ZonedDecimalData(8, 0).isAPartOf(trcConvrFromDateX, 0,
		    REDEFINE).setUnsigned();
		private FixedLengthStringData filler1 = new FixedLengthStringData(20).isAPartOf(trcConvrInputParameters, 36,
		    FILLER).init(SPACES);
		private FixedLengthStringData trcConvrOutputParameters = new FixedLengthStringData(144).isAPartOf(
		    trcConvrConversational, 145);
		private FixedLengthStringData trcConvrReturnCode = new FixedLengthStringData(83).isAPartOf(
		    trcConvrOutputParameters, 0);
		private ZonedDecimalData trcConvrReturnNum = new ZonedDecimalData(3, 0).isAPartOf(trcConvrReturnCode, 0)
		    .setUnsigned();
		private Validator trcConvrReturnGood = new Validator(trcConvrReturnNum, 0);
		private Validator trcConvrReturnBad = new Validator(trcConvrReturnNum, new ValueRange(001, 999));
		private FixedLengthStringData trcConvrStdoutDateX = new FixedLengthStringData(8).isAPartOf(
		    trcConvrOutputParameters, 83);
		private FixedLengthStringData filler2 = new FixedLengthStringData(20).isAPartOf(trcConvrOutputParameters, 124,
		    FILLER).init(SPACES);
		private FixedLengthStringData filler8 = new FixedLengthStringData(461).isAPartOf(trcConvrConversational, 539,
		    FILLER).init(SPACES);
	}

	/*
	 * Class transformed from Data Structure UPSMUIFL-REC_INNER
	 */
	private static final class UpsmuiflRecInner {

		/*
		 * NPS SERVICE FULFILLMENT DIRECTORY * MISCELLANEOUS UNIT INFORMATION * VSAM KEY LENGTH = 10 * TOTAL FILE LENGTH
		 * = 100 * REMARKS: * THESE ARE FREE FORM TEXT THAT DESCRIBES ANY TEMPORARY * CLOSURE OF A UNIT DUE TO FIRE,
		 * TORNADO, ETC. * THERE WILL BE A BATCH PURGE PROGRAM THAT WILL DELETE * REMARKS ONCE THE EXPIRATION DATE HAS
		 * PAST. * MARKETING ZONES: * THESE ARE FREE FORM TEXT THAT IDENTIFIES MARKETING * ZONING FOR PITCHING OF
		 * CERTAIN PRODUCTS SUCH AS SNOW * BLOWERS FOR THE AREAS THAT HAS SNOW, ETC. * UNIT TYPE INFORMATION: * THIS
		 * CONTAIN VALID UNIT TYPES AND DESCRIPTIONS. UNIT * TYPES DESCRIBES WHETHER IT IS A DISTRICT, BRANCH, ASA, *
		 * FRANCHISE, CHRIS, ETC. * TO ACCESS UNIT TYPE INFO: * UPSMUIFL-SVC-UN-NO = 'DEFAULT' * UPSMUIFL-REC-TYPE = 'U'
		 * * UPSMUIFL-SEQ-NO = THE NUMBER ASSOCIATED WITH * THE UNIT TYPE. THE HELP SCREEN* WILL CONTAIN THE NUMBER AND
		 * * UNIT TYPE ASSOCIATION. * MODIFICATION HISTORY * DATE CHANGED BY DESCRIPTION * 04/11/96 M. YAU INITIAL
		 * RELEASE *
		 */
		private FixedLengthStringData upsmuiflRec = new FixedLengthStringData(100);
		private FixedLengthStringData upsmuiflKey = new FixedLengthStringData(10).isAPartOf(upsmuiflRec, 0);
		private FixedLengthStringData upsmuiflSvcUnNo = new FixedLengthStringData(7).isAPartOf(upsmuiflKey, 0);
		private FixedLengthStringData upsmuiflRecType = new FixedLengthStringData(1).isAPartOf(upsmuiflKey, 7);
		private Validator upsmuiflRemarkRec = new Validator(upsmuiflRecType, "R");
		private Validator upsmuiflMkgZoneRec = new Validator(upsmuiflRecType, "M");
		private Validator upsmuiflUnitTypeRec = new Validator(upsmuiflRecType, "U");
		private ZonedDecimalData upsmuiflSeqNo = new ZonedDecimalData(2, 0).isAPartOf(upsmuiflKey, 8).setUnsigned();
		private FixedLengthStringData upsmuiflFields = new FixedLengthStringData(90).isAPartOf(upsmuiflRec, 10);
		private FixedLengthStringData upsmuiflRemarksLayout = new FixedLengthStringData(90).isAPartOf(upsmuiflFields,
		    0, REDEFINE);
		private FixedLengthStringData upsmuiflRemarks = new FixedLengthStringData(60).isAPartOf(upsmuiflRemarksLayout,
		    0);
		private FixedLengthStringData upsmuiflEffectDate = new FixedLengthStringData(10).isAPartOf(
		    upsmuiflRemarksLayout, 60);
		private FixedLengthStringData upsmuiflExpireDate = new FixedLengthStringData(10).isAPartOf(
		    upsmuiflRemarksLayout, 70);
		private FixedLengthStringData upsmuiflMkgLayout = new FixedLengthStringData(90).isAPartOf(upsmuiflFields, 0,
		    REDEFINE);
		private FixedLengthStringData upsmuiflMkgZone1 = new FixedLengthStringData(5).isAPartOf(upsmuiflMkgLayout, 0);
		private FixedLengthStringData upsmuiflMkgZone2 = new FixedLengthStringData(5).isAPartOf(upsmuiflMkgLayout, 5);
		private FixedLengthStringData upsmuiflMkgZone3 = new FixedLengthStringData(5).isAPartOf(upsmuiflMkgLayout, 10);
		private FixedLengthStringData upsmuiflMkgZone4 = new FixedLengthStringData(5).isAPartOf(upsmuiflMkgLayout, 15);
		private FixedLengthStringData upsmuiflMkgZone5 = new FixedLengthStringData(5).isAPartOf(upsmuiflMkgLayout, 20);
	}

	/*
	 * Class transformed from Data Structure PSXTUPIN-TBL_INNER
	 */
	private static final class PsxtupinTblInner {

		/* PSXTUPIN-TBL */
		private FixedLengthStringData psxtupinIns = new FixedLengthStringData(430);
		private FixedLengthStringData filler = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 0, FILLER).init(
		    "SO1Sears Onsite Printer                    ");
		private FixedLengthStringData filler1 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 43, FILLER).init(
		    "AO1A&E Onsite Printer                      ");
		private FixedLengthStringData filler2 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 86, FILLER).init(
		    "SS1Sears Inshop Printer                    ");
		private FixedLengthStringData filler3 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 129, FILLER).init(
		    "AS1A&E Inshop Printer                      ");
		private FixedLengthStringData filler4 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 172, FILLER).init(
		    "SS2Sears Inshop Printer 2                  ");
		private FixedLengthStringData filler5 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 215, FILLER).init(
		    "SS3Sears Inshop Printer 3                  ");
		private FixedLengthStringData filler6 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 258, FILLER).init(
		    "SS4Sears Inshop Printer 4                  ");
		private FixedLengthStringData filler7 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 301, FILLER).init(
		    "AS2A&E Inshop Printer 2                    ");
		private FixedLengthStringData filler8 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 344, FILLER).init(
		    "AS3A&E Inshop Printer 3                    ");
		private FixedLengthStringData filler9 = new FixedLengthStringData(43).isAPartOf(psxtupinIns, 387, FILLER).init(
		    "SR1Sears Report Printer                    ");

		private FixedLengthStringData psxtupinWsTbl = new FixedLengthStringData(430)
		    .isAPartOf(psxtupinIns, 0, REDEFINE);
		private FixedLengthStringData[] psxtupinWsTbl1 = FLSArrayPartOfStructure(10, 43, psxtupinWsTbl, 0);
		private FixedLengthStringData[] wsBusOrgCd = FLSDArrayPartOfArrayStructure(1, psxtupinWsTbl1, 0);
		private FixedLengthStringData[] wsPrnPusCd = FLSDArrayPartOfArrayStructure(1, psxtupinWsTbl1, 1);
		private FixedLengthStringData[] wsPrnSeqNo = FLSDArrayPartOfArrayStructure(1, psxtupinWsTbl1, 2);
		private ZonedDecimalData[] wsPrnSeqNoN = ZDArrayPartOfArrayStructure(1, 0, wsPrnSeqNo, 0, REDEFINE,
		    UNSIGNED_TRUE);
		private FixedLengthStringData[] wsPrnDs = FLSDArrayPartOfArrayStructure(40, psxtupinWsTbl1, 3);
		private BinaryData psxtupinSub = new BinaryData(4, 0);
		private BinaryData psxtupinEntryQt = new BinaryData(4, 0).init(10);
	}

	/*
	 * Class transformed from Data Structure NPS221-WORK-FIELDS_INNER
	 */
	private static final class Nps221WorkFieldsInner {

		/* NPS221-WORK-FIELDS */
		private FixedLengthStringData wsPgmLevel = new FixedLengthStringData(2).init("10");

		/* VS-10 */
		private FixedLengthStringData wsXctlPgm = new FixedLengthStringData(8);
		private FixedLengthStringData wsXctlSysId = new FixedLengthStringData(3).isAPartOf(wsXctlPgm, 0);
		private FixedLengthStringData wsMessageKey = new FixedLengthStringData(4).init(SPACES);

		private FixedLengthStringData wsNps221VsamMsg = new FixedLengthStringData(96);
		private FixedLengthStringData csmtMsgPgrmid = new FixedLengthStringData(20).isAPartOf(wsNps221VsamMsg, 0).init(
		    "NPS221 E 0500 >>> ");
		private FixedLengthStringData csmtVsamName = new FixedLengthStringData(15).isAPartOf(wsNps221VsamMsg, 20);
		private FixedLengthStringData csmtVsamInfo = new FixedLengthStringData(28).isAPartOf(wsNps221VsamMsg, 35);
		private FixedLengthStringData eibrcodeText = new FixedLengthStringData(11).isAPartOf(wsNps221VsamMsg, 63).init(
		    "EIBRCODE = ");
		private FixedLengthStringData csmtEibrcode = new FixedLengthStringData(7).isAPartOf(wsNps221VsamMsg, 74);
		private FixedLengthStringData eibfnText = new FixedLengthStringData(8).isAPartOf(wsNps221VsamMsg, 81).init(
		    "EIBFN = ");
		private FixedLengthStringData csmtEibfn = new FixedLengthStringData(7).isAPartOf(wsNps221VsamMsg, 89);
		private FixedLengthStringData wsSchdType = new FixedLengthStringData(2);
		private ZonedDecimalData wsSub = new ZonedDecimalData(1, 0).setUnsigned();
		private FixedLengthStringData wsSubR = new FixedLengthStringData(1).isAPartOf(wsSub, 0, REDEFINE);

		private FixedLengthStringData wsDaysLabel = new FixedLengthStringData(21);
		private FixedLengthStringData wsSun = new FixedLengthStringData(3).isAPartOf(wsDaysLabel, 0).init("Sun");
		private FixedLengthStringData wsMon = new FixedLengthStringData(3).isAPartOf(wsDaysLabel, 3).init("Mon");
		private FixedLengthStringData wsTue = new FixedLengthStringData(3).isAPartOf(wsDaysLabel, 6).init("Tue");
		private FixedLengthStringData wsWed = new FixedLengthStringData(3).isAPartOf(wsDaysLabel, 9).init("Wed");
		private FixedLengthStringData wsThu = new FixedLengthStringData(3).isAPartOf(wsDaysLabel, 12).init("Thu");
		private FixedLengthStringData wsFri = new FixedLengthStringData(3).isAPartOf(wsDaysLabel, 15).init("Fri");
		private FixedLengthStringData wsSat = new FixedLengthStringData(3).isAPartOf(wsDaysLabel, 18).init("Sat");

		private FixedLengthStringData wsDaysNames = new FixedLengthStringData(21).isAPartOf(wsDaysLabel, 0, REDEFINE);
		private FixedLengthStringData[] wsDaysRow = FLSArrayPartOfStructure(7, 3, wsDaysNames, 0);
		private FixedLengthStringData wsOperateDays = new FixedLengthStringData(7);

		private FixedLengthStringData wsOperateDaysR = new FixedLengthStringData(7).isAPartOf(wsOperateDays, 0,
		    REDEFINE);
		private FixedLengthStringData[] wsDays = FLSArrayPartOfStructure(7, 1, wsOperateDaysR, 0);
		private ZonedDecimalData wsOprToTime = new ZonedDecimalData(4, 0).setUnsigned();

		private FixedLengthStringData wsOprToTimeR = new FixedLengthStringData(4).isAPartOf(wsOprToTime, 0, REDEFINE);
		private ZonedDecimalData wsOprToHh = new ZonedDecimalData(2, 0).isAPartOf(wsOprToTimeR, 0).setUnsigned();
		private ZonedDecimalData wsOprToMm = new ZonedDecimalData(2, 0).isAPartOf(wsOprToTimeR, 2).setUnsigned();
		private ZonedDecimalData wsOprFrTime = new ZonedDecimalData(4, 0).setUnsigned();

		private FixedLengthStringData wsOprFrTimeR = new FixedLengthStringData(4).isAPartOf(wsOprFrTime, 0, REDEFINE);
		private ZonedDecimalData wsOprFrHh = new ZonedDecimalData(2, 0).isAPartOf(wsOprFrTimeR, 0).setUnsigned();
		private ZonedDecimalData wsOprFrMm = new ZonedDecimalData(2, 0).isAPartOf(wsOprFrTimeR, 2).setUnsigned();

		private FixedLengthStringData wsShopSiteTimes = new FixedLengthStringData(140);
		private FixedLengthStringData[] wsOsIsTimes = FLSArrayPartOfStructure(7, 20, wsShopSiteTimes, 0);
		private FixedLengthStringData[] wsShopFrTime = FLSDArrayPartOfArrayStructure(4, wsOsIsTimes, 4);
		private ZonedDecimalData[] wsShopFrHh = ZDArrayPartOfArrayStructure(2, 0, wsShopFrTime, 0, UNSIGNED_TRUE);
		private ZonedDecimalData[] wsShopFrMm = ZDArrayPartOfArrayStructure(2, 0, wsShopFrTime, 2, UNSIGNED_TRUE);
		private FixedLengthStringData[] wsShopFrTimeA = FLSDArrayPartOfArrayStructure(4, wsShopFrTime, 0, REDEFINE);
		private FixedLengthStringData[] wsShopFrHhA = FLSDArrayPartOfArrayStructure(2, wsShopFrTimeA, 0);
		private FixedLengthStringData[] wsShopFrMmA = FLSDArrayPartOfArrayStructure(2, wsShopFrTimeA, 2);
		private FixedLengthStringData[] wsShopToTime = FLSDArrayPartOfArrayStructure(4, wsOsIsTimes, 8);
		private ZonedDecimalData[] wsShopToHh = ZDArrayPartOfArrayStructure(2, 0, wsShopToTime, 0, UNSIGNED_TRUE);
		private ZonedDecimalData[] wsShopToMm = ZDArrayPartOfArrayStructure(2, 0, wsShopToTime, 2, UNSIGNED_TRUE);
		private FixedLengthStringData[] wsShopToTimeA = FLSDArrayPartOfArrayStructure(4, wsShopToTime, 0, REDEFINE);
		private FixedLengthStringData[] wsShopToHhA = FLSDArrayPartOfArrayStructure(2, wsShopToTimeA, 0);
		private FixedLengthStringData[] wsShopToMmA = FLSDArrayPartOfArrayStructure(2, wsShopToTimeA, 2);
		private FixedLengthStringData[] wsSiteFrTime = FLSDArrayPartOfArrayStructure(4, wsOsIsTimes, 12);
		private ZonedDecimalData[] wsSiteFrHh = ZDArrayPartOfArrayStructure(2, 0, wsSiteFrTime, 0, UNSIGNED_TRUE);
		private ZonedDecimalData[] wsSiteFrMm = ZDArrayPartOfArrayStructure(2, 0, wsSiteFrTime, 2, UNSIGNED_TRUE);
		private FixedLengthStringData[] wsSiteFrTimeA = FLSDArrayPartOfArrayStructure(4, wsSiteFrTime, 0, REDEFINE);
		private FixedLengthStringData[] wsSiteFrHhA = FLSDArrayPartOfArrayStructure(2, wsSiteFrTimeA, 0);
		private FixedLengthStringData[] wsSiteFrMmA = FLSDArrayPartOfArrayStructure(2, wsSiteFrTimeA, 2);
		private FixedLengthStringData[] wsSiteToTime = FLSDArrayPartOfArrayStructure(4, wsOsIsTimes, 16);
		private ZonedDecimalData[] wsSiteToHh = ZDArrayPartOfArrayStructure(2, 0, wsSiteToTime, 0, UNSIGNED_TRUE);
		private ZonedDecimalData[] wsSiteToMm = ZDArrayPartOfArrayStructure(2, 0, wsSiteToTime, 2, UNSIGNED_TRUE);
		private FixedLengthStringData[] wsSiteToTimeA = FLSDArrayPartOfArrayStructure(4, wsSiteToTime, 0, REDEFINE);
		private FixedLengthStringData[] wsSiteToHhA = FLSDArrayPartOfArrayStructure(2, wsSiteToTimeA, 0);
		private FixedLengthStringData[] wsSiteToMmA = FLSDArrayPartOfArrayStructure(2, wsSiteToTimeA, 2);
		private FixedLengthStringData wsCustSvcPhn = new FixedLengthStringData(10);

		private FixedLengthStringData wsCustSvcPhnR = new FixedLengthStringData(10)
		    .isAPartOf(wsCustSvcPhn, 0, REDEFINE);
		private FixedLengthStringData wsCustSvcTelAc = new FixedLengthStringData(3).isAPartOf(wsCustSvcPhnR, 0);
		private FixedLengthStringData wsCustSvcTel3 = new FixedLengthStringData(3).isAPartOf(wsCustSvcPhnR, 3);
		private FixedLengthStringData wsCustSvcTel4 = new FixedLengthStringData(4).isAPartOf(wsCustSvcPhnR, 6);
		private FixedLengthStringData wsRemarks1 = new FixedLengthStringData(60);
		private FixedLengthStringData wsRemarks2 = new FixedLengthStringData(60);

		private FixedLengthStringData wsRemarks1ChangedFl = new FixedLengthStringData(1).init("N");
		private Validator wsRemarks1Changed = new Validator(wsRemarks1ChangedFl, "Y");

		private FixedLengthStringData wsRemarks2ChangedFl = new FixedLengthStringData(1).init("N");
		private Validator wsRemarks2Changed = new Validator(wsRemarks2ChangedFl, "Y");

		private FixedLengthStringData wsEffDate = new FixedLengthStringData(10);
		private FixedLengthStringData wsEffYear = new FixedLengthStringData(4).isAPartOf(wsEffDate, 0);
		private ZonedDecimalData wsEffDateCc = new ZonedDecimalData(2, 0).isAPartOf(wsEffYear, 0).setUnsigned();
		private ZonedDecimalData wsEffDateYy = new ZonedDecimalData(2, 0).isAPartOf(wsEffYear, 2).setUnsigned();
		private FixedLengthStringData filler1 = new FixedLengthStringData(1).isAPartOf(wsEffDate, 4, FILLER).init("-");
		private ZonedDecimalData wsEffDateMm = new ZonedDecimalData(2, 0).isAPartOf(wsEffDate, 5).setUnsigned();
		private FixedLengthStringData filler2 = new FixedLengthStringData(1).isAPartOf(wsEffDate, 7, FILLER).init("-");
		private ZonedDecimalData wsEffDateDd = new ZonedDecimalData(2, 0).isAPartOf(wsEffDate, 8).setUnsigned();

		private FixedLengthStringData wsExpDate = new FixedLengthStringData(10);
		private FixedLengthStringData wsExpYear = new FixedLengthStringData(4).isAPartOf(wsExpDate, 0);
		private ZonedDecimalData wsExpDateCc = new ZonedDecimalData(2, 0).isAPartOf(wsExpYear, 0).setUnsigned();
		private ZonedDecimalData wsExpDateYy = new ZonedDecimalData(2, 0).isAPartOf(wsExpYear, 2).setUnsigned();
		private FixedLengthStringData filler3 = new FixedLengthStringData(1).isAPartOf(wsExpDate, 4, FILLER).init("-");
		private ZonedDecimalData wsExpDateMm = new ZonedDecimalData(2, 0).isAPartOf(wsExpDate, 5).setUnsigned();
		private FixedLengthStringData filler4 = new FixedLengthStringData(1).isAPartOf(wsExpDate, 7, FILLER).init("-");
		private ZonedDecimalData wsExpDateDd = new ZonedDecimalData(2, 0).isAPartOf(wsExpDate, 8).setUnsigned();

		private FixedLengthStringData wsDb2Date = new FixedLengthStringData(10);
		private FixedLengthStringData wsDb2Year = new FixedLengthStringData(4).isAPartOf(wsDb2Date, 0);
		private ZonedDecimalData wsDb2DateCc = new ZonedDecimalData(2, 0).isAPartOf(wsDb2Year, 0).setUnsigned();
		private ZonedDecimalData wsDb2DateYy = new ZonedDecimalData(2, 0).isAPartOf(wsDb2Year, 2).setUnsigned();
		private FixedLengthStringData filler5 = new FixedLengthStringData(1).isAPartOf(wsDb2Date, 4, FILLER).init("-");
		private ZonedDecimalData wsDb2DateMm = new ZonedDecimalData(2, 0).isAPartOf(wsDb2Date, 5).setUnsigned();
		private FixedLengthStringData filler6 = new FixedLengthStringData(1).isAPartOf(wsDb2Date, 7, FILLER).init("-");
		private ZonedDecimalData wsDb2DateDd = new ZonedDecimalData(2, 0).isAPartOf(wsDb2Date, 8).setUnsigned();

		private FixedLengthStringData trcDate = new FixedLengthStringData(8);
		private FixedLengthStringData trcYear = new FixedLengthStringData(4).isAPartOf(trcDate, 0);
		private ZonedDecimalData trcCc = new ZonedDecimalData(2, 0).isAPartOf(trcYear, 0).setUnsigned();
		private ZonedDecimalData trcYy = new ZonedDecimalData(2, 0).isAPartOf(trcYear, 2).setUnsigned();
		private ZonedDecimalData trcMm = new ZonedDecimalData(2, 0).isAPartOf(trcDate, 4).setUnsigned();
		private ZonedDecimalData trcDd = new ZonedDecimalData(2, 0).isAPartOf(trcDate, 6).setUnsigned();

		private FixedLengthStringData wsTempDate = new FixedLengthStringData(8);
		private ZonedDecimalData wsTempDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 0).setUnsigned();
		private ZonedDecimalData wsTempDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 2).setUnsigned();
		private ZonedDecimalData wsTempDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 4).setUnsigned();
		private ZonedDecimalData wsTempDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 6).setUnsigned();

		private FixedLengthStringData wsTodaysDate = new FixedLengthStringData(10);
		private ZonedDecimalData wsTodaysDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 0).setUnsigned();
		private ZonedDecimalData wsTodaysDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 2).setUnsigned();
		private FixedLengthStringData filler7 = new FixedLengthStringData(1).isAPartOf(wsTodaysDate, 4, FILLER).init(
		    "-");
		private ZonedDecimalData wsTodaysDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 5).setUnsigned();
		private FixedLengthStringData filler8 = new FixedLengthStringData(1).isAPartOf(wsTodaysDate, 7, FILLER).init(
		    "-");
		private ZonedDecimalData wsTodaysDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 8).setUnsigned();
		private FixedLengthStringData remarks1Flg = new FixedLengthStringData(1);
		private FixedLengthStringData remarks2Flg = new FixedLengthStringData(1);
		private FixedLengthStringData mrktZoneFlg = new FixedLengthStringData(1);
		private FixedLengthStringData wsMrktZone1 = new FixedLengthStringData(5);
		private FixedLengthStringData wsMrktZone2 = new FixedLengthStringData(5);
		private FixedLengthStringData wsMrktZone3 = new FixedLengthStringData(5);
		private FixedLengthStringData wsMrktZone4 = new FixedLengthStringData(5);
		private FixedLengthStringData wsMrktZone5 = new FixedLengthStringData(5);
		private ZonedDecimalData wsPrtMku = new ZonedDecimalData(7, 0).setUnsigned();
		/* ##TSA-01-S */
		private ZonedDecimalData wsInhomeMku = new ZonedDecimalData(7, 0).setUnsigned();
		private ZonedDecimalData wsShopMku = new ZonedDecimalData(7, 0).setUnsigned();
		/*
		 * ##TSA-01-E ##TSA-02-S
		 */
		private FixedLengthStringData wsUnNmChangedFl = new FixedLengthStringData(1);

		/* ##LH-06 */
		private FixedLengthStringData wsConvertedToCamsFl = new FixedLengthStringData(1);
		private Validator convertedToCams = new Validator(wsConvertedToCamsFl, "Y");
		private Validator notConvertedToCams = new Validator(wsConvertedToCamsFl, "N");
		private FixedLengthStringData wsTimestamp = new FixedLengthStringData(26);
		/* ##TSA-02-E */
		private ZonedDecimalData wsScheduleNum = new ZonedDecimalData(2, 0).setUnsigned();
		private FixedLengthStringData wsScheduleNo = new FixedLengthStringData(2);
		private ZonedDecimalData wsAbendCicsNum = new ZonedDecimalData(4, 0).setUnsigned();
		private ZonedDecimalData wsAbendCicsCode = new ZonedDecimalData(8, 0).setPattern("--------9");
		private FixedLengthStringData wsUpsmuiflFields = new FixedLengthStringData(90);

		private FixedLengthStringData wsUpsmuiflRemarksLayout = new FixedLengthStringData(90).isAPartOf(
		    wsUpsmuiflFields, 0, REDEFINE);
		private FixedLengthStringData wsUpsmuiflRemarks = new FixedLengthStringData(60).isAPartOf(
		    wsUpsmuiflRemarksLayout, 0);
		private FixedLengthStringData wsUpsmuiflEffectDate = new FixedLengthStringData(10).isAPartOf(
		    wsUpsmuiflRemarksLayout, 60);
		private FixedLengthStringData wsUpsmuiflExpireDate = new FixedLengthStringData(10).isAPartOf(
		    wsUpsmuiflRemarksLayout, 70);

		private FixedLengthStringData wsUpsmuiflMkgLayout = new FixedLengthStringData(90).isAPartOf(wsUpsmuiflFields,
		    0, REDEFINE);
		private FixedLengthStringData wsUpsmuiflMkgZone1 = new FixedLengthStringData(5).isAPartOf(wsUpsmuiflMkgLayout,
		    0);
		private FixedLengthStringData wsUpsmuiflMkgZone2 = new FixedLengthStringData(5).isAPartOf(wsUpsmuiflMkgLayout,
		    5);
		private FixedLengthStringData wsUpsmuiflMkgZone3 = new FixedLengthStringData(5).isAPartOf(wsUpsmuiflMkgLayout,
		    10);
		private FixedLengthStringData wsUpsmuiflMkgZone4 = new FixedLengthStringData(5).isAPartOf(wsUpsmuiflMkgLayout,
		    15);
		private FixedLengthStringData wsUpsmuiflMkgZone5 = new FixedLengthStringData(5).isAPartOf(wsUpsmuiflMkgLayout,
		    20);
		private FixedLengthStringData wsPrnInd = new FixedLengthStringData(1);
		private ZonedDecimalData wsSubCmy = new ZonedDecimalData(2, 0).setUnsigned();
		private FixedLengthStringData wsChar = new FixedLengthStringData(1);

		private FixedLengthStringData wsMessageList = new FixedLengthStringData(16);
		private FixedLengthStringData[] wsMsgCmyLst = FLSArrayPartOfStructure(16, 1, wsMessageList, 0);
	}

	/*
	 * Class transformed from Data Structure PA-FIELDS_INNER
	 */
	private static final class PaFieldsInner {

		private FixedLengthStringData paFields = new FixedLengthStringData(328);
		private FixedLengthStringData unitFl = new FixedLengthStringData(1).isAPartOf(paFields, 0);
		private Validator newUnit = new Validator(unitFl, "N");
		private Validator oldUnit = new Validator(unitFl, "O");
		private FixedLengthStringData paSuNo = new FixedLengthStringData(7).isAPartOf(paFields, 1);
		private FixedLengthStringData paSuName = new FixedLengthStringData(27).isAPartOf(paFields, 8);
		private FixedLengthStringData paAddrLine1 = new FixedLengthStringData(30).isAPartOf(paFields, 35);
		private FixedLengthStringData paAddrLine2 = new FixedLengthStringData(30).isAPartOf(paFields, 65);
		private FixedLengthStringData paCity = new FixedLengthStringData(20).isAPartOf(paFields, 95);
		private FixedLengthStringData paState = new FixedLengthStringData(2).isAPartOf(paFields, 115);
		private FixedLengthStringData paZip5 = new FixedLengthStringData(5).isAPartOf(paFields, 117);
		private FixedLengthStringData paZip4 = new FixedLengthStringData(4).isAPartOf(paFields, 122);
		private FixedLengthStringData paUnitType = new FixedLengthStringData(3).isAPartOf(paFields, 126);
		private FixedLengthStringData paUnitDesc = new FixedLengthStringData(60).isAPartOf(paFields, 129);
		private FixedLengthStringData paRegionNo = new FixedLengthStringData(7).isAPartOf(paFields, 189);
		private FixedLengthStringData paCentralNo = new FixedLengthStringData(7).isAPartOf(paFields, 196);
		private FixedLengthStringData paHostNo = new FixedLengthStringData(7).isAPartOf(paFields, 203);
		private FixedLengthStringData paSvcPvdFl = new FixedLengthStringData(1).isAPartOf(paFields, 210);
		private FixedLengthStringData paMktAtvFl = new FixedLengthStringData(1).isAPartOf(paFields, 211);
		private FixedLengthStringData paUnitConverted = new FixedLengthStringData(1).isAPartOf(paFields, 212);
		private FixedLengthStringData paPrtInvCryFl = new FixedLengthStringData(1).isAPartOf(paFields, 213);
		/* ##JA-03S */
		private FixedLengthStringData paCrtDrcOrdFl = new FixedLengthStringData(1).isAPartOf(paFields, 214);
		/* ##JA-03E */
		private FixedLengthStringData paUnOpnDt = new FixedLengthStringData(8).isAPartOf(paFields, 215);
		private FixedLengthStringData paUnOpnDtMm = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 0);
		private FixedLengthStringData paUnOpnDtDd = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 2);
		private FixedLengthStringData paUnOpnDtCc = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 4);
		private FixedLengthStringData paUnOpnDtYy = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 6);
		private FixedLengthStringData paSvcUnCloDt = new FixedLengthStringData(8).isAPartOf(paFields, 223);
		private FixedLengthStringData paSvcUnCloDtMm = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 0);
		private FixedLengthStringData paSvcUnCloDtDd = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 2);
		private FixedLengthStringData paSvcUnCloDtCc = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 4);
		private FixedLengthStringData paSvcUnCloDtYy = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 6);
		private FixedLengthStringData paPosStaDt = new FixedLengthStringData(8).isAPartOf(paFields, 231);
		private FixedLengthStringData paPosStaDtMm = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 0);
		private FixedLengthStringData paPosStaDtDd = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 2);
		private FixedLengthStringData paPosStaDtCc = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 4);
		private FixedLengthStringData paPosStaDtYy = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 6);
		private FixedLengthStringData paPosUnNo = new FixedLengthStringData(7).isAPartOf(paFields, 239);
		private FixedLengthStringData paRfsAcctNo = new FixedLengthStringData(7).isAPartOf(paFields, 246);
		/* KG-09 */
		private FixedLengthStringData paCnvSpdeDt = new FixedLengthStringData(8).isAPartOf(paFields, 253);
		private FixedLengthStringData paCnvSpdeDtMm = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 0);
		private FixedLengthStringData paCnvSpdeDtDd = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 2);
		private FixedLengthStringData paCnvSpdeDtCc = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 4);
		private FixedLengthStringData paCnvSpdeDtYy = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 6);
		private FixedLengthStringData paCnvNpnDt = new FixedLengthStringData(8).isAPartOf(paFields, 261);
		private FixedLengthStringData paCnvNpnDtMm = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 0);
		private FixedLengthStringData paCnvNpnDtDd = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 2);
		private FixedLengthStringData paCnvNpnDtCc = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 4);
		private FixedLengthStringData paCnvNpnDtYy = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 6);
		private FixedLengthStringData paCnvCarsDt = new FixedLengthStringData(8).isAPartOf(paFields, 269);
		private FixedLengthStringData paCnvCarsDtMm = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 0);
		private FixedLengthStringData paCnvCarsDtDd = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 2);
		private FixedLengthStringData paCnvCarsDtCc = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 4);
		private FixedLengthStringData paCnvCarsDtYy = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 6);
		private FixedLengthStringData paStateRegNo = new FixedLengthStringData(12).isAPartOf(paFields, 277);
		private FixedLengthStringData paFgnStrPrtMku = new FixedLengthStringData(2).isAPartOf(paFields, 289);
		/* ##TSA-01-S */
		private FixedLengthStringData paInhomePrtMku = new FixedLengthStringData(2).isAPartOf(paFields, 291);
		private FixedLengthStringData paShopPrtMku = new FixedLengthStringData(2).isAPartOf(paFields, 293);
		/* ##TSA-01-E */
		private FixedLengthStringData paShipDest = new FixedLengthStringData(1).isAPartOf(paFields, 295);
		/* ##GS-08S */
		private FixedLengthStringData paInqCmyCd = new FixedLengthStringData(1).isAPartOf(paFields, 296);
		private FixedLengthStringData paRteUnNo = new FixedLengthStringData(7).isAPartOf(paFields, 297);
		private FixedLengthStringData paMsgCmyLst = new FixedLengthStringData(16).isAPartOf(paFields, 304);
		/*
		 * ##GS-08E ##JA-03S
		 */
		private FixedLengthStringData paAcsDckUnNo = new FixedLengthStringData(7).isAPartOf(paFields, 320);
		/*
		 * ##JA-03E ##BM-05S
		 */
		private FixedLengthStringData paCpuAidRte = new FixedLengthStringData(1).isAPartOf(paFields, 327);
	}

	/*
	 * Class transformed from Data Structure HA-CSMT-MSG_INNER
	 */
	private static final class HaCsmtMsgInner {

		private FixedLengthStringData haCsmtMsg = new FixedLengthStringData(99);
		private FixedLengthStringData haMsgPgm = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(haCsmtMsg, 6, FILLER)
		    .init(SPACES);
		private FixedLengthStringData filler1 = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 7, FILLER).init(
		    "E 0500");
		private FixedLengthStringData filler2 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 13, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler3 = new FixedLengthStringData(19).isAPartOf(haCsmtMsg, 15, FILLER).init(
		    "** PROGRAM ABEND **");
		private FixedLengthStringData filler4 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 34, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler5 = new FixedLengthStringData(13).isAPartOf(haCsmtMsg, 36, FILLER).init(
		    "ABEND CODE = ");
		private FixedLengthStringData haMsgAbendCode = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 49);
		private FixedLengthStringData filler6 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 53, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler7 = new FixedLengthStringData(7).isAPartOf(haCsmtMsg, 55, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData haMsgTermid = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 62);
		private FixedLengthStringData filler8 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 66, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler9 = new FixedLengthStringData(5).isAPartOf(haCsmtMsg, 68, FILLER).init(
		    "TIME=");
		private FixedLengthStringData haMsgTime = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 73);
		private FixedLengthStringData filler10 = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 81, FILLER).init(
		    " USERID=");
		private FixedLengthStringData haMsgUserid = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 89);
		private FixedLengthStringData filler11 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 97, FILLER).init(
		    SPACES);
	}

	/*
	 * Class transformed from Data Structure CL-CSMT-MSG1_INNER
	 */
	private static final class ClCsmtMsg1Inner {

		private FixedLengthStringData clCsmtMsg1 = new FixedLengthStringData(129);
		private FixedLengthStringData clPgmId1 = new FixedLengthStringData(6).isAPartOf(clCsmtMsg1, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 6, FILLER)
		    .init(" E ");
		private FixedLengthStringData filler1 = new FixedLengthStringData(5).isAPartOf(clCsmtMsg1, 9, FILLER).init(
		    "0500 ");
		private FixedLengthStringData clErrortype = new FixedLengthStringData(18).isAPartOf(clCsmtMsg1, 14);
		private FixedLengthStringData filler2 = new FixedLengthStringData(9).isAPartOf(clCsmtMsg1, 32, FILLER).init(
		    "EIBRCODE=");
		private FixedLengthStringData clEibrcode = new FixedLengthStringData(6).isAPartOf(clCsmtMsg1, 41);
		private FixedLengthStringData filler3 = new FixedLengthStringData(1).isAPartOf(clCsmtMsg1, 47, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler4 = new FixedLengthStringData(7).isAPartOf(clCsmtMsg1, 48, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData clTermid = new FixedLengthStringData(4).isAPartOf(clCsmtMsg1, 55);
		private FixedLengthStringData filler5 = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 59, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler6 = new FixedLengthStringData(5).isAPartOf(clCsmtMsg1, 62, FILLER).init(
		    "TIME=");
		private FixedLengthStringData clTime = new FixedLengthStringData(8).isAPartOf(clCsmtMsg1, 67);
		private FixedLengthStringData filler7 = new FixedLengthStringData(10).isAPartOf(clCsmtMsg1, 75, FILLER).init(
		    " USERID=  ");
		private FixedLengthStringData clUserid = new FixedLengthStringData(8).isAPartOf(clCsmtMsg1, 85);
		private FixedLengthStringData filler8 = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 93, FILLER).init(
		    SPACES);
		private FixedLengthStringData clCallLiteral = new FixedLengthStringData(17).isAPartOf(clCsmtMsg1, 96).init(
		    SPACES);
		private ZonedDecimalData clCallNumber = new ZonedDecimalData(4, 0).isAPartOf(clCsmtMsg1, 113)
		    .setPattern("ZZZZ").setBlankWhenZero();
		private FixedLengthStringData filler9 = new FixedLengthStringData(12).isAPartOf(clCsmtMsg1, 117, FILLER).init(
		    SPACES);
	}

	/*
	 * Class transformed from Data Structure NPS221-FILLER-RECORD_INNER
	 */
	private static final class Nps221FillerRecordInner {

		/*
		 * APS-GENERATED SCREEN RECORD: NPS221 *** LENGTH: 961 ***
		 */
		private FixedLengthStringData nps221FillerRecord = new FixedLengthStringData(961).init(LOVALUES);

		private FixedLengthStringData nps221Record = new FixedLengthStringData(961).isAPartOf(nps221FillerRecord, 0,
		    REDEFINE);
		private FixedLengthStringData scaNps221PgmLevel = new FixedLengthStringData(3).isAPartOf(nps221Record, 12);
		private BinaryData nps221PgmLevelLength = new BinaryData(4, 0).isAPartOf(scaNps221PgmLevel, 0);
		private FixedLengthStringData nps221PgmLevelAttr = new FixedLengthStringData(1).isAPartOf(scaNps221PgmLevel, 2);
		private FixedLengthStringData nps221PgmLevel = new FixedLengthStringData(2).isAPartOf(nps221Record, 15);
		private FixedLengthStringData scaNps221TdScrnDate = new FixedLengthStringData(3).isAPartOf(nps221Record, 17);
		private BinaryData nps221TdScrnDateLength = new BinaryData(4, 0).isAPartOf(scaNps221TdScrnDate, 0);
		private FixedLengthStringData nps221TdScrnDateAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps221TdScrnDate, 2);
		private FixedLengthStringData nps221TdScrnDate = new FixedLengthStringData(8).isAPartOf(nps221Record, 20);
		private FixedLengthStringData scaNps221SuNo = new FixedLengthStringData(3).isAPartOf(nps221Record, 28);
		private BinaryData nps221SuNoLength = new BinaryData(4, 0).isAPartOf(scaNps221SuNo, 0);
		private FixedLengthStringData nps221SuNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps221SuNo, 2);
		private FixedLengthStringData nps221SuNo = new FixedLengthStringData(7).isAPartOf(nps221Record, 31);
		private FixedLengthStringData scaNps221SuName = new FixedLengthStringData(3).isAPartOf(nps221Record, 38);
		private BinaryData nps221SuNameLength = new BinaryData(4, 0).isAPartOf(scaNps221SuName, 0);
		private FixedLengthStringData nps221SuNameAttr = new FixedLengthStringData(1).isAPartOf(scaNps221SuName, 2);
		private FixedLengthStringData nps221SuName = new FixedLengthStringData(27).isAPartOf(nps221Record, 41);
		private FixedLengthStringData scaNps221DrivInst = new FixedLengthStringData(3).isAPartOf(nps221Record, 68);
		private BinaryData nps221DrivInstLength = new BinaryData(4, 0).isAPartOf(scaNps221DrivInst, 0);
		private FixedLengthStringData nps221DrivInstAttr = new FixedLengthStringData(1).isAPartOf(scaNps221DrivInst, 2);
		private FixedLengthStringData nps221DrivInst = new FixedLengthStringData(64).isAPartOf(nps221Record, 71);
		private FixedLengthStringData scaNps221CustSvcAc = new FixedLengthStringData(3).isAPartOf(nps221Record, 135);
		private BinaryData nps221CustSvcAcLength = new BinaryData(4, 0).isAPartOf(scaNps221CustSvcAc, 0);
		private FixedLengthStringData nps221CustSvcAcAttr = new FixedLengthStringData(1).isAPartOf(scaNps221CustSvcAc,
		    2);
		private FixedLengthStringData nps221CustSvcAc = new FixedLengthStringData(3).isAPartOf(nps221Record, 138);
		private FixedLengthStringData scaNps221CustSvcPhn3 = new FixedLengthStringData(3).isAPartOf(nps221Record, 141);
		private BinaryData nps221CustSvcPhn3Length = new BinaryData(4, 0).isAPartOf(scaNps221CustSvcPhn3, 0);
		private FixedLengthStringData nps221CustSvcPhn3Attr = new FixedLengthStringData(1).isAPartOf(
		    scaNps221CustSvcPhn3, 2);
		private FixedLengthStringData nps221CustSvcPhn3 = new FixedLengthStringData(3).isAPartOf(nps221Record, 144);
		private FixedLengthStringData scaNps221CustSvcPhn4 = new FixedLengthStringData(3).isAPartOf(nps221Record, 147);
		private BinaryData nps221CustSvcPhn4Length = new BinaryData(4, 0).isAPartOf(scaNps221CustSvcPhn4, 0);
		private FixedLengthStringData nps221CustSvcPhn4Attr = new FixedLengthStringData(1).isAPartOf(
		    scaNps221CustSvcPhn4, 2);
		private FixedLengthStringData nps221CustSvcPhn4 = new FixedLengthStringData(4).isAPartOf(nps221Record, 150);
		private FixedLengthStringData scaNps221Remarks1 = new FixedLengthStringData(3).isAPartOf(nps221Record, 154);
		private BinaryData nps221Remarks1Length = new BinaryData(4, 0).isAPartOf(scaNps221Remarks1, 0);
		private FixedLengthStringData nps221Remarks1Attr = new FixedLengthStringData(1).isAPartOf(scaNps221Remarks1, 2);
		private FixedLengthStringData nps221Remarks1 = new FixedLengthStringData(60).isAPartOf(nps221Record, 157);
		private FixedLengthStringData scaNps221Remarks2 = new FixedLengthStringData(3).isAPartOf(nps221Record, 217);
		private BinaryData nps221Remarks2Length = new BinaryData(4, 0).isAPartOf(scaNps221Remarks2, 0);
		private FixedLengthStringData nps221Remarks2Attr = new FixedLengthStringData(1).isAPartOf(scaNps221Remarks2, 2);
		private FixedLengthStringData nps221Remarks2 = new FixedLengthStringData(60).isAPartOf(nps221Record, 220);
		private FixedLengthStringData scaNps221EffDateMm = new FixedLengthStringData(3).isAPartOf(nps221Record, 280);
		private BinaryData nps221EffDateMmLength = new BinaryData(4, 0).isAPartOf(scaNps221EffDateMm, 0);
		private FixedLengthStringData nps221EffDateMmAttr = new FixedLengthStringData(1).isAPartOf(scaNps221EffDateMm,
		    2);
		private FixedLengthStringData nps221EffDateMm = new FixedLengthStringData(2).isAPartOf(nps221Record, 283);
		private FixedLengthStringData scaNps221EffDateDd = new FixedLengthStringData(3).isAPartOf(nps221Record, 285);
		private BinaryData nps221EffDateDdLength = new BinaryData(4, 0).isAPartOf(scaNps221EffDateDd, 0);
		private FixedLengthStringData nps221EffDateDdAttr = new FixedLengthStringData(1).isAPartOf(scaNps221EffDateDd,
		    2);
		private FixedLengthStringData nps221EffDateDd = new FixedLengthStringData(2).isAPartOf(nps221Record, 288);
		private FixedLengthStringData scaNps221EffDateYy = new FixedLengthStringData(3).isAPartOf(nps221Record, 290);
		private BinaryData nps221EffDateYyLength = new BinaryData(4, 0).isAPartOf(scaNps221EffDateYy, 0);
		private FixedLengthStringData nps221EffDateYyAttr = new FixedLengthStringData(1).isAPartOf(scaNps221EffDateYy,
		    2);
		private FixedLengthStringData nps221EffDateYy = new FixedLengthStringData(4).isAPartOf(nps221Record, 293);
		private FixedLengthStringData scaNps221ExpDateMm = new FixedLengthStringData(3).isAPartOf(nps221Record, 297);
		private BinaryData nps221ExpDateMmLength = new BinaryData(4, 0).isAPartOf(scaNps221ExpDateMm, 0);
		private FixedLengthStringData nps221ExpDateMmAttr = new FixedLengthStringData(1).isAPartOf(scaNps221ExpDateMm,
		    2);
		private FixedLengthStringData nps221ExpDateMm = new FixedLengthStringData(2).isAPartOf(nps221Record, 300);
		private FixedLengthStringData scaNps221ExpDateDd = new FixedLengthStringData(3).isAPartOf(nps221Record, 302);
		private BinaryData nps221ExpDateDdLength = new BinaryData(4, 0).isAPartOf(scaNps221ExpDateDd, 0);
		private FixedLengthStringData nps221ExpDateDdAttr = new FixedLengthStringData(1).isAPartOf(scaNps221ExpDateDd,
		    2);
		private FixedLengthStringData nps221ExpDateDd = new FixedLengthStringData(2).isAPartOf(nps221Record, 305);
		private FixedLengthStringData scaNps221ExpDateYy = new FixedLengthStringData(3).isAPartOf(nps221Record, 307);
		private BinaryData nps221ExpDateYyLength = new BinaryData(4, 0).isAPartOf(scaNps221ExpDateYy, 0);
		private FixedLengthStringData nps221ExpDateYyAttr = new FixedLengthStringData(1).isAPartOf(scaNps221ExpDateYy,
		    2);
		private FixedLengthStringData nps221ExpDateYy = new FixedLengthStringData(4).isAPartOf(nps221Record, 310);
		private FixedLengthStringData scaNps221MrktZone1 = new FixedLengthStringData(3).isAPartOf(nps221Record, 314);
		private BinaryData nps221MrktZone1Length = new BinaryData(4, 0).isAPartOf(scaNps221MrktZone1, 0);
		private FixedLengthStringData nps221MrktZone1Attr = new FixedLengthStringData(1).isAPartOf(scaNps221MrktZone1,
		    2);
		private FixedLengthStringData nps221MrktZone1 = new FixedLengthStringData(5).isAPartOf(nps221Record, 317);
		private FixedLengthStringData scaNps221MrktZone2 = new FixedLengthStringData(3).isAPartOf(nps221Record, 322);
		private BinaryData nps221MrktZone2Length = new BinaryData(4, 0).isAPartOf(scaNps221MrktZone2, 0);
		private FixedLengthStringData nps221MrktZone2Attr = new FixedLengthStringData(1).isAPartOf(scaNps221MrktZone2,
		    2);
		private FixedLengthStringData nps221MrktZone2 = new FixedLengthStringData(5).isAPartOf(nps221Record, 325);
		private FixedLengthStringData scaNps221MrktZone3 = new FixedLengthStringData(3).isAPartOf(nps221Record, 330);
		private BinaryData nps221MrktZone3Length = new BinaryData(4, 0).isAPartOf(scaNps221MrktZone3, 0);
		private FixedLengthStringData nps221MrktZone3Attr = new FixedLengthStringData(1).isAPartOf(scaNps221MrktZone3,
		    2);
		private FixedLengthStringData nps221MrktZone3 = new FixedLengthStringData(5).isAPartOf(nps221Record, 333);
		private FixedLengthStringData scaNps221MrktZone4 = new FixedLengthStringData(3).isAPartOf(nps221Record, 338);
		private BinaryData nps221MrktZone4Length = new BinaryData(4, 0).isAPartOf(scaNps221MrktZone4, 0);
		private FixedLengthStringData nps221MrktZone4Attr = new FixedLengthStringData(1).isAPartOf(scaNps221MrktZone4,
		    2);
		private FixedLengthStringData nps221MrktZone4 = new FixedLengthStringData(5).isAPartOf(nps221Record, 341);
		private FixedLengthStringData scaNps221MrktZone5 = new FixedLengthStringData(3).isAPartOf(nps221Record, 346);
		private BinaryData nps221MrktZone5Length = new BinaryData(4, 0).isAPartOf(scaNps221MrktZone5, 0);
		private FixedLengthStringData nps221MrktZone5Attr = new FixedLengthStringData(1).isAPartOf(scaNps221MrktZone5,
		    2);
		private FixedLengthStringData nps221MrktZone5 = new FixedLengthStringData(5).isAPartOf(nps221Record, 349);
		private FixedLengthStringData scaNps221ScheduleNo = new FixedLengthStringData(3).isAPartOf(nps221Record, 354);
		private BinaryData nps221ScheduleNoLength = new BinaryData(4, 0).isAPartOf(scaNps221ScheduleNo, 0);
		private FixedLengthStringData nps221ScheduleNoAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps221ScheduleNo, 2);
		private FixedLengthStringData nps221ScheduleNo = new FixedLengthStringData(2).isAPartOf(nps221Record, 357);
		private FixedLengthStringData scaNps221PrnInd = new FixedLengthStringData(3).isAPartOf(nps221Record, 359);
		private BinaryData nps221PrnIndLength = new BinaryData(4, 0).isAPartOf(scaNps221PrnInd, 0);
		private FixedLengthStringData nps221PrnIndAttr = new FixedLengthStringData(1).isAPartOf(scaNps221PrnInd, 2);
		private FixedLengthStringData nps221PrnInd = new FixedLengthStringData(1).isAPartOf(nps221Record, 362);
		private FixedLengthStringData nps221Table1 = new FixedLengthStringData(434).isAPartOf(nps221Record, 363);
		private FixedLengthStringData[] nps221Table1Entry = FLSArrayPartOfStructure(7, 62, nps221Table1, 0);
		private FixedLengthStringData[] scaNps221Days = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 0);
		private BinaryData[] nps221DaysLength = BDArrayPartOfArrayStructure(4, 0, scaNps221Days, 0);
		private FixedLengthStringData[] nps221DaysAttr = FLSDArrayPartOfArrayStructure(1, scaNps221Days, 2);
		private FixedLengthStringData[] nps221Days = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 3);
		private FixedLengthStringData[] scaNps221SiteFrHh = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 6);
		private BinaryData[] nps221SiteFrHhLength = BDArrayPartOfArrayStructure(4, 0, scaNps221SiteFrHh, 0);
		private FixedLengthStringData[] nps221SiteFrHhAttr = FLSDArrayPartOfArrayStructure(1, scaNps221SiteFrHh, 2);
		private FixedLengthStringData[] nps221SiteFrHh = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 9);
		private FixedLengthStringData[] scaNps221SiteFrMm = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 11);
		private BinaryData[] nps221SiteFrMmLength = BDArrayPartOfArrayStructure(4, 0, scaNps221SiteFrMm, 0);
		private FixedLengthStringData[] nps221SiteFrMmAttr = FLSDArrayPartOfArrayStructure(1, scaNps221SiteFrMm, 2);
		private FixedLengthStringData[] nps221SiteFrMm = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 14);
		private FixedLengthStringData[] scaNps221SiteFrAp = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 16);
		private BinaryData[] nps221SiteFrApLength = BDArrayPartOfArrayStructure(4, 0, scaNps221SiteFrAp, 0);
		private FixedLengthStringData[] nps221SiteFrApAttr = FLSDArrayPartOfArrayStructure(1, scaNps221SiteFrAp, 2);
		private FixedLengthStringData[] nps221SiteFrAp = FLSDArrayPartOfArrayStructure(1, nps221Table1Entry, 19);
		private FixedLengthStringData[] scaNps221SiteToHh = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 20);
		private BinaryData[] nps221SiteToHhLength = BDArrayPartOfArrayStructure(4, 0, scaNps221SiteToHh, 0);
		private FixedLengthStringData[] nps221SiteToHhAttr = FLSDArrayPartOfArrayStructure(1, scaNps221SiteToHh, 2);
		private FixedLengthStringData[] nps221SiteToHh = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 23);
		private FixedLengthStringData[] scaNps221SiteToMm = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 25);
		private BinaryData[] nps221SiteToMmLength = BDArrayPartOfArrayStructure(4, 0, scaNps221SiteToMm, 0);
		private FixedLengthStringData[] nps221SiteToMmAttr = FLSDArrayPartOfArrayStructure(1, scaNps221SiteToMm, 2);
		private FixedLengthStringData[] nps221SiteToMm = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 28);
		private FixedLengthStringData[] scaNps221SiteToAp = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 30);
		private BinaryData[] nps221SiteToApLength = BDArrayPartOfArrayStructure(4, 0, scaNps221SiteToAp, 0);
		private FixedLengthStringData[] nps221SiteToApAttr = FLSDArrayPartOfArrayStructure(1, scaNps221SiteToAp, 2);
		private FixedLengthStringData[] nps221SiteToAp = FLSDArrayPartOfArrayStructure(1, nps221Table1Entry, 33);
		private FixedLengthStringData[] scaNps221ShopFrHh = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 34);
		private BinaryData[] nps221ShopFrHhLength = BDArrayPartOfArrayStructure(4, 0, scaNps221ShopFrHh, 0);
		private FixedLengthStringData[] nps221ShopFrHhAttr = FLSDArrayPartOfArrayStructure(1, scaNps221ShopFrHh, 2);
		private FixedLengthStringData[] nps221ShopFrHh = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 37);
		private FixedLengthStringData[] scaNps221ShopFrMm = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 39);
		private BinaryData[] nps221ShopFrMmLength = BDArrayPartOfArrayStructure(4, 0, scaNps221ShopFrMm, 0);
		private FixedLengthStringData[] nps221ShopFrMmAttr = FLSDArrayPartOfArrayStructure(1, scaNps221ShopFrMm, 2);
		private FixedLengthStringData[] nps221ShopFrMm = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 42);
		private FixedLengthStringData[] scaNps221ShopFrAp = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 44);
		private BinaryData[] nps221ShopFrApLength = BDArrayPartOfArrayStructure(4, 0, scaNps221ShopFrAp, 0);
		private FixedLengthStringData[] nps221ShopFrApAttr = FLSDArrayPartOfArrayStructure(1, scaNps221ShopFrAp, 2);
		private FixedLengthStringData[] nps221ShopFrAp = FLSDArrayPartOfArrayStructure(1, nps221Table1Entry, 47);
		private FixedLengthStringData[] scaNps221ShopToHh = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 48);
		private BinaryData[] nps221ShopToHhLength = BDArrayPartOfArrayStructure(4, 0, scaNps221ShopToHh, 0);
		private FixedLengthStringData[] nps221ShopToHhAttr = FLSDArrayPartOfArrayStructure(1, scaNps221ShopToHh, 2);
		private FixedLengthStringData[] nps221ShopToHh = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 51);
		private FixedLengthStringData[] scaNps221ShopToMm = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 53);
		private BinaryData[] nps221ShopToMmLength = BDArrayPartOfArrayStructure(4, 0, scaNps221ShopToMm, 0);
		private FixedLengthStringData[] nps221ShopToMmAttr = FLSDArrayPartOfArrayStructure(1, scaNps221ShopToMm, 2);
		private FixedLengthStringData[] nps221ShopToMm = FLSDArrayPartOfArrayStructure(2, nps221Table1Entry, 56);
		private FixedLengthStringData[] scaNps221ShopToAp = FLSDArrayPartOfArrayStructure(3, nps221Table1Entry, 58);
		private BinaryData[] nps221ShopToApLength = BDArrayPartOfArrayStructure(4, 0, scaNps221ShopToAp, 0);
		private FixedLengthStringData[] nps221ShopToApAttr = FLSDArrayPartOfArrayStructure(1, scaNps221ShopToAp, 2);
		private FixedLengthStringData[] nps221ShopToAp = FLSDArrayPartOfArrayStructure(1, nps221Table1Entry, 61);
		private FixedLengthStringData scaNps221Msg = new FixedLengthStringData(3).isAPartOf(nps221Record, 797);
		private BinaryData nps221MsgLength = new BinaryData(4, 0).isAPartOf(scaNps221Msg, 0);
		private FixedLengthStringData nps221MsgAttr = new FixedLengthStringData(1).isAPartOf(scaNps221Msg, 2);
		private FixedLengthStringData nps221Msg = new FixedLengthStringData(79).isAPartOf(nps221Record, 800);
		private FixedLengthStringData scaNps221Msg2 = new FixedLengthStringData(3).isAPartOf(nps221Record, 879);
		private BinaryData nps221Msg2Length = new BinaryData(4, 0).isAPartOf(scaNps221Msg2, 0);
		private FixedLengthStringData nps221Msg2Attr = new FixedLengthStringData(1).isAPartOf(scaNps221Msg2, 2);
		private FixedLengthStringData nps221Msg2 = new FixedLengthStringData(79).isAPartOf(nps221Record, 882);
	}

	/*
	 * Class transformed from Data Structure APS-EIBFN-EIBRCODE_INNER
	 */
	private static final class ApsEibfnEibrcodeInner {

		/* APS-GENERATED EIBRCODE STRUCTURE *** */
		private FixedLengthStringData apsEibfnEibrcode = new FixedLengthStringData(7);
		private FixedLengthStringData apsEibfn = new FixedLengthStringData(1).isAPartOf(apsEibfnEibrcode, 0);
		private FixedLengthStringData apsEibrcode = new FixedLengthStringData(6).isAPartOf(apsEibfnEibrcode, 1);

		private FixedLengthStringData filler = new FixedLengthStringData(7).isAPartOf(apsEibfnEibrcode, 0,
		    FILLER_REDEFINE);
		private BinaryData apsEibfnEibrcodeX = new BinaryData(4, 0).isAPartOf(filler, 0);
		private Validator cbiderr = new Validator(apsEibfnEibrcodeX, +1259);
		private Validator disabled = new Validator(apsEibfnEibrcodeX, +1549);
		private Validator dsiderr = new Validator(apsEibfnEibrcodeX, +1537);
		private Validator dsstat = new Validator(apsEibfnEibrcodeX, +7684);
		private Validator dupkey = new Validator(apsEibfnEibrcodeX, +1668);
		private Validator duprec = new Validator(apsEibfnEibrcodeX, +1666);
		private Validator enddata = new Validator(apsEibfnEibrcodeX, +4097);
		private Validator endfile = new Validator(apsEibfnEibrcodeX, +1551);
		private Validator endinpt = new Validator(apsEibfnEibrcodeX, +1218);
		private Validator enqbusy = new Validator(apsEibfnEibrcodeX, +4658);
		private Validator envdeferr = new Validator(apsEibfnEibrcodeX, +4329);
		private Validator eods = new Validator(apsEibfnEibrcodeX, +1040);
		private Validator eof = new Validator(apsEibfnEibrcodeX, +1028, +1217);
		private Validator expired = new Validator(apsEibfnEibrcodeX, +4128);
		private Validator funcerr = new Validator(apsEibfnEibrcodeX, +7688);
		private Validator igreqcd = new Validator(apsEibfnEibrcodeX, +1258);
		private Validator illogic = new Validator(apsEibfnEibrcodeX, +1538);
		private Validator inverrterm = new Validator(apsEibfnEibrcodeX, +6176);
		private Validator invmpsz = new Validator(apsEibfnEibrcodeX, +6152);
		private Validator invreq = new Validator(apsEibfnEibrcodeX, +736, +1248, +1544, +2592, +3808, +4351, +4832,
		    +5122, +6145, +6880);
		private Validator invtsreq = new Validator(apsEibfnEibrcodeX, +4116);
		private Validator ioerr = new Validator(apsEibfnEibrcodeX, +1664, +2052, +2564, +4100, +5127);
		private Validator iscinvreq = new Validator(apsEibfnEibrcodeX, +1745, +2257, +2769, +4305);
		private Validator itemerr = new Validator(apsEibfnEibrcodeX, +2561);
		private Validator jiderr = new Validator(apsEibfnEibrcodeX, +5121);
		private Validator lengerr = new Validator(apsEibfnEibrcodeX, +1249, +1761, +2273, +2785, +3297, +4321, +5126,
		    +6369, +7905);
		private Validator mapfail = new Validator(apsEibfnEibrcodeX, +6148);
		private Validator nojbufsp = new Validator(apsEibfnEibrcodeX, +5129);
		private Validator nopassbkrd = new Validator(apsEibfnEibrcodeX, +1255);
		private Validator nopassbkwr = new Validator(apsEibfnEibrcodeX, +1256);
		private Validator nospace = new Validator(apsEibfnEibrcodeX, +1667, +2064, +2568);
		private Validator nostg = new Validator(apsEibfnEibrcodeX, +3298);
		private Validator notalloc = new Validator(apsEibfnEibrcodeX, +1237);
		private Validator notfnd = new Validator(apsEibfnEibrcodeX, +1665, +4225);
		private Validator notopen = new Validator(apsEibfnEibrcodeX, +1548, +2056, +5125);
		private Validator pgmiderr = new Validator(apsEibfnEibrcodeX, +3585);
		private Validator qbusy = new Validator(apsEibfnEibrcodeX, +2240);
		private Validator qiderr = new Validator(apsEibfnEibrcodeX, +2050, +2562);
		private Validator qzero = new Validator(apsEibfnEibrcodeX, +2049);
		private Validator rdatt = new Validator(apsEibfnEibrcodeX, +1252, +6372);
		private Validator retpage = new Validator(apsEibfnEibrcodeX, +6146);
		private Validator rtefail = new Validator(apsEibfnEibrcodeX, +6272);
		private Validator rtesome = new Validator(apsEibfnEibrcodeX, +6208);
		private Validator segiderr = new Validator(apsEibfnEibrcodeX, +1540);
		private Validator selnerr = new Validator(apsEibfnEibrcodeX, +7692);
		private Validator sessbusy = new Validator(apsEibfnEibrcodeX, +1236);
		private Validator sessionerr = new Validator(apsEibfnEibrcodeX, +1234);
		private Validator signal = new Validator(apsEibfnEibrcodeX, +1253);
		private Validator sysbusy = new Validator(apsEibfnEibrcodeX, +1235);
		private Validator sysiderr = new Validator(apsEibfnEibrcodeX, +1232, +1744, +2256, +2768, +4304);
		private Validator termiderr = new Validator(apsEibfnEibrcodeX, +1254, +4114);
		private Validator transiderr = new Validator(apsEibfnEibrcodeX, +4113);
		private Validator unexpin = new Validator(apsEibfnEibrcodeX, +7696);
		private Validator wrbrk = new Validator(apsEibfnEibrcodeX, +1251, +6371);
		private Validator errorFound = new Validator(apsEibfnEibrcodeX, +1259, +1537, +7684, +1668, +1666, +4097,
		    +1551, +1218, +4658, +4329, +1040, +1028, +1217, +4128, +7688, +1258, +1538, +6176, +6152, +736, +1248,
		    +1544, +2592, +3808, +4351, +4832, +5122, +6145, +6880, +4116, +1664, +2052, +2564, +4100, +5127, +1745,
		    +2257, +2769, +4305, +2561, +5121, +1249, +1761, +2273, +2785, +3297, +4321, +5126, +6369, +7905, +6148,
		    +5129, +1255, +1256, +1667, +2064, +2568, +3298, +1237, +1665, +4225, +1548, +2056, +5125, +3585, +2240,
		    +2050, +2562, +2049, +1252, +6372, +6146, +6272, +6208, +1540, +7692, +1236, +1234, +1253, +1235, +1232,
		    +1744, +2256, +2768, +4304, +1254, +4114, +4113, +7696, +1251, +6371);
	}

	/*
	 * Class transformed from Data Structure PFKEY-FIELD-GRP_INNER
	 */
	private static final class PfkeyFieldGrpInner {

		/* APS-GENERATED PFKEY STRUCTURE *** */
		private FixedLengthStringData pfkeyFieldGrp = new FixedLengthStringData(2);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 0, FILLER).init(
		    LOVALUES);
		private FixedLengthStringData pfkeyField = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 1);
		private Validator enterKey = new Validator(pfkeyField, QUOTES);
		private Validator clearKey = new Validator(pfkeyField, "_");
		private Validator pen = new Validator(pfkeyField, "=");
		private Validator opid = new Validator(pfkeyField, "W");
		private Validator msre = new Validator(pfkeyField, "X");
		private Validator strf = new Validator(pfkeyField, "H");
		private Validator trig = new Validator(pfkeyField, "\"");
		private Validator pa1 = new Validator(pfkeyField, "%");
		private Validator pa2 = new Validator(pfkeyField, ">");
		private Validator pa3 = new Validator(pfkeyField, ",");
		private Validator pf0 = new Validator(pfkeyField, QUOTES);
		private Validator pf00 = new Validator(pfkeyField, QUOTES);
		private Validator pf1 = new Validator(pfkeyField, "1");
		private Validator pf01 = new Validator(pfkeyField, "1");
		private Validator pf2 = new Validator(pfkeyField, "2");
		private Validator pf02 = new Validator(pfkeyField, "2");
		private Validator pf3 = new Validator(pfkeyField, "3");
		private Validator pf03 = new Validator(pfkeyField, "3");
		private Validator pf4 = new Validator(pfkeyField, "4");
		private Validator pf04 = new Validator(pfkeyField, "4");
		private Validator pf5 = new Validator(pfkeyField, "5");
		private Validator pf05 = new Validator(pfkeyField, "5");
		private Validator pf6 = new Validator(pfkeyField, "6");
		private Validator pf06 = new Validator(pfkeyField, "6");
		private Validator pf7 = new Validator(pfkeyField, "7");
		private Validator pf07 = new Validator(pfkeyField, "7");
		private Validator pf8 = new Validator(pfkeyField, "8");
		private Validator pf08 = new Validator(pfkeyField, "8");
		private Validator pf9 = new Validator(pfkeyField, "9");
		private Validator pf09 = new Validator(pfkeyField, "9");
		private Validator pf10 = new Validator(pfkeyField, ":");
		private Validator pf11 = new Validator(pfkeyField, "#");
		private Validator pf12 = new Validator(pfkeyField, "@");
		private Validator pf13 = new Validator(pfkeyField, "A");
		private Validator pf14 = new Validator(pfkeyField, "B");
		private Validator pf15 = new Validator(pfkeyField, "C");
		private Validator pf16 = new Validator(pfkeyField, "D");
		private Validator pf17 = new Validator(pfkeyField, "E");
		private Validator pf18 = new Validator(pfkeyField, "F");
		private Validator pf19 = new Validator(pfkeyField, "G");
		private Validator pf20 = new Validator(pfkeyField, "H");
		private Validator pf21 = new Validator(pfkeyField, "I");
		private Validator pf23 = new Validator(pfkeyField, ".");
		private Validator pf24 = new Validator(pfkeyField, "<");

		private FixedLengthStringData pfkeyFieldPf22 = new FixedLengthStringData(2).isAPartOf(pfkeyFieldGrp, 0,
		    REDEFINE);
		private BinaryData apsPf22 = new BinaryData(4, 0).isAPartOf(pfkeyFieldPf22, 0);
		private Validator pf22 = new Validator(apsPf22, +74);
	}

	/*
	 * Class transformed from Data Structure APS-SCREEN-ATTRIBUTES_INNER
	 */
	private static final class ApsScreenAttributesInner {

		/* APS-SCREEN-ATTRIBUTES */
		private ZonedDecimalData tpPositionCursor = new ZonedDecimalData(4, 0).init(-1);
		private BinaryData tpAttrPbfftX = new BinaryData(4, 0).init(232);

		private FixedLengthStringData tpAttrPbfftY = new FixedLengthStringData(2).isAPartOf(tpAttrPbfftX, 0, REDEFINE);
		private FixedLengthStringData tpAttrPbfft = new FixedLengthStringData(1).isAPartOf(tpAttrPbfftY, 1);
		private BinaryData tpAttrPnfffX = new BinaryData(4, 0).init(224);

		private FixedLengthStringData tpAttrPnfffY = new FixedLengthStringData(2).isAPartOf(tpAttrPnfffX, 0, REDEFINE);
		private FixedLengthStringData tpAttrPnfff = new FixedLengthStringData(1).isAPartOf(tpAttrPnfffY, 1);
		private BinaryData tpAttrPdfffX = new BinaryData(4, 0).init(236);

		private FixedLengthStringData tpAttrPdfffY = new FixedLengthStringData(2).isAPartOf(tpAttrPdfffX, 0, REDEFINE);
		private FixedLengthStringData tpAttrPdfff = new FixedLengthStringData(1).isAPartOf(tpAttrPdfffY, 1);
		private BinaryData tpAttrUbfftX = new BinaryData(4, 0).init(200);

		private FixedLengthStringData tpAttrUbfftY = new FixedLengthStringData(2).isAPartOf(tpAttrUbfftX, 0, REDEFINE);
		private FixedLengthStringData tpAttrUbfft = new FixedLengthStringData(1).isAPartOf(tpAttrUbfftY, 1);
		private BinaryData tpAttrUnfffX = new BinaryData(4, 0).init(192);

		private FixedLengthStringData tpAttrUnfffY = new FixedLengthStringData(2).isAPartOf(tpAttrUnfffX, 0, REDEFINE);
		private FixedLengthStringData tpAttrUnfff = new FixedLengthStringData(1).isAPartOf(tpAttrUnfffY, 1);
		private BinaryData tpAttrPbfffX = new BinaryData(4, 0).init(232);
	}
}
