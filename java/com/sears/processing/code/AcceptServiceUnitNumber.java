/*
 * Generation Date: 21 November 2011 8:57:27 PM
 * Generated by:     CSC
 * Generated from:  NPS302.CBL
 * 
 * Copyright 2011 CSC, all rights reserved.
 * 
 * This software is the proprietary information of CSC.
 * Use is subject to license terms.
 */
package com.sears.processing.code;

import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER;
import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER_REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSDArrayPartOfArrayStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.LOVALUES;
import static com.quipoz.COBOLFramework.COBOLFunctions.NUMERIC;
import static com.quipoz.COBOLFramework.COBOLFunctions.PtrArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.QUOTES;
import static com.quipoz.COBOLFramework.COBOLFunctions.REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.SPACES;
import static com.quipoz.COBOLFramework.COBOLFunctions.ZDArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.ZERO;
import static com.quipoz.COBOLFramework.COBOLFunctions.add;
import static com.quipoz.COBOLFramework.COBOLFunctions.compute;
import static com.quipoz.COBOLFramework.COBOLFunctions.isEQ;
import static com.quipoz.COBOLFramework.COBOLFunctions.isGT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isLT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isLTE;
import static com.quipoz.COBOLFramework.COBOLFunctions.isNE;
import static com.quipoz.COBOLFramework.COBOLFunctions.length;
import static com.quipoz.COBOLFramework.COBOLFunctions.setAddressToAddress;
import static com.quipoz.COBOLFramework.COBOLFunctions.sub;

import java.sql.SQLException;

import com.csc.qre.bms.screen.ScreenHelper;
import com.csc.qre.cics.CICSContext;
import com.csc.qre.cics.command.CICSCommandFactory;
import com.csc.qre.cics.command.CICSCondition;
import com.csc.qre.cics.command.CICSHandler;
import com.csc.qre.cics.command.impl.AskTime;
import com.csc.qre.cics.command.impl.AssignTransactionDetails;
import com.csc.qre.cics.command.impl.DumpApplication;
import com.csc.qre.cics.command.impl.FormatTime;
import com.csc.qre.cics.command.impl.HandleAbend;
import com.csc.qre.cics.command.impl.IgnoreCondition;
import com.csc.qre.cics.command.impl.LinkProgram;
import com.csc.qre.cics.command.impl.ReadTemporaryStorage;
import com.csc.qre.cics.command.impl.ReleaseTemporaryStorage;
import com.csc.qre.cics.command.impl.ReturnControl;
import com.csc.qre.cics.command.impl.TransactionSyncpoint;
import com.csc.qre.cics.command.impl.TransferControl;
import com.csc.qre.cics.command.impl.WriteTemporaryStorage;
import com.csc.qre.cics.command.impl.WriteTransientStorage;
import com.csc.qre.cics.command.impl.fileaccess.ReadDirectly;
import com.csc.qre.cics.command.impl.screencontrol.ScreenReceiveMap;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendMap;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendText;
import com.csc.qre.cics.util.CICSNonConvCodeModel;
import com.quipoz.COBOLFramework.datatype.Validator;
import com.quipoz.COBOLFramework.datatype.ValueRange;
import com.quipoz.COBOLFramework.util.COBOLExitProgramException;
import com.quipoz.COBOLFramework.util.StringUtil;
import com.quipoz.framework.datatype.BaseData;
import com.quipoz.framework.datatype.BinaryData;
import com.quipoz.framework.datatype.FixedLengthStringData;
import com.quipoz.framework.datatype.PackedDecimalData;
import com.quipoz.framework.datatype.PointerData;
import com.quipoz.framework.datatype.ZonedDecimalData;
import com.sears.framework.utils.GetCurrentUser;
import com.sears.framework.utils.ScreenNavigation;
import com.sears.processing.code.model.NPSServiceUnits;
import com.sears.processing.code.model.Nps302ScreenVars;
import com.sears.processing.code.model.TempAreaForAcceptServiceUnitNumber;
import com.sears.processing.dataaccess.IpspltflKsdsVsam;

/**
 * <pre>
 * ***************************************************************   687000
 *        THE PURPOSE OF THIS MACRO IS TO ALLOW US TO            *   688000
 *        SET THE INITIAL PREFIX OF OUR DB2 TABLES OR            *   689000
 *        VIEWS AT COMPILE TIME WITHOUT HAVING TO                *   690000
 *        ACTUALLY CHANGE THE CODE.  INSTEAD, WE WILL            *   691000
 *        CHANGE THE MACRO THAT IS REFERENCED UNDER USERMAC      *   692000
 *        ON THE APS GENERATOR PANEL.                            *   693000
 *                                                               *   694000
 *        TO USE THIS MACRO, MAKE SURE THAT YOU CODE YOUR SQL    *   695000
 *        STATEMENTS TO CALL A TABLE '&TABLE-PREFIX.XX...'       *   696000
 *        INSTEAD OF HARDCODING THE SPECIFIC TABLENAME YOU MAY   *   697000
 *        BE TESTING WITH.                                       *   698000
 *                                                               *   699000
 * ***************************************************************   700000
 * ***************************************************************   701101
 *  USE THIS PREFIX FOR HMIS SOURCE TABLES                           702001
 * ***************************************************************   702101
 * AUTHOR.                         NPS TEAM.
 * DATE-WRITTEN.                   11/11/04.
 * DATE-COMPILED.                  04 NOV 11 07.21.00.
 * REMARKS.
 * 
 *     ************************************************************* G
 *     *                                                           * G00020
 *     *               NATIONAL PRODUCT SERVICES                   * G00030
 *     *               -------------------------                   * G00040
 *     *                                                           * G00050
 *     * PROGRAM NAME AND LEVEL                                    * G00060
 *     * ----------------------                                    * G00070
 *     *   NPS302 - UNIT SELECTION MENU                            * G00080
 *     *   TRANSID - PS77      APPLICATION PAINTER - BUILD1        * G00090
 *     *                                                           * G00100
 *     * PROGRAM BRIEF                                             * G00110
 *     * -------------                                             * G00120
 *     *   NPS302 IS THE SELECTION SCREEN TO ALLOW HEADQUARTERS    * G00130
 *     *   AND REGION TO SELECT A UNIT NUMBER TO VIEW CALL LOAD    * G00140
 *     *   AND REPORT DATA.                                        * G00150
 *     *                                                           * G00160
 *     * INTERFACES                                                * G00170
 *     * ----------                                                * G00180
 *     *   NONE                                                    * G00190
 *     *                                                           * G00200
 *     * INPUT                                                     * G00210
 *     * -----                                                     * G00220
 *     *   USER KEYED INPUT                                        * G00230
 *     *   UNIT TABLE                                              * G00240
 *     *                                                           * G00250
 *     * OUTPUT                                                    * G00260
 *     * ------                                                    * G00270
 *     *   SCREEN NPS302                                           * G00280
 *     *                                                           * G00290
 *     * PROCEDURE NAME                                            * G00300
 *     * --------------                                            * G00310
 *     *   ONLINE PROGRAM                                          * G00320
 *     *                                                           * G00330
 *     * CALLED PROGRAMS                                           * G00340
 *     * ---------------                                           * G00350
 *     *   NPS015 - MAIN MENU                                      * G00360
 *     *   NPS025 - ADMINISTRATION MENU                            * G00370
 *     *   NPS030 - MESSAGE PROGRAM                                * G00380
 *     *   NPS050 - HELP INFO SCREEN                               * G00390
 *     *   NPS202 - ASSOCIATE INFORMATION                          * G00400
 *     *   NPS231 - NPS TABLES MENU                                * G00410
 *     *   NPS275 - MANAGEMENT REPORTS MENU                        * G00420
 *     *   NPS300 - DISPLAY AND UPDATE OF CALL LOAD                * G00430
 *     *                                                           * G00440
 *     * CALLING PROGRAM                                           * G00450
 *     * ---------------                                           * G00460
 *     *   EXCEPT FOR NPS015, ANY CALLED PROGRAMS MAY ALSO CALL    * G00470
 *     *   NPS302.                                                 * G00480
 *     *                                                           * G00490
 *     * SPECIAL CONSIDERATIONS                                    * G00500
 *     * ----------------------                                    * G00510
 *     *    NONE                                                   * G00520
 *     ************************************************************* G00530
 *     EJECT                                                         G00540
 *     ************************************************************* G
 * </pre>
 */
public class AcceptServiceUnitNumber extends CICSNonConvCodeModel {

	private Nps302ScreenVars screenVar = ScreenHelper.getScreenVars(Nps302ScreenVars.class);
	private boolean sqlerrorflag;
	private BaseData[] sqlparams = null;
	private BaseData[] sqlind = null;
	private BaseData[] sqlinto = null;
	private String sqlstmt = "";

	/* GENERATED-FLAGS */
	private FixedLengthStringData trux = new FixedLengthStringData(1).init("T");
	private Validator always = new Validator(trux, "T");
	private Validator never = new Validator(trux, "F");

	/*
	 * NPS - PILOT UNITS * VSAM KEY LENGTH = 24 * TOTAL FILE LENGTH = 80 * THIS FILE LISTS PILOT UNITS WHICH ARE
	 * AUTHORIZED TO * PERFORM SPECIFIC FUNCTIONS. *** FOR NATIONAL ROLLOOUT WILL HAVE 99999999999999 ROW *** AND UNITS
	 * THAT ARE NOT PILOT UNIT WILL HAVE ROW WITH *** IPSPLTFL-FL = 'N'. * MODIFICATION HISTORY * DATE CHANGED BY
	 * DESCRIPTION * 12/12/97 T. AHN INITIAL RELEASE * 05/15/98 A. PATEL ADDED IPSPLTFL-FL *
	 */
	private FixedLengthStringData ipspltflRec = new FixedLengthStringData(80);
	private FixedLengthStringData ipspltflKey = new FixedLengthStringData(24).isAPartOf(ipspltflRec, 0);
	private FixedLengthStringData ipspltflLogonUnNo = new FixedLengthStringData(7).isAPartOf(ipspltflKey, 0);
	private FixedLengthStringData ipspltflSvcUnNo = new FixedLengthStringData(7).isAPartOf(ipspltflKey, 7);
	private FixedLengthStringData ipspltflFunction = new FixedLengthStringData(10).isAPartOf(ipspltflKey, 14);
	private FixedLengthStringData ipspltflFields = new FixedLengthStringData(56).isAPartOf(ipspltflRec, 24);
	private FixedLengthStringData ipspltflFl = new FixedLengthStringData(1).isAPartOf(ipspltflFields, 0);

	/*
	 * VS-09 ##LH-08 END
	 */
	private FixedLengthStringData wsMessageArea = new FixedLengthStringData(158);
	private FixedLengthStringData wsMessageLine1 = new FixedLengthStringData(79).isAPartOf(wsMessageArea, 0);
	private FixedLengthStringData filler1 = new FixedLengthStringData(5).isAPartOf(wsMessageLine1, 0, FILLER).init(
	    SPACES);
	private FixedLengthStringData wsMessagePgmId = new FixedLengthStringData(6).isAPartOf(wsMessageLine1, 5).init(
	    SPACES);
	private FixedLengthStringData filler2 = new FixedLengthStringData(68).isAPartOf(wsMessageLine1, 11, FILLER).init(
	    SPACES);
	private FixedLengthStringData wsMessageLine2 = new FixedLengthStringData(79).isAPartOf(wsMessageArea, 79).init(
	    SPACES);
	private ZonedDecimalData stampLevelNumber = new ZonedDecimalData(2, 0).init(9).setUnsigned();
	private ZonedDecimalData wsAbendCicsNum = new ZonedDecimalData(4, 0).setUnsigned();
	private ZonedDecimalData wsAbendCicsCode = new ZonedDecimalData(8, 0).setPattern("--------9");
	private FixedLengthStringData wsAbendCicsTermid = new FixedLengthStringData(4);
	private FixedLengthStringData wsAbendCicsUserid = new FixedLengthStringData(8);
	private FixedLengthStringData haMessageArea = new FixedLengthStringData(79).init(SPACES);
	/*
	 * : === END OF $NPS-HANDLE-ABEND === : : === WORKING-STORAGE FIELDS FOR $NPS-CICS-NUMBER=== : : (GENERATED BY
	 * $NPS-CICS-NUMBER-WS) :
	 */
	private ZonedDecimalData cicsCallNumber = new ZonedDecimalData(4, 0).setUnsigned();

	/* NPS-RIGHT-JUSTIFY-FIELDS */
	private FixedLengthStringData npsRightJustifyErr = new FixedLengthStringData(1);
	private Validator npsRightJustifyError = new Validator(npsRightJustifyErr, "Y");
	private Validator npsRightJustifyValid = new Validator(npsRightJustifyErr, "N");
	private BinaryData npsInputSub = new BinaryData(4, 0);
	private BinaryData npsOutputSub = new BinaryData(4, 0);

	private FixedLengthStringData npsInput = new FixedLengthStringData(16);
	private FixedLengthStringData[] npsInputChar = FLSArrayPartOfStructure(16, 1, npsInput, 0);
	private ZonedDecimalData npsOutput = new ZonedDecimalData(16, 0).setUnsigned();
	private ZonedDecimalData[] npsOutputChar = ZDArrayPartOfStructure(16, 1, 0, npsOutput, 0, REDEFINE, UNSIGNED_TRUE);
	/*
	 * : === END OF $NPS-RIGHT-JUSTIFY-WS === : : === WS FIELDS FOR $NPS-ACCESS-ERROR === :
	 */
	private BinaryData clCsmtMsg1Length = new BinaryData(4, 0).init(135);
	private BinaryData clCsmtBorderLength = new BinaryData(4, 0).init(141);

	private FixedLengthStringData clCsmtBorder = new FixedLengthStringData(141);
	private FixedLengthStringData filler5 = new FixedLengthStringData(141).isAPartOf(clCsmtBorder, 0, FILLER).init("*",
	    true);
	private BinaryData clCsmtBlanksLength = new BinaryData(4, 0).init(1);

	private FixedLengthStringData clCsmtBlanks = new FixedLengthStringData(141);
	private FixedLengthStringData filler6 = new FixedLengthStringData(141).isAPartOf(clCsmtBlanks, 0, FILLER).init(
	    SPACES);
	private String clErrorflag = "";

	/*
	 * : === END OF $NPS-ACCESS-ERROR-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-SQL-ERROR=== : : (GENERATED BY
	 * $NPS-SQL-ERROR-WS) :
	 */
	private FixedLengthStringData slWorkArea = new FixedLengthStringData(148);
	private FixedLengthStringData slSqlca = new FixedLengthStringData(136).isAPartOf(slWorkArea, 0);
	private FixedLengthStringData slProgId = new FixedLengthStringData(8).isAPartOf(slWorkArea, 136);
	private ZonedDecimalData slCallNumber = new ZonedDecimalData(4, 0).isAPartOf(slWorkArea, 144).setUnsigned();
	/*
	 * : === END OF $NPS-SQL-ERROR-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-SQL-NUMBER=== : : (GENERATED BY
	 * $NPS-SQL-NUMBER-WS) :
	 */
	private ZonedDecimalData sqCallNumber = new ZonedDecimalData(4, 0).setUnsigned();
	/*
	 * : === END OF $NPS-SQL-NUMBER-WS === : : === WS FIELDS FOR $NPS-DELETE-QUEUES === :
	 */
	private FixedLengthStringData dqArea1 = new FixedLengthStringData(4);

	private FixedLengthStringData dqProgName = new FixedLengthStringData(6);
	private FixedLengthStringData dqProgNamePfx = new FixedLengthStringData(1).isAPartOf(dqProgName, 0);
	private FixedLengthStringData dqProgNameSysid = new FixedLengthStringData(2).isAPartOf(dqProgName, 1);
	private FixedLengthStringData dqProgNameSfx = new FixedLengthStringData(3).isAPartOf(dqProgName, 3);

	private FixedLengthStringData dqProgQueue = new FixedLengthStringData(8);
	private FixedLengthStringData dqProgQueueSysid = new FixedLengthStringData(2).isAPartOf(dqProgQueue, 0);
	private FixedLengthStringData dqProgQueueTid = new FixedLengthStringData(4).isAPartOf(dqProgQueue, 2);
	private BinaryData dqProgQueueId = new BinaryData(4, 0).isAPartOf(dqProgQueue, 6);
	/*
	 * : === END OF $NPS-DELETE-QUEUES-WS === : : === WS FIELDS FOR $NPS-SAVE-SCREEN === :
	 */
	private FixedLengthStringData ssArea1 = new FixedLengthStringData(4);

	private FixedLengthStringData filler7 = new FixedLengthStringData(4).isAPartOf(ssArea1, 0, FILLER_REDEFINE);
	private ZonedDecimalData ssArea1Num = new ZonedDecimalData(4, 0).isAPartOf(filler7, 0).setUnsigned();
	private FixedLengthStringData ssArea2 = new FixedLengthStringData(8);

	private FixedLengthStringData ssProgName = new FixedLengthStringData(6);
	private FixedLengthStringData ssProgNamePfx = new FixedLengthStringData(1).isAPartOf(ssProgName, 0);
	private FixedLengthStringData ssProgNameSysid = new FixedLengthStringData(2).isAPartOf(ssProgName, 1);
	private FixedLengthStringData ssProgNameSfx = new FixedLengthStringData(3).isAPartOf(ssProgName, 3);

	private FixedLengthStringData ssProgQueue = new FixedLengthStringData(8);
	private FixedLengthStringData ssProgQueueSysid = new FixedLengthStringData(2).isAPartOf(ssProgQueue, 0);
	private FixedLengthStringData ssProgQueueTid = new FixedLengthStringData(4).isAPartOf(ssProgQueue, 2);
	private BinaryData ssProgQueueId = new BinaryData(4, 0).isAPartOf(ssProgQueue, 6);
	private BinaryData ssPageNumber = new BinaryData(4, 0);
	private FixedLengthStringData ssTsRecord = new FixedLengthStringData(2000);
	/*
	 * : === END OF $NPS-SAVE-SCREEN-WS === : : == WORKING-STORAGE FIELDS FOR $NPS-FORMAT-TIME == : : (GENERATED BY
	 * $NPS-FORMAT-TIME) :
	 */
	private ZonedDecimalData foTimeNum = new ZonedDecimalData(7, 0).setPattern("-------9");

	private FixedLengthStringData foTime = new FixedLengthStringData(8).isAPartOf(foTimeNum, 0, REDEFINE);
	private FixedLengthStringData foHours = new FixedLengthStringData(2).isAPartOf(foTime, 2);
	private FixedLengthStringData foMinutes = new FixedLengthStringData(2).isAPartOf(foTime, 4);
	private FixedLengthStringData foSeconds = new FixedLengthStringData(2).isAPartOf(foTime, 6);

	private FixedLengthStringData foTimeScreen = new FixedLengthStringData(8);
	private FixedLengthStringData foScrnHours = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 0);
	private FixedLengthStringData foScrnColon1 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 2).init(":");
	private FixedLengthStringData foScrnMinutes = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 3);
	private FixedLengthStringData foScrnColon2 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 5).init(":");
	private FixedLengthStringData foScrnSeconds = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 6);

	/*
	 * : === END OF $NPS-FORMAT-TIME-WS === : &08+01 CSMT-MSG2.
	 */
	private FixedLengthStringData csmtMsg2 = new FixedLengthStringData(75);
	private FixedLengthStringData msg2Filler = new FixedLengthStringData(32).isAPartOf(csmtMsg2, 0).init(SPACES);
	private FixedLengthStringData filler9 = new FixedLengthStringData(9).isAPartOf(csmtMsg2, 32, FILLER).init(
	    "EIBFN   =");
	private FixedLengthStringData msg2Eibfn = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 41);
	private FixedLengthStringData filler10 = new FixedLengthStringData(5).isAPartOf(csmtMsg2, 48, FILLER).init("UNIT=");
	private FixedLengthStringData msg2SvcUnNo = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 53);
	private FixedLengthStringData filler11 = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 60, FILLER).init(
	    "  DATE=");
	private FixedLengthStringData msg2Date = new FixedLengthStringData(8).isAPartOf(csmtMsg2, 67);
	private BinaryData csmtMsg2Length = new BinaryData(3, 0).init(75);
	private FixedLengthStringData apsHoldInvocationMode = new FixedLengthStringData(1);

	private FixedLengthStringData tpScrnReceived = new FixedLengthStringData(8);
	private Validator tpNps302Received = new Validator(tpScrnReceived, "NPS302");

	private FixedLengthStringData apsScreenFlags = new FixedLengthStringData(2);
	private FixedLengthStringData nps302CursorFlag = new FixedLengthStringData(1).isAPartOf(apsScreenFlags, 1);
	private Validator nps302CursorPos = new Validator(nps302CursorFlag, "T");

	/*
	 * APS-GENERATED DFHCOMMAREA *** LENGTH: 5620 ***
	 */
	private FixedLengthStringData dfhcommarea = new FixedLengthStringData(5620);
	private FixedLengthStringData tpHdrLinkage = new FixedLengthStringData(40).isAPartOf(dfhcommarea, 0);
	private FixedLengthStringData tpUserLinkage = new FixedLengthStringData(5500).isAPartOf(dfhcommarea, 40);
	private FixedLengthStringData tpAddrTableLinkage = new FixedLengthStringData(80).isAPartOf(dfhcommarea, 5540);
	private PointerData[] tpAddrLinkage = PtrArrayPartOfStructure(20, tpAddrTableLinkage, 0);
	private TempAreaForAcceptServiceUnitNumber ps302ss = new TempAreaForAcceptServiceUnitNumber();
	private NPSServiceUnits npsxtsu = new NPSServiceUnits();
	private ApsEibfnEibrcodeInner apsEibfnEibrcodeInner = new ApsEibfnEibrcodeInner();
	private ApsScreenAttributesInner apsScreenAttributesInner = new ApsScreenAttributesInner();
	private ClCsmtMsg1Inner clCsmtMsg1Inner = new ClCsmtMsg1Inner();
	private HaCsmtMsgInner haCsmtMsgInner = new HaCsmtMsgInner();
	private Nps302FillerRecordInner nps302FillerRecordInner = new Nps302FillerRecordInner();
	private PfkeyFieldGrpInner pfkeyFieldGrpInner = new PfkeyFieldGrpInner();
	private TpCommareaInner tpCommareaInner = new TpCommareaInner();
	private WorkFieldsInner workFieldsInner = new WorkFieldsInner();

	/**
	 * Default constructor.
	 */
	public AcceptServiceUnitNumber() {
		super();
	}

	/**
	 * Overridden method to set DFHCOMMAREA
	 * 
	 * @param commArea - DFHCOMMAREA
	 */
	public void setCommArea(FixedLengthStringData commArea) {
		super.setCommArea(commArea);
		if (commArea != null) {
			dfhcommarea.changeLength(commArea.getLength());
			setAddressToAddress(dfhcommarea, commArea);
		}

	}

	/**
	 * The mainline method is the default entry point of the program when called by other programs using the Quipoz
	 * runtime framework.
	 */
	public void mainline() {
		try {
			nps302Section();
		} catch (COBOLExitProgramException e) {
			// Expected exception for control flow purposes
		}
	}

	/**
	 * Method generated from section NPS302-SECTION.
	 */
	private void nps302Section() {
		/* APS-MAIN-PARA */
		apsHousekeepingPara();
		if (tpCommareaInner.tpScreenInvoked.isTrue()) {
			ScreenReceiveMap receiveMap = CICSCommandFactory.getScreenReceiveMap(getCICSContext());
			receiveMap.setScreen(Nps302ScreenVars.class);
			receiveMap.setInto(nps302FillerRecordInner.nps302Record);
			receiveMap.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		}
		/* ##* Ending: IF TP-SCREEN-INVOKED... */
		apsUserMainPara();
		/* APS-MAIN-PARA--EXIT */
		exitProgram();
	}

	/**
	 * Method generated from paragraph MAIN-SECTION-SXIT.
	 */
	private void mainSectionSxit() {
		goBack();
		/**** APS-GENERATED HOUSEKEEPING PARAGRAPH ****/
	}

	/**
	 * Method generated from paragraph APS-HOUSEKEEPING-PARA.
	 */
	private void apsHousekeepingPara() {
		if (isEQ(getCICSContext().getEIB().getLengthCommarea(), 0)) {
			tpCommareaInner.tpCommarea.set(SPACES);
			tpCommareaInner.tpInvocationMode.set("T");
			tpCommareaInner.tpCallingProgramId.set("        ");
		} else {
			tpCommareaInner.tpCommarea.set(dfhcommarea);
		}
		/* ##* Ending: IF EIBCALEN = 0... */
		IgnoreCondition ignoreCondition = CICSCommandFactory.getIgnoreCondition(getCICSContext());
		ignoreCondition.addCondition(CICSCondition.ERROR);
		ignoreCondition.execute();
		pfkeyFieldGrpInner.pfkeyField.set(getCICSContext().getEIB().getFunctionKey());
		apsScreenFlags.set(SPACES);
	}

	/**
	 * Method generated from paragraph APS-USER-MAIN-PARA.
	 */
	private void apsUserMainPara() {
		nps302FillerRecordInner.nps302PgmLevel.set(stampLevelNumber);
		/* : === CODE GENERATED BY $NPS-HANDLE-ABEND === : */
		HandleAbend handleAbend = CICSCommandFactory.getHandleAbend(getCICSContext());
		handleAbend.setHandler(new CICSHandler() {

			@Override
			public void handle(CICSContext context) {
				z100HandleAbend();
			}
		});
		handleAbend.execute();
		/* : === END OF CODE FOR $NPS-HANDLE-ABEND === : */
		/* ##* * MAINLINE LOGIC * */
		/* ##* * THIS PARAGRAPH WILL BRANCH TO THE APPROPRIATE PROCESSING * */
		/* ##* * PARAGRAPH DEPENDING ON HOW THIS PROGRAM WAS INVOKED. * */
		if (tpCommareaInner.tpScreenInvoked.isTrue()) {
			screenInvProcessing();
		} else {
			if (tpCommareaInner.tpProgramInvoked.isTrue()) {
				programInvProcessing();
			} else {
				if (tpCommareaInner.tpTransidInvoked.isTrue()) {
					transidInvProcessing();
				}
				/* ##* Ending: IF TP-TRANSID-INVOKED... */
			}
			/* ##* Ending: IF TP-PROGRAM-INVOKED... */
		}
		/* ##* Ending: IF TP-SCREEN-INVOKED... */
	}

	/**
	 * Method generated from paragraph 1000-SCREEN-INV-PROCESSING.
	 */
	private void screenInvProcessing() {
		if (pfkeyFieldGrpInner.enterKey.isTrue()) {
			updateSaveScreen();
			processScreenInput();
		} else {
			if (pfkeyFieldGrpInner.pf1.isTrue() || pfkeyFieldGrpInner.pf13.isTrue()) {
				updateSaveScreen();
				writeScreenToTs();
				workFieldsInner.wsXctlPgm.set("NPS050");
				xctl();
			} else {
				if (pfkeyFieldGrpInner.pf3.isTrue() || pfkeyFieldGrpInner.pf15.isTrue()) {
					/* ##* GF-04 START */
					if (tpCommareaInner.userFromSco.isTrue()) {
						tpCommareaInner.caErrorKey.set("0000");
						apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
						tpCommareaInner.tpInvocationMode.set("L");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
						link.setProgram(NPSErrorMessageHandler.class);
						link.setCommarea(tpCommareaInner.tpCommarea);
						link.setLength(5620);
						link.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
						wsMessageLine1.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText.setFrom(wsMessageLine1);
						sendText.setLength(79);
						sendText.setErase(true);
						sendText.setFreekb(true);
						sendText.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar.execute();
					} else {
						/* ##* GF-04 END */
						compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
						for (tpCommareaInner.caCurrPgmIndex.set(tpCommareaInner.caCurrPgmIndex); !(isEQ(
						    tpCommareaInner.caCurrPgmIndex, 1) || isEQ(
						    tpCommareaInner.caPgmStackLevel[tpCommareaInner.caCurrPgmIndex.toInt()], "X")); tpCommareaInner.caCurrPgmIndex
						    .add(-1)) {
							/* No processing required. */
						}
						workFieldsInner.wsXctlPgm.set(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex
						    .toInt()]);
						if (isEQ(workFieldsInner.wsXctlSysId, "NPS")) {
							compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
						}
						/* ##* Ending: IF WS-XCTL-SYS-ID = 'NPS'... */
						xctl();
					}
					/* ##* Ending: IF USER-FROM-SCO... */
				} else {
					if (pfkeyFieldGrpInner.pf12.isTrue() || pfkeyFieldGrpInner.pf24.isTrue()) {
						/* ##* GF-04 START */
						if (tpCommareaInner.userFromSco.isTrue()) {
							tpCommareaInner.caErrorKey.set("0000");
							apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
							tpCommareaInner.tpInvocationMode.set("L");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
							link2.setProgram(NPSErrorMessageHandler.class);
							link2.setCommarea(tpCommareaInner.tpCommarea);
							link2.setLength(5620);
							link2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
							wsMessageLine1.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText2.setFrom(wsMessageLine1);
							sendText2.setLength(79);
							sendText2.setErase(true);
							sendText2.setFreekb(true);
							sendText2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar2.execute();
						} else {
							/* ##* GF-04 END */
							compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
							workFieldsInner.wsXctlPgm
							    .set(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()]);
							compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
							xctl();
						}
						/* ##* Ending: IF USER-FROM-SCO... */
					} else {
						if (pfkeyFieldGrpInner.clearKey.isTrue() || pfkeyFieldGrpInner.pf5.isTrue()
						        || pfkeyFieldGrpInner.pf17.isTrue()) {
							getScreenFromTs();
							nps302FillerRecordInner.nps302SvcUnNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
							nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
							nps302FillerRecordInner.nps302SvcUnNo.set(SPACES);
							nps302FillerRecordInner.nps302Msg.set(SPACES);
							nps302FillerRecordInner.nps302Msg2.set(SPACES);
							tpCommareaInner.caSvcUnNo.set(SPACES);
							ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
							if (pfkeyFieldGrpInner.clearKey.isTrue()) {
								sendScreen();
							} else {
								if (pfkeyFieldGrpInner.pf5.isTrue() || pfkeyFieldGrpInner.pf17.isTrue()) {
									sendScreenDataonly();
								}
								/* ##* Ending: IF PF5 OR PF17... */
							}
							/* ##* Ending: IF CLEAR-KEY... */
						} else {
							getScreenFromTs();
							tpCommareaInner.caErrorKey.set("0003");
							cicsCallNumber.set("1");
							apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
							tpCommareaInner.tpInvocationMode.set("L");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							LinkProgram link3 = CICSCommandFactory.getLinkProgram(getCICSContext());
							link3.setProgram(NPSErrorMessageHandler.class);
							link3.setCommarea(tpCommareaInner.tpCommarea);
							link3.setLength(5620);
							link3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
							nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
							tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
							ps302ss.ssNps302Msg.set(nps302FillerRecordInner.nps302Msg);
							sendScreenDataonly();
						}
						/* ##* Ending: IF CLEAR-KEY OR PF5 OR PF17... */
					}
					/* ##* Ending: IF PF12 OR PF24... */
				}
				/* ##* Ending: IF PF3 OR PF15... */
			}
			/* ##* Ending: IF PF1 OR PF13... */
		}
		/* ##* Ending: IF ENTER-KEY... */
	}

	/**
	 * Method generated from paragraph 1100-PROCESS-SCREEN-INPUT.
	 */
	private void processScreenInput() {
		if (isEQ(ps302ss.ssNps302SvcUnNo, LOVALUES) || isEQ(ps302ss.ssNps302SvcUnNo, SPACES)
		        || isEQ(ps302ss.ssNps302SvcUnNo, "?")) {
			nps302FillerRecordInner.nps302SvcUnNo.set("?");
			nps302FillerRecordInner.nps302SvcUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps302CursorFlag.set("T");
			nps302FillerRecordInner.nps302SvcUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			tpCommareaInner.caErrorKey.set("0009");
			cicsCallNumber.set("2");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
			link.setProgram(NPSErrorMessageHandler.class);
			link.setCommarea(tpCommareaInner.tpCommarea);
			link.setLength(5620);
			link.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
			tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
			nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
			ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
			sendScreenDataonly();
		} else {
			editSvcUnNo();
		}
		/* ##* Ending: IF SS-NPS302-SVC-UN-NO = LOW-VALUES OR SPACES OR ... */
	}

	/**
	 * Method generated from paragraph 1110-EDIT-SVC-UN-NO.
	 */
	private void editSvcUnNo() {
		workFieldsInner.wsErrorCode.set(SPACES);
		/* YZ-03A */
		npsInput.set(ps302ss.ssNps302SvcUnNo);
		z100RightJustify();
		workFieldsInner.wsRightJustify.set(npsOutput);
		if (!npsRightJustifyValid.isTrue()) {
			nps302FillerRecordInner.nps302SvcUnNo.set(ps302ss.ssNps302SvcUnNo);
			nps302FillerRecordInner.nps302SvcUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			tpCommareaInner.caErrorKey.set("2035");
			cicsCallNumber.set("3");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
			link.setProgram(NPSErrorMessageHandler.class);
			link.setCommarea(tpCommareaInner.tpCommarea);
			link.setLength(5620);
			link.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
			tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
			nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
			ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
			sendScreenDataonly();
		} else {
			workFieldsInner.wsUnitNumber.set(workFieldsInner.wsRightJustify);
			nps302FillerRecordInner.nps302SvcUnNo.set(workFieldsInner.wsRightJustify);
			/* ##* ##YZ-03S */
			/* ##* GF-04 START */
			/* ##* CA-CURR-PGM-INDEX = CA-CURR-PGM-INDEX - 1 */
			/* ##* WS-CALLING-PGM = */
			/* ##* ... CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) */
			/* ##* CA-CURR-PGM-INDEX = CA-CURR-PGM-INDEX + 1 */
			if (tpCommareaInner.userFromSco.isTrue()) {
				workFieldsInner.wsCallingPgm.set(workFieldsInner.wsTransactionId);
			} else {
				compute(workFieldsInner.wsCallingPgm, 0).set(
				    tpCommareaInner.caPgmStackPgmName[sub(tpCommareaInner.caCurrPgmIndex, 1).toInt()]);
			}
			/* ##* Ending: IF USER-FROM-SCO... */
			/* ##* GF-04 END */
			sqlerrorflag = false;
			try {
				sqlstmt = " SELECT  RGN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
				        + " WHERE UN_NO = ?";
				sqlinto = new BaseData[] { workFieldsInner.wsRegion };
				sqlparams = new BaseData[] { workFieldsInner.wsUnitNumber };
				getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
			} catch (SQLException ex) {
				sqlerrorflag = true;
				getAppVars().setSqlErrorCode(ex);
			}
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				if (tpCommareaInner.userFromSco.isTrue()) {
					/* GF-04 */
					/* ##* ... WS-CALLING-PGM = 'NPS231' AND ##GF-04 */
					/* ##* ... CA-OPTION = '5' ##GF-04 */
					tpCommareaInner.caSvcUnNo.set(nps302FillerRecordInner.nps302SvcUnNo);
					workFieldsInner.wsXctlPgm.set("NPS220");
					xctl();
				} else {
					/* YZ-03E */
					nps302FillerRecordInner.nps302SvcUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					tpCommareaInner.caErrorKey.set("1002");
					cicsCallNumber.set("4");
					apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
					tpCommareaInner.tpInvocationMode.set("L");
					tpCommareaInner.tpAddrTable.set(LOVALUES);
					tpCommareaInner.tpAddrCount.set(0);
					LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
					link2.setProgram(NPSErrorMessageHandler.class);
					link2.setCommarea(tpCommareaInner.tpCommarea);
					link2.setLength(5620);
					link2.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
					nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
					tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
					nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
					ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
					sendScreenDataonly();
				}
				/* ##* Ending: IF USER-FROM-SCO ... */
			} else {
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					/* ##* IF CA-LOGON-UN-NO NOT = NPS302-SVC-UN-NO */
					sqlerrorflag = false;
					try {
						sqlstmt = " SELECT  HOS_SVC_UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTSU")
						        + " " + " WHERE SVC_UN_NO = ?";
						sqlinto = new BaseData[] { npsxtsu.hosSvcUnNo };
						sqlparams = new BaseData[] { nps302FillerRecordInner.nps302SvcUnNo };
						getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
					} catch (SQLException ex) {
						sqlerrorflag = true;
						getAppVars().setSqlErrorCode(ex);
					}
					if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
						if (isNE(tpCommareaInner.caLogonUnNo, npsxtsu.hosSvcUnNo)) {
							/* ##* WS-ERROR-CODE = '2310' */
							/* ##* $NPS-GET-MSG '2310' NPS302 */
							/* ##* ELSE */
							if (isLT(tpCommareaInner.caSecurityLvl, 6)) {
								/* GF-04 */
								/* ##* IF WS-CALLING-PGM = 'NPS231' AND ##YZ */
								/* ##* ... CA-OPTION = '2' OR '5' ##YZ */
								/* ##* ELSE */
								if (isNE(workFieldsInner.wsRegion, tpCommareaInner.caLogonUnNo)) {
									nps302FillerRecordInner.nps302SvcUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
									nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
									/* ##* ##AP-06 */
									tpCommareaInner.caErrorKey.set("3158");
									cicsCallNumber.set("5");
									apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
									tpCommareaInner.tpInvocationMode.set("L");
									tpCommareaInner.tpAddrTable.set(LOVALUES);
									tpCommareaInner.tpAddrCount.set(0);
									LinkProgram link3 = CICSCommandFactory.getLinkProgram(getCICSContext());
									link3.setProgram(NPSErrorMessageHandler.class);
									link3.setCommarea(tpCommareaInner.tpCommarea);
									link3.setLength(5620);
									link3.execute();
									apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
									apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
									tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
									nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
									tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
									ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
									sendScreenDataonly();
								}
								/* ##* Ending: IF WS-REGION NOT = CA-LOGON-UN-NO ... */
							}
							/* ##* Ending: IF CA-SECURITY-LVL < 6 ... */
						}
						/* ##* Ending: IF CA-LOGON-UN-NO NOT = HOS-SVC-UN-NO... */
					} else {
						if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
							/* ##* ##TC-07S */
							if (tpCommareaInner.userFromSco.isTrue()) {
								tpCommareaInner.caSvcUnNo.set(nps302FillerRecordInner.nps302SvcUnNo);
								workFieldsInner.wsXctlPgm.set("NPS220");
								xctl();
							} else {
								/* ##* ##TC-07E */
								workFieldsInner.wsErrorCode.set("1002");
								tpCommareaInner.caErrorKey.set("1002");
								cicsCallNumber.set("6");
								apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
								tpCommareaInner.tpInvocationMode.set("L");
								tpCommareaInner.tpAddrTable.set(LOVALUES);
								tpCommareaInner.tpAddrCount.set(0);
								LinkProgram link4 = CICSCommandFactory.getLinkProgram(getCICSContext());
								link4.setProgram(NPSErrorMessageHandler.class);
								link4.setCommarea(tpCommareaInner.tpCommarea);
								link4.setLength(5620);
								link4.execute();
								apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
								apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
								tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
								nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
								tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
							}
							/* ##* Ending: IF USER-FROM-SCO... */
						}
						/* ##* Ending: IF SQLCODE = +100 ... */
					}
					/* ##* Ending: IF SQLCODE = 0... */
					/* ##* IF CA-SECURITY-LVL NOT = 6 */
					/* ##* IF WS-CALLING-PGM = 'NPS231' AND ##YZ */
					/* ##* ... CA-OPTION = '2' OR '5' ##YZ */
					/* ##* ELSE */
					/* ##* IF WS-REGION NOT = CA-LOGON-UN-NO */
					/* ##* TP-ATTR NPS302 BRT SVC-UN-NO */
					/* ##* NPS302-TD-SCREEN-DATE = CA-TD-SCREEN-DATE */
					/* ##* $NPS-GET-MSG '1003' NPS302 */
					/* ##* SS-NPS302-RECORD = NPS302-RECORD */
					/* ##* PERFORM 9300-SEND-SCREEN-DATAONLY */
					tpCommareaInner.caSvcUnNo.set(nps302FillerRecordInner.nps302SvcUnNo);
					cicsCallNumber.set("7");
					if (isEQ(workFieldsInner.wsCallingPgm, "NPS231")) {
						/* AR-01A */
						/* ##* COMMENTED OUT AP-06S */
						/* ##* IF CA-OPTION = '2' ##YZ-03 */
						/* ##* PERFORM 1117-HOST-CHECK ##YZ-03A */
						/* ##* IF WS-ERROR-CODE = SPACES ##YZ-03A */
						/* ##* WS-XCTL-PGM = 'NPS300' ##AR-01A */
						/* ##* COMMENTED OUT AP-06E */
						if (isEQ(tpCommareaInner.caOption, "1")) {
							/* AP-06 */
							/* ##* ##LH-08START */
							readIpspltflForCams();
							if (workFieldsInner.convertedToCams.isTrue()) {
								workFieldsInner.wsErrorCode.set("2645");
								tpCommareaInner.caErrorKey.set("2645");
								cicsCallNumber.set("8");
								apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
								tpCommareaInner.tpInvocationMode.set("L");
								tpCommareaInner.tpAddrTable.set(LOVALUES);
								tpCommareaInner.tpAddrCount.set(0);
								LinkProgram link5 = CICSCommandFactory.getLinkProgram(getCICSContext());
								link5.setProgram(NPSErrorMessageHandler.class);
								link5.setCommarea(tpCommareaInner.tpCommarea);
								link5.setLength(5620);
								link5.execute();
								apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
								apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
								tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
								nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
								tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
							} else {
								if (workFieldsInner.convertedToHals.isTrue()) {
									/* VS-09S */
									workFieldsInner.wsErrorCode.set("9964");
									tpCommareaInner.caErrorKey.set("9964");
									cicsCallNumber.set("9");
									apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
									tpCommareaInner.tpInvocationMode.set("L");
									tpCommareaInner.tpAddrTable.set(LOVALUES);
									tpCommareaInner.tpAddrCount.set(0);
									LinkProgram link6 = CICSCommandFactory.getLinkProgram(getCICSContext());
									link6.setProgram(NPSErrorMessageHandler.class);
									link6.setCommarea(tpCommareaInner.tpCommarea);
									link6.setLength(5620);
									link6.execute();
									apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
									apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
									tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
									nps302FillerRecordInner.nps302Msg2.set(tpCommareaInner.caErrorMsg);
									tpCommareaInner.caMsg2.set(tpCommareaInner.caErrorMsg);
								} else {
									/* ##* ##LH-08 END */
									workFieldsInner.wsXctlPgm.set("NPS340");
								}
								/* ##* Ending: IF CONVERTED-TO-HALS ... */
							}
							/* ##* Ending: IF CONVERTED-TO-CAMS ... */
							/** AP-06 */
						} else {
							if (isEQ(tpCommareaInner.caOption, "3")) {
								/* AP-06 */
								workFieldsInner.wsXctlPgm.set("NPS220");
								/** AP-06 */
								/* ##* ELSE-IF CA-OPTION = '5' ##YZ-03S */
								/* ##* WS-XCTL-PGM = 'NPS220' */
							} else {
								if (isEQ(tpCommareaInner.caOption, "6")) {
									/* MW-05 */
									workFieldsInner.wsXctlPgm.set("NPS451");
									/** MW-05 */
								} else {
									if (isEQ(tpCommareaInner.caOption, "8")) {
										/* LH-08 */
										workFieldsInner.wsXctlPgm.set("NPS349");
										/** LH-08 */
									} else {
										/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
										clErrorflag = "C";
										accessError();
									}
									/* ##* Ending: IF CA-OPTION = '8' ... */
								}
								/* ##* Ending: IF CA-OPTION = '6' ... */
							}
							/* ##* Ending: IF CA-OPTION = '3' ... */
						}
						/* ##* Ending: IF CA-OPTION = '1' ... */
						/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
						/** YZ-03E */
					} else if (isEQ(workFieldsInner.wsCallingPgm, "NPS025")) {
						/* AR-01A */
						if (isEQ(tpCommareaInner.caOption, "1")) {
							/* AR-01A */
							/* ##* WS-XCTL-PGM = 'NPS202' ##AR-01A */
							workFieldsInner.wsXctlPgm.set("NPS026");
							/** BK-04 */
						} else {
							if (isEQ(tpCommareaInner.caOption, "2")) {
								/* AR-01A */
								/* ##* WS-XCTL-PGM = 'NPS275' ##AR-01A */
								workFieldsInner.wsXctlPgm.set("NPS361");
								/** YZ-02 */
							} else {
								if (isEQ(tpCommareaInner.caOption, "4")) {
									workFieldsInner.wsXctlPgm.set("NPS360");
									/** YZ-02 */
								} else {
									/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
									clErrorflag = "C";
									accessError();
								}
								/* ##* Ending: IF CA-OPTION = '4' ... */
							}
							/* ##* Ending: IF CA-OPTION = '2' ... */
						}
						/* ##* Ending: IF CA-OPTION = '1' ... */
						/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
					} else if (isEQ(workFieldsInner.wsCallingPgm, workFieldsInner.wsTransactionId)) {
						/* GF-04 */
						workFieldsInner.wsXctlPgm.set("NPS220");
						/** GF-04 */
					} else {
						/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
						clErrorflag = "C";
						accessError();
					}
					/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
					if (isEQ(workFieldsInner.wsErrorCode, SPACES)) {
						/* YZ-03AS */
						xctl();
					} else {
						nps302FillerRecordInner.nps302SvcUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
						sendScreenDataonly();
					}
					/* ##* Ending: IF WS-ERROR-CODE = SPACES ... */
					/** YZ-03AE */
				} else {
					sqCallNumber.set("1");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF NOT NPS-RIGHT-JUSTIFY-VALID... */
	}

	/**
	 * Method generated from paragraph 1115-READ-IPSPLTFL-FOR-CAMS.
	 */
	private void readIpspltflForCams() {
		ipspltflLogonUnNo.set(workFieldsInner.wsUnitNumber);
		ipspltflSvcUnNo.set(workFieldsInner.wsUnitNumber);
		ipspltflFunction.set("CAMS");
		cicsCallNumber.set("10");
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setDataset(IpspltflKsdsVsam.class);
		read.setInto(ipspltflRec);
		read.setRecordIdField(ipspltflKey);
		read.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isEQ(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			if (isEQ(ipspltflFl, "Y")) {
				workFieldsInner.wsConvertedToCamsFl.set("Y");
			} else {
				if (isEQ(ipspltflFl, "H")) {
					/* VS-09S */
					workFieldsInner.wsConvertedToCamsFl.set("H");
					/** VS-09E */
				} else {
					workFieldsInner.wsConvertedToCamsFl.set("N");
				}
				/* ##* Ending: IF IPSPLTFL-FL = 'H' ... */
			}
			/* ##* Ending: IF IPSPLTFL-FL = 'Y'... */
		} else {
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				ipspltflLogonUnNo.set("9999999");
				ipspltflSvcUnNo.set("9999999");
				ipspltflFunction.set("CAMS");
				cicsCallNumber.set("11");
				ReadDirectly read2 = CICSCommandFactory.getReadDirectly(getCICSContext());
				read2.setDataset(IpspltflKsdsVsam.class);
				read2.setInto(ipspltflRec);
				read2.setRecordIdField(ipspltflKey);
				read2.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (isEQ(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
					if (isEQ(ipspltflFl, "Y")) {
						workFieldsInner.wsConvertedToCamsFl.set("Y");
					} else {
						if (isEQ(ipspltflFl, "H")) {
							/* VS-09S */
							workFieldsInner.wsConvertedToCamsFl.set("H");
							/** VS-09E */
						} else {
							workFieldsInner.wsConvertedToCamsFl.set("N");
						}
						/* ##* Ending: IF IPSPLTFL-FL = 'H' ... */
					}
					/* ##* Ending: IF IPSPLTFL-FL = 'Y'... */
				} else {
					if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
						workFieldsInner.wsConvertedToCamsFl.set("N");
					} else {
						/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
						clErrorflag = "C";
						accessError();
					}
					/* ##* Ending: IF NOTFND... */
				}
				/* ##* Ending: IF EIBRCODE = LOW-VALUES... */
				/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
			} else {
				/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
				clErrorflag = "C";
				accessError();
			}
			/* ##* Ending: IF NOTFND... */
		}
		/* ##* Ending: IF EIBRCODE = LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1117-HOST-CHECK.
	 */
	private void hostCheck() {
		if (isNE(tpCommareaInner.caLogonUnNo, nps302FillerRecordInner.nps302SvcUnNo)) {
			sqlerrorflag = false;
			try {
				sqlstmt = " SELECT  HOS_SVC_UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTSU") + " "
				        + " WHERE SVC_UN_NO = ?";
				sqlinto = new BaseData[] { npsxtsu.hosSvcUnNo };
				sqlparams = new BaseData[] { nps302FillerRecordInner.nps302SvcUnNo };
				getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
			} catch (SQLException ex) {
				sqlerrorflag = true;
				getAppVars().setSqlErrorCode(ex);
			}
			if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
				if (isNE(tpCommareaInner.caLogonUnNo, npsxtsu.hosSvcUnNo)) {
					workFieldsInner.wsErrorCode.set("2310");
					tpCommareaInner.caErrorKey.set("2310");
					cicsCallNumber.set("12");
					apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
					tpCommareaInner.tpInvocationMode.set("L");
					tpCommareaInner.tpAddrTable.set(LOVALUES);
					tpCommareaInner.tpAddrCount.set(0);
					LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
					link.setProgram(NPSErrorMessageHandler.class);
					link.setCommarea(tpCommareaInner.tpCommarea);
					link.setLength(5620);
					link.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
					nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
					tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
				}
				/* ##* Ending: IF CA-LOGON-UN-NO NOT = HOS-SVC-UN-NO... */
			} else {
				if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
					workFieldsInner.wsErrorCode.set("1002");
					tpCommareaInner.caErrorKey.set("1002");
					cicsCallNumber.set("13");
					apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
					tpCommareaInner.tpInvocationMode.set("L");
					tpCommareaInner.tpAddrTable.set(LOVALUES);
					tpCommareaInner.tpAddrCount.set(0);
					LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
					link2.setProgram(NPSErrorMessageHandler.class);
					link2.setCommarea(tpCommareaInner.tpCommarea);
					link2.setLength(5620);
					link2.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
					nps302FillerRecordInner.nps302Msg.set(tpCommareaInner.caErrorMsg);
					tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
				}
				/* ##* Ending: IF SQLCODE = +100... */
			}
			/* ##* Ending: IF SQLCODE = 0... */
		}
		/* ##* Ending: IF CA-LOGON-UN-NO NOT = NPS302-SVC-UN-NO... */
	}

	/**
	 * Method generated from paragraph 1120-UPDATE-SAVE-SCREEN.
	 */
	private void updateSaveScreen() {
		getScreenFromTs();
		if (isGT(nps302FillerRecordInner.nps302SvcUnNo, LOVALUES)
		        || isEQ(nps302FillerRecordInner.nps302SvcUnNoAttr, workFieldsInner.eraseEofInd)) {
			ps302ss.ssNps302SvcUnNo.set(nps302FillerRecordInner.nps302SvcUnNo);
		}
		/* ##* Ending: IF NPS302-SVC-UN-NO > LOW-VALUES OR... */
	}

	/**
	 * Method generated from paragraph 2000-PROGRAM-INV-PROCESSING.
	 */
	private void programInvProcessing() {
		workFieldsInner.wsCallingPgm.set(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()]);
		/* AR-01A */
		if (isEQ(workFieldsInner.wsCallingPgm, "NPS050")) {
			tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set(SPACES);
			compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
			getScreenFromTs();
			nps302FillerRecordInner.nps302Record.set(ps302ss.ssNps302Record);
			sendScreen();
		} else {
			if (isEQ(workFieldsInner.wsCallingPgm, "NPS231") || isEQ(workFieldsInner.wsCallingPgm, "NPS025")) {
				/* AR-01A */
				compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
				tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set("NPS302");
				nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
				ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
				tpCommareaInner.caSvcUnNo.set(SPACES);
				sendScreen();
				/* ##* ELSE-IF WS-CALLING-PGM = 'NPS300' OR 'NPS202' ##AR-01A */
			} else {
				if (isEQ(workFieldsInner.wsCallingPgm, "NPS300") || isEQ(workFieldsInner.wsCallingPgm, "NPS026")
				        || isEQ(workFieldsInner.wsCallingPgm, "NPS275") || isEQ(workFieldsInner.wsCallingPgm, "NPS360")
				        || isEQ(workFieldsInner.wsCallingPgm, "NPS361") || isEQ(workFieldsInner.wsCallingPgm, "NPS220")
				        || isEQ(workFieldsInner.wsCallingPgm, "NPS451") || isEQ(workFieldsInner.wsCallingPgm, "NPS340")) {
					/* AP-06 */
					if (isEQ(workFieldsInner.wsCallingPgm, "NPS360")) {
						/* YZ-02 */
						tpCommareaInner.caOption.set("4");
						/** YZ-02 */
					} else {
						if (isEQ(workFieldsInner.wsCallingPgm, "NPS361")) {
							/* YZ-02 */
							tpCommareaInner.caOption.set("2");
							/** YZ-02 */
						} else {
							if (isEQ(workFieldsInner.wsCallingPgm, "NPS026")) {
								/* BK-04 */
								tpCommareaInner.caOption.set("1");
							}
							/* ##* Ending: IF WS-CALLING-PGM = 'NPS026' ... */
						}
						/* ##* Ending: IF WS-CALLING-PGM = 'NPS361' ... */
					}
					/* ##* Ending: IF WS-CALLING-PGM = 'NPS360' ... */
					/* BK-04 */
					tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set(SPACES);
					compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
					nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
					nps302FillerRecordInner.nps302SvcUnNo.set(tpCommareaInner.caSvcUnNo);
					ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
					sendScreen();
				} else {
					tpCommareaInner.caErrorKey.set("0007");
					cicsCallNumber.set("14");
					apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
					tpCommareaInner.tpInvocationMode.set("L");
					tpCommareaInner.tpAddrTable.set(LOVALUES);
					tpCommareaInner.tpAddrCount.set(0);
					LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
					link.setProgram(NPSErrorMessageHandler.class);
					link.setCommarea(tpCommareaInner.tpCommarea);
					link.setLength(5620);
					link.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
					wsMessageLine1.set(tpCommareaInner.caErrorMsg);
					wsMessagePgmId.set("NPS302");
					tpCommareaInner.caErrorKey.set("I007");
					cicsCallNumber.set("15");
					apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
					tpCommareaInner.tpInvocationMode.set("L");
					tpCommareaInner.tpAddrTable.set(LOVALUES);
					tpCommareaInner.tpAddrCount.set(0);
					LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
					link2.setProgram(NPSErrorMessageHandler.class);
					link2.setCommarea(tpCommareaInner.tpCommarea);
					link2.setLength(5620);
					link2.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
					wsMessageLine2.set(tpCommareaInner.caErrorMsg);
					cicsCallNumber.set("16");
					ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
					sendText.setFrom(wsMessageArea);
					sendText.setLength(158);
					sendText.setErase(true);
					sendText.setFreekb(true);
					sendText.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
						/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
						clErrorflag = "C";
						accessError();
					}
					/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
					/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
					if (tpCommareaInner.tpLinkInvoked.isTrue()) {
						dfhcommarea.set(tpCommareaInner.tpCommarea);
					}
					/* ##* Ending: IF TP-LINK-INVOKED THEN... */
					ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
					returnVar.execute();
				}
				/* ##* Ending: IF WS-CALLING-PGM = 'NPS300' OR 'NPS026' ... */
			}
			/* ##* Ending: IF WS-CALLING-PGM = 'NPS231' OR 'NPS025'... */
		}
		/* ##* Ending: IF WS-CALLING-PGM = 'NPS050'... */
	}

	/**
	 * Method generated from paragraph 3000-TRANSID-INV-PROCESSING.
	 */
	private void transidInvProcessing() {
		/* ##* GF-04 START */
		if (isEQ(getCICSContext().getEIB().getTransactionId(), "PSCO")) {
			tpCommareaInner.caSecurityLvl.set("7");
			tpCommareaInner.caCurrPgmIndex.set(1);
			tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set("NPS302");
			/* ##* PERFORM 3200-CHECK-RACF-SIGNON */
			getCurrentDate();
			nps302FillerRecordInner.nps302TdScreenDate.set(tpCommareaInner.caTdScreenDate);
			ps302ss.ssNps302Record.set(nps302FillerRecordInner.nps302Record);
			tpCommareaInner.caSvcUnNo.set(SPACES);
			sendScreen();
		} else {
			/* ##* GF-04 END */
			tpCommareaInner.caErrorKey.set("I005");
			cicsCallNumber.set("17");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
			link.setProgram(NPSErrorMessageHandler.class);
			link.setCommarea(tpCommareaInner.tpCommarea);
			link.setLength(5620);
			link.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			wsMessageArea.set(tpCommareaInner.caErrorMsg);
			ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
			sendText.setFrom(wsMessageArea);
			sendText.setLength(79);
			sendText.setErase(true);
			sendText.setFreekb(true);
			sendText.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		}
		/* ##* Ending: IF EIBTRNID = 'PSCO'... */
	}

	/**
	 * Method generated from paragraph 3100-GET-CURRENT-DATE.
	 */
	private void getCurrentDate() {
		AskTime askTime = CICSCommandFactory.getAskTime(getCICSContext());
		askTime.setAbstime(workFieldsInner.workTime);
		askTime.execute();
		FormatTime formatTime = CICSCommandFactory.getFormatTime(getCICSContext());
		formatTime.setAbstime(workFieldsInner.workTime);
		formatTime.setDatesep("/");
		formatTime.setMmddyy(tpCommareaInner.caTdScreenDate);
		formatTime.execute();
	}

	/**
	 * Method generated from paragraph 3200-CHECK-RACF-SIGNON.
	 */
	private void checkRacfSignon() {
		workFieldsInner.wsCicsCallLen.set(length(tpCommareaInner.caUserid));
		cicsCallNumber.set("18");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(GetCurrentUser.class);
		link.setCommarea(tpCommareaInner.caUserid);
		link.setLength(workFieldsInner.wsCicsCallLen);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		if (isEQ(tpCommareaInner.caUserid, SPACES) || isEQ(tpCommareaInner.caUserid, "CICSUSR")) {
			tpCommareaInner.caErrorKey.set("I001");
			cicsCallNumber.set("19");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
			link2.setProgram(NPSErrorMessageHandler.class);
			link2.setCommarea(tpCommareaInner.tpCommarea);
			link2.setLength(5620);
			link2.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			wsMessageLine2.set(tpCommareaInner.caErrorMsg);
			ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
			sendText.setFrom(wsMessageLine2);
			sendText.setLength(79);
			sendText.setErase(true);
			sendText.setFreekb(true);
			sendText.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		}
		/* ##* Ending: IF CA-USERID = SPACES OR 'CICSUSR'... */
	}

	/**
	 * Method generated from paragraph 9000-XCTL.
	 */
	private void xctl() {
		if (isNE(workFieldsInner.wsXctlPgm, "NPS050")) {
			/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
			dqProgName.set("NPS302");
			z100DeleteQueues();
		}
		/* ##* Ending: IF WS-XCTL-PGM NOT = 'NPS050'... */
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		cicsCallNumber.set("20");
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		cicsCallNumber.set("21");
		tpCommareaInner.tpInvocationMode.set("P");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
		xctl.setProgram(workFieldsInner.wsXctlPgm);
		xctl.setCommarea(tpCommareaInner.tpCommarea);
		xctl.setLength(5620);
		xctl.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph 9200-SEND-SCREEN.
	 */
	private void sendScreen() {
		writeScreenToTs();
		cicsCallNumber.set("22");
		tpCommareaInner.tpInvocationMode.set("S");
		tpCommareaInner.tpCallingProgramId.set("NPS302");
		if (!nps302CursorPos.isTrue()) {
			nps302FillerRecordInner.nps302SvcUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
		}
		/* ##* Ending: IF NOT NPS302-CURSOR-POS... */
		ScreenSendMap sendMap = CICSCommandFactory.getScreenSendMap(getCICSContext());
		sendMap.setScreen(Nps302ScreenVars.class);
		sendMap.setFrom(nps302FillerRecordInner.nps302Record);
		sendMap.setCursor(true);
		sendMap.setErase(true);
		sendMap.setFreekb(true);
		sendMap.execute();
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.setTransid("PS77");
		returnVar.setCommarea(tpCommareaInner.tpCommarea);
		returnVar.setLength(5620);
		returnVar.execute();
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph 9300-SEND-SCREEN-DATAONLY.
	 */
	private void sendScreenDataonly() {
		writeScreenToTs();
		cicsCallNumber.set("23");
		tpCommareaInner.tpInvocationMode.set("S");
		tpCommareaInner.tpCallingProgramId.set("NPS302");
		if (!nps302CursorPos.isTrue()) {
			nps302FillerRecordInner.nps302SvcUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
		}
		/* ##* Ending: IF NOT NPS302-CURSOR-POS... */
		ScreenSendMap sendMap = CICSCommandFactory.getScreenSendMap(getCICSContext());
		sendMap.setScreen(Nps302ScreenVars.class);
		sendMap.setFrom(nps302FillerRecordInner.nps302Record);
		sendMap.setCursor(true);
		sendMap.setDataonly(true);
		sendMap.setFreekb(true);
		sendMap.execute();
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.setTransid("PS77");
		returnVar.setCommarea(tpCommareaInner.tpCommarea);
		returnVar.setLength(5620);
		returnVar.execute();
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph 9400-GET-SCREEN-FROM-TS.
	 */
	private void getScreenFromTs() {
		/* : === BEGIN CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
		ssPageNumber.set(1);
		ssArea2.set(SPACES);
		ssProgName.set("NPS302");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		z100RestoreScreen();
		ps302ss.ssNps302Record.set(ssTsRecord);
	}

	/**
	 * Method generated from paragraph 9500-WRITE-SCREEN-TO-TS.
	 */
	private void writeScreenToTs() {
		/* : === CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		ssPageNumber.set(1);
		ssArea2.set(SPACES);
		ssProgName.set("NPS302");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		ssTsRecord.set(ps302ss.ssNps302Record);
		z100SaveScreen();
	}

	/**
	 * Method generated from paragraph Z200-DELETE-SCREEN-QUEUE.
	 */
	private void z200DeleteScreenQueue() {
		/* : PARAGRAPH TO DELETE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* DELETE QUEUE */
		cicsCallNumber.set("24");
		ReleaseTemporaryStorage deleteqTs = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs.setQueue(ssProgQueue);
		deleteqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		/* Z200-DELETE-SCREEN-QUEUE--EXIT */
	}

	/**
	 * Method generated from paragraph Z200-REWRITE-SCREEN-ERROR.
	 */
	private void z200RewriteScreenError() {
		/* : PARAGRAPH TO OVERWRITE TS QUEUE RECORD : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* OVERWRITE RECORD */
		cicsCallNumber.set("25");
		WriteTemporaryStorage writeqTs = CICSCommandFactory.getWriteTemporaryStorage(getCICSContext());
		writeqTs.setQueue(ssProgQueue);
		writeqTs.setFrom(ssTsRecord);
		writeqTs.setLength(ssTsRecord.getLength());
		writeqTs.setItem(ssPageNumber);
		writeqTs.execute();
	}

	/**
	 * Method generated from paragraph Z100-SAVE-SCREEN.
	 */
	private void z100SaveScreen() {
		/* : PARAGRAPH TO SAVE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* BUILD QUEUE NAME */
		if (isEQ(ssArea2, SPACES)) {
			ssProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
			ssProgQueueSysid.set(ssProgNameSysid);
			ssProgQueueId.set(ssArea1Num);
		} else {
			ssProgQueue.set(ssArea2);
		}
		/* ##* Ending: IF SS-AREA-2 IS EQUAL TO SPACES... */
		cicsCallNumber.set("26");
		WriteTemporaryStorage writeqTs = CICSCommandFactory.getWriteTemporaryStorage(getCICSContext());
		writeqTs.setQueue(ssProgQueue);
		writeqTs.setFrom(ssTsRecord);
		writeqTs.setLength(ssTsRecord.getLength());
		writeqTs.setItem(ssPageNumber);
		writeqTs.setRewrite(true);
		writeqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (apsEibfnEibrcodeInner.qiderr.isTrue() || apsEibfnEibrcodeInner.itemerr.isTrue()) {
			z200RewriteScreenError();
		}
		/* ##* Ending: IF QIDERR OR ITEMERR... */
	}

	/**
	 * Method generated from paragraph Z100-RESTORE-SCREEN.
	 */
	private void z100RestoreScreen() {
		/* : PARAGRAPH TO RESTORE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-RESTORE-SCREEN) : */
		/* BUILD QUEUE NAME */
		if (isEQ(ssArea2, SPACES)) {
			ssProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
			ssProgQueueSysid.set(ssProgNameSysid);
			ssProgQueueId.set(ssArea1Num);
		} else {
			ssProgQueue.set(ssArea2);
		}
		/* ##* Ending: IF SS-AREA-2 IS EQUAL TO SPACES... */
		cicsCallNumber.set("27");
		ReadTemporaryStorage readqTs = CICSCommandFactory.getReadTemporaryStorage(getCICSContext());
		readqTs.setQueue(ssProgQueue);
		readqTs.setInto(ssTsRecord);
		readqTs.setLength(ssTsRecord.getLength());
		readqTs.setItem(ssPageNumber);
		readqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
	}

	/**
	 * Method generated from paragraph Z100-DELETE-QUEUES.
	 */
	private void z100DeleteQueues() {
		/* : PARAGRAPH TO DELETE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-DELETE-QUEUES) : */
		/* DELETE QUEUE */
		dqProgQueueSysid.set(dqProgNameSysid);
		dqProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(dqProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("28");
		ReleaseTemporaryStorage deleteqTs = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs.setQueue(dqProgQueue);
		deleteqTs.setNoHandle(true);
		deleteqTs.execute();
		StringUtil stringVariable2 = new StringUtil();
		stringVariable2.addExpression(dqProgNameSfx);
		stringVariable2.addExpression("1");
		stringVariable2.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("29");
		ReleaseTemporaryStorage deleteqTs2 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs2.setQueue(dqProgQueue);
		deleteqTs2.setNoHandle(true);
		deleteqTs2.execute();
		StringUtil stringVariable3 = new StringUtil();
		stringVariable3.addExpression(dqProgNameSfx);
		stringVariable3.addExpression("2");
		stringVariable3.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("30");
		ReleaseTemporaryStorage deleteqTs3 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs3.setQueue(dqProgQueue);
		deleteqTs3.setNoHandle(true);
		deleteqTs3.execute();
		StringUtil stringVariable4 = new StringUtil();
		stringVariable4.addExpression(dqProgNameSfx);
		stringVariable4.addExpression("3");
		stringVariable4.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("31");
		ReleaseTemporaryStorage deleteqTs4 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs4.setQueue(dqProgQueue);
		deleteqTs4.setNoHandle(true);
		deleteqTs4.execute();
	}

	/**
	 * Method generated from paragraph Z991-SQL-ERROR.
	 */
	private void z991SqlError() {
		/* : PARAGRAPH TO PROCESS SQL ERRORS : */
		/* : (GENERATED BY $NPS-SQL-ERROR) : */
		/* ROLLBACK THE TRANSACTION */
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* DELETE ANY EXISTING QUEUES */
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS302");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		/* SAVE THE SQLCODE IN THE COMMAREA */
		tpCommareaInner.caSqlcode.set(getAppVars().getSqlErrorCode());
		/* WRITE A MESSAGE TO THE CSMT */
		slSqlca.set(getAppVars().getSqlca());
		slProgId.set("NPS302");
		slCallNumber.set(sqCallNumber);
		tpCommareaInner.caProgramWorkArea.set(slWorkArea);
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(GetSqlErrorMessage.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		tpCommareaInner.caErrorKey.set("9001");
		cicsCallNumber.set("32");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
		link2.setProgram(NPSErrorMessageHandler.class);
		link2.setCommarea(tpCommareaInner.tpCommarea);
		link2.setLength(5620);
		link2.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(2);
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				if (isGT(getCICSContext().getEIB().getTerminalId(), SPACES)) {
					ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
					sendText.setFrom(haMessageArea);
					sendText.setLength(79);
					sendText.setErase(true);
					sendText.setFreekb(true);
					sendText.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				}
				/* ##* Ending: IF EIBTRMID > SPACES... */
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph 99700-ACCESS-ERROR.
	 */
	private void accessError() {
		/* : PARAGRAPH TO PROCESS CICS ERRORS : */
		/* : (GENERATED BY $NPS-ACCESS-ERROR) : */
		/* WRITE A MESSAGE TO THE CSMT */
		clCsmtMsg1Inner.clPgmId1.set("NPS302");
		clCsmtMsg1Inner.clEibrcode.set(getCICSContext().getEIB().getResponseCode());
		msg2Eibfn.set(getCICSContext().getEIB().getLastCommand());
		clCsmtMsg1Inner.clTermid.set(getCICSContext().getEIB().getTerminalId());
		clCsmtMsg1Inner.clUserid.set(tpCommareaInner.caUserid);
		if (isEQ(clErrorflag, "V")) {
			clCsmtMsg1Inner.clErrortype.set(" ** VSAM ERROR ** ");
		} else {
			if (isEQ(clErrorflag, "C")) {
				clCsmtMsg1Inner.clCallNumber.set(cicsCallNumber);
				clCsmtMsg1Inner.clCallLiteral.set("CICS-CALL-NUMBER=");
				clCsmtMsg1Inner.clErrortype.set(" ** CICS ERROR ** ");
			} else {
				if (isEQ(clErrorflag, "M")) {
					clCsmtMsg1Inner.clErrortype.set(" ** COMM ERROR ** ");
				} else {
					if (isEQ(clErrorflag, "T")) {
						clCsmtMsg1Inner.clErrortype.set(" ** TABLE ERROR ** ");
					}
					/* ##* Ending: IF CL-ERRORFLAG = 'T'... */
				}
				/* ##* Ending: IF CL-ERRORFLAG = 'M'... */
			}
			/* ##* Ending: IF CL-ERRORFLAG = 'C'... */
		}
		/* ##* Ending: IF CL-ERRORFLAG = 'V'... */
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		clCsmtMsg1Inner.clTime.set(foTimeScreen);
		/* : === END OF CODE GENERATED BY $NPS-FORMAT-TIME == : */
		/* % SET WRITE-CONTROL */
		/* % BEGIN */
		/* % IF NOT &DEFINED(&WS-DEFINED) */
		/* % &WS-DEFINED = 1 */
		/* $NPS-MORE-MESSAGES-WS */
		/* % SET WORKING-STORAGE */
		/* $Z100-MORE-MSG */
		/* % BEGIN */
		/* MSG2-DATE = CA-TD-SCREEN-DATE */
		msg2Date.set(tpCommareaInner.caTdScreenDate);
		/* MSG2-SVC-UN-NO = CA-SVC-UN-NO */
		msg2SvcUnNo.set(tpCommareaInner.caSvcUnNo);
		/* % SET NOWRITE-CONTROL */
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(clCsmtBlanks);
		writeqTd.setLength(clCsmtBlanksLength);
		writeqTd.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd2 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd2.setQueue("CSMT");
		writeqTd2.setFrom(clCsmtBorder);
		writeqTd2.setLength(clCsmtBorderLength);
		writeqTd2.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd3 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd3.setQueue("CSMT");
		writeqTd3.setFrom(clCsmtMsg1Inner.clCsmtMsg1);
		writeqTd3.setLength(clCsmtMsg1Length);
		writeqTd3.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd4 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd4.setQueue("CSMT");
		writeqTd4.setFrom(csmtMsg2);
		writeqTd4.setLength(csmtMsg2Length);
		writeqTd4.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd5 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd5.setQueue("CSMT");
		writeqTd5.setFrom(clCsmtBorder);
		writeqTd5.setLength(clCsmtBorderLength);
		writeqTd5.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd6 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd6.setQueue("CSMT");
		writeqTd6.setFrom(clCsmtBlanks);
		writeqTd6.setLength(clCsmtBlanksLength);
		writeqTd6.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.caErrorKey.set("9000");
		cicsCallNumber.set("33");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS302");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(6);
			tpCommareaInner.caEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(haMessageArea);
				sendText.setLength(79);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph 99400-FORMAT-TIME.
	 */
	private void formatTime() {
		/* : (GENERATED BY $NPS-FORMAT-TIME) : */
		foTimeNum.set(getCICSContext().getEIB().getTaskTime());
		foScrnHours.set(foHours);
		foScrnMinutes.set(foMinutes);
		foScrnSeconds.set(foSeconds);
	}

	/**
	 * Method generated from paragraph Z100-RIGHT-JUSTIFY.
	 */
	private void z100RightJustify() {
		/* : THIS PARAGRAPH RIGHT JUSTIFYS THE INPUT FIELD : */
		/* : AND ADDS LEADING ZEROS. : */
		/* : THE FIELD IS ALSO VALIDATED TO ENSURE THERE ARE : */
		/* : NO ALPHA CHARACTERS OR EMBEDDED SPACES IN THE : */
		/* : INPUT. : */
		npsRightJustifyErr.set("N");
		npsOutputSub.set(16);
		npsOutput.set(ZERO);
		for (npsInputSub.set(16); !(isEQ(npsInputSub, 0) || isGT(npsInputChar[npsInputSub.toInt()], SPACES)); npsInputSub
		    .add(-1)) {
			/* No processing required. */
		}
		if (isEQ(npsInputSub, 0)) {
			npsRightJustifyErr.set("Y");
		}
		/* ##* Ending: IF NPS-INPUT-SUB = 0... */
		for (npsInputSub.set(npsInputSub); !(isEQ(npsRightJustifyErr, "Y") || isEQ(npsOutputSub, 0)
		        || isEQ(npsInputSub, 0) || isLTE(npsInputChar[npsInputSub.toInt()], SPACES)); npsInputSub.add(-1)) {
			if (isNE(npsInputChar[npsInputSub.toInt()], NUMERIC)) {
				npsRightJustifyErr.set("Y");
			} else {
				npsOutputChar[npsOutputSub.toInt()].set(npsInputChar[npsInputSub.toInt()]);
				compute(npsOutputSub, 0).set(sub(npsOutputSub, 1));
			}
			/* ##* Ending: IF NPS-INPUT-CHAR (NPS-INPUT-SUB) NOT NUMERIC... */
		}
		for (npsInputSub.set(npsInputSub); !(isEQ(npsRightJustifyErr, "Y") || isEQ(npsInputSub, 0)); npsInputSub
		    .add(-1)) {
			if (isGT(npsInputChar[npsInputSub.toInt()], SPACES)) {
				npsRightJustifyErr.set("Y");
			}
			/* ##* Ending: IF NPS-INPUT-CHAR (NPS-INPUT-SUB) > SPACE... */
		}
	}

	/**
	 * Method generated from paragraph Z100-HANDLE-ABEND.
	 */
	private void z100HandleAbend() {
		/* : PARAGRAPH TO CREATE A DUMP : */
		/* : (GENERATED BY $NPS-HANDLE-ABEND) : */
		/* ROLLBACK THE TRANSACTION */
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* DELETE ANY EXISTING QUEUES */
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS302");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		/* WRITE A MESSAGE TO THE CSMT */
		haCsmtMsgInner.haMsgPgm.set("NPS302");
		AssignTransactionDetails assign = CICSCommandFactory.getAssignTransactionDetails(getCICSContext());
		assign.setAbcode(haCsmtMsgInner.haMsgAbendCode);
		assign.execute();
		haCsmtMsgInner.haMsgTermid.set(getCICSContext().getEIB().getTerminalId());
		haCsmtMsgInner.haMsgUserid.set(tpCommareaInner.caUserid);
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		haCsmtMsgInner.haMsgTime.set(foTimeScreen);
		/* : === END OF CODE GENERATED BY $NPS-FORMAT-TIME == : */
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(haCsmtMsgInner.haCsmtMsg);
		writeqTd.setLength(haCsmtMsgInner.haCsmtMsg.getLength());
		writeqTd.execute();
		if (isNE(haCsmtMsgInner.haMsgAbendCode, "AAL1") && isNE(haCsmtMsgInner.haMsgAbendCode, "ABM3")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AEY9") && isNE(haCsmtMsgInner.haMsgAbendCode, "AKCS")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "ATND") && isNE(haCsmtMsgInner.haMsgAbendCode, "ATNI")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AXFX") && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI4")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI6") && isNE(haCsmtMsgInner.haMsgAbendCode, "TX03")) {
			DumpApplication dump = CICSCommandFactory.getDumpApplication(getCICSContext());
			dump.setDumpcode(haCsmtMsgInner.haMsgAbendCode);
			dump.setComplete(true);
			dump.execute();
		}
		/* ##* Ending: IF HA-MSG-ABEND-CODE NOT = 'AAL1' AND... */
		tpCommareaInner.caErrorKey.set("9000");
		cicsCallNumber.set("34");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(4);
			tpCommareaInner.caEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(haMessageArea);
				sendText.setLength(79);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/*
	 * Class transformed from Data Structure TP-COMMAREA_INNER
	 */
	private static final class TpCommareaInner {

		private FixedLengthStringData tpCommarea = new FixedLengthStringData(5620);
		private FixedLengthStringData tpHeader = new FixedLengthStringData(40).isAPartOf(tpCommarea, 0);
		private FixedLengthStringData tpInvocationMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 0);
		private Validator tpTransidInvoked = new Validator(tpInvocationMode, "T");
		private Validator tpProgramInvoked = new Validator(tpInvocationMode, "P");
		private Validator tpScreenInvoked = new Validator(tpInvocationMode, "S");
		private Validator tpLinkInvoked = new Validator(tpInvocationMode, "L");
		private FixedLengthStringData tpPsbScheduledMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 1);
		private Validator tpPsbScheduled = new Validator(tpPsbScheduledMode, "P");
		private BinaryData tpAddrCount = new BinaryData(4, 0).isAPartOf(tpHeader, 2);
		private FixedLengthStringData tpCallingProgramId = new FixedLengthStringData(8).isAPartOf(tpHeader, 4);
		private FixedLengthStringData tpAddrTable = new FixedLengthStringData(80).isAPartOf(tpCommarea, 5540);
		private PointerData[] tpAddr = PtrArrayPartOfStructure(20, tpAddrTable, 0);

		private FixedLengthStringData filler2 = new FixedLengthStringData(5540).isAPartOf(tpCommarea, 0,
		    FILLER_REDEFINE);
		private FixedLengthStringData tpUserarea = new FixedLengthStringData(5500).isAPartOf(filler2, 40);
		private FixedLengthStringData commArea = new FixedLengthStringData(5500).isAPartOf(tpUserarea, 0, REDEFINE);
		/*
		 * NPS CICS COMMAREA FOR APS PROGRAMS * SYSTEM AREA = 120 * APPL COMMAREA = 2400* * TOTAL LENGTH = 2520* * TOTAL
		 * NPJ/NPS COMM-AREA = 5500 * MODIFICATION HISTORY * DATE CHANGED BY DESCRIPTION * 09/07/89 HANSON NG NEW FIELDS
		 * FOR SCT * 09/11/89 LANDOLT ATTACHED NPS (US) COMM-AREA * 10/09/89 HANSON NG ADD TIME & SERVICE LOCATION * -
		 * CA-LOGON-TIME * - CA-ITEM-SVCE-LOCN * 11/15/89 JOHN JEREB - CA-PREV-PGM-INDEX * 12/01/89 JOHN JEREB -
		 * CA-XE-SUP-GROUP * 03/28/90 ANDY SECORD ADDED CA-SO-NO * 03/29/90 SERGEI VARBANOV ADDED EXTRA 2000 BYTES *
		 * 07/23/92 BRECK KUHNKE ADDED CA-SPDE-SVC-UN-FL * 08/29/92 ALKA PATEL ADDED CA-BR-UN-NO * 08/27/02 IDA DOLINSKY
		 * ADDED CA-SVC-OGP-CD * LEVEL 03 07/02/93 ANNETTE STEPHENSON ADDED CA-SAVE-DATA-CNT * 09/22/93 SHEILA BRYANT
		 * ADDED CA-MENU-350-OPTION * 10/12/93 SHEILA BRYANT ADDED CA-BCH-NO (CA-SECTION8)* 09/29/94 SHEILA BRYANT ADDED
		 * CA-CUST-ALT-PHONE & * CA-CUST-CROSS-STREETS & * CA-CUST-APT-NO & * CA-CUST-ADDR-REC-TYPE TO * CA-SECTION9. 69
		 * BYTES TOTAL * FILLER WAS 700 BYTES NOW 630 * 04/28/94 B. ROBERTS ADDED CA-LAST-UNIT-NO * FIX NPS143
		 * PRODUCTION PROB. * 08/17/94 STEVEN GODEE ADDED POINTERS TO COMMON * STORAGE TABLES: CA-NPJ551-PTR* 11/29/94
		 * JOHN COLLINS ADDED CA-PRN-ID TO * CA-FILLER-SEC * 12/15/94 MOIRA CHASELEY ADDED CA-NPS020-OPTION * 01/10/95
		 * R. DYNAKO ADDED CA-AGR-ADJ-CNC-NO * 02/28/95 S. GODEE ADDED CA-MENU-285-OPTION * 04/28/95 M. YAU ADDED
		 * CA-TERMS-FLAG * 05/05/95 J. HUPPERT ADDED CA-CUST-SOURCE * 05/08/95 R. DYNAKO ADDED CA-RESTRICTED-ACCESS *
		 * 09/29/95 J. CORTEZ ADDED CA-CPU-AID-RTE-FL * CA-CPU-AID-RTE-PGM * 10/03/95 I. MARGULIS ADDED CA-SAVE-MU-NO *
		 * 06/20/96 J. CORTEZ ADDED CA-BUSINESS-CD * 07/03/96 M. WELTZER ADDED CA-HOMELIFE-UNIT * IN CA-FILLER-SEC *
		 * 07/30/96 M. SMITH ADDED CA-CUST-STREET-WOUT-APT* 11/05/96 M. YAU ADDED CA-WENT-TO-NPS471 * 01/07/97 J. CASEY
		 * ADDED CA-HOME-SERVICE-FL * 02/14/97 J. CASEY ADDED SECURITY-1-TO-7 * 10/08/97 J. VOGEL ADDED
		 * CA-FRH-RETURN-CODE, * CA-FRH-DIAG-CODE1, AND * VALUE '10' FOR CA-RETURN-CODE* 10/20/97 ALKA PATEL ADDED
		 * CA-MENU-602-OPTION * 10/30/97 ALKA PATEL ADDED CA-SYSID-604 * 04/22/99 T.R. GANESHA ADDED CA-INQUIRY-PA TO *
		 * CA-FILLER-SEC * 05/28/99 J. CASEY ADDED CA-SHOPBLOCK-FL * (REDEFINES CA-WENT-TO-NPS471* WHICH IS SOLELY USED
		 * BY * NPJ4701) * 07/13/99 A.PATEL/K.GILL 150 BYES FOR THIRD PARTY. * 12/21/99 M. HOWELL 30 BYES FOR TELESERV.
		 * * 02/25/99 P. NGUYEN ADDED CA-CRT-SO * 10/23/00 G. Hueneman ADDED CA-ath-py-dt. * 03/13/01 M.K.BALA ADDED
		 * THD-PTY-FLAG FOR GLBA * 06/02/01 J. JSARSFI ADDED 88 LEVEL FOR CA-BR-UN-NO* 01/31/02 C. TORRES ADDED GEOCODE,
		 * COUNTY CODE, * 7 JURISDICTION GLAGS, 3 TAX * FLAGS AND TAX RATE AT THE END * 08/27/02 I. DOLINSKY ADDED
		 * SERVICING ORGANIZATION * 10/02/02 I. DOLINSKY ADDED RACF-ID-ENTERED * 11/22/02 J. SMORYNSKI ADDED CA-OPTION2
		 * * 12/06/02 J. SMORYNSKI ADDED CA-ORI-CD * G. SAVAGE ADDED COMMENT FOR CA-CUST-IND * AND CA-CUST-TYPE. *
		 * 01/14/03 c. torres ADDED CA-CAP-NEEDED FOR DCL * 05/19/03 S. BROWN ADDED CA-EMP-SSN FOR IBO * 06/20/03 C.
		 * TORRES ADDED CA-FORCE-RSN FOR DCL * ADDED CA-NPS114-UN-NO for dcl * 02/12/04 i.Dolinsky Added
		 * ca-nps145-orig-sch-dt * for AE Growth project * 04/13/04 C. TORRES ADDED CA-BUS-ORG-CD * 11/02/04 C. TORRES
		 * ADDED CA-INQ-CMY-CD * 08/03/06 Kasinath Gupta Added Repair location unit no * as part of Call Code 97
		 * changes* 11/22/06 SURESH KAMARAJ ADDED CA-FST-AVL-DT AS PART * OF PROJECT JUMP * 12/26/07 VISWA C ADDED
		 * CA-PM-CHK-CD and adjust * the filler from 423 to 422 as* part of Call Close Project. * SYSTEM WORK AREA * -
		 * COMMON WORKFIELDS * . MENU FUNCTION * . RACF INFO *
		 */
		private FixedLengthStringData caSection1 = new FixedLengthStringData(130).isAPartOf(commArea, 0);
		private FixedLengthStringData caSection1Overlay = new FixedLengthStringData(130).isAPartOf(caSection1, 0,
		    REDEFINE);
		private FixedLengthStringData caTdScreenDate = new FixedLengthStringData(8).isAPartOf(caSection1Overlay, 86);
		/*
		 * ERROR MESSAGES * - ERROR MESSAGE NUMBER TO BE DISPLAYED ON SCREEN * SET IN EACH PROGRAM. * - ERROR MESSAGE TO
		 * CARRY FROM ONE SCREEN TO ANOTHER *
		 */
		private FixedLengthStringData caSection3 = new FixedLengthStringData(100).isAPartOf(commArea, 150);
		private FixedLengthStringData caSection3Overlay = new FixedLengthStringData(100).isAPartOf(caSection3, 0,
		    REDEFINE);
		private BinaryData caReturnCode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 0);
		/*
		 * 0 - SUCCESSFUL 2 - SQL ERROR 4 - CICS ABEND 6 - CICS ERROR 8 - PRINT PROBLEM 10 - FUNCTION ROUTER ERROR
		 * (DATASTREAM ERROR)
		 */
		private FixedLengthStringData caEibrcode = new FixedLengthStringData(6).isAPartOf(caSection3Overlay, 2);
		private BinaryData caSqlcode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 8);
		/* P R O G R A M W O R K A R E A * */
		private FixedLengthStringData caSection4 = new FixedLengthStringData(40).isAPartOf(commArea, 250);
		private FixedLengthStringData caSection4Overlay = new FixedLengthStringData(40).isAPartOf(caSection4, 0,
		    REDEFINE);
		private FixedLengthStringData caCurrPgmName = new FixedLengthStringData(8).isAPartOf(caSection4Overlay, 0);
		/*
		 * P R O G R A M C O N T R O L * . CONTAINS THE LOCATION IN THE STACK OF THE CURRENT TASK 1 PGM. . CHANGED BY
		 * EACH PROGRAM PRIOR TO TRANSFERING TO ANOTHER PROGRAM AND BY PF3 AND PF12 STUBS. . KEEP TRACK OF PROGRAMS UP
		 * TO 13 LEVELS. PGM-INDEX - CURRENT INDEX (MUST BE INCREMENTED BY 1 ON XCTL) STACK LEVEL - SET BY TASK 1 OF
		 * EACH PROGRAM. USED TO DETERMINE WHERE PROGRAM WILL RETURN TO FOR PF3 OR PF12 'X' EXIT POINT - 'R' RETURN
		 * POINT - BY-PASSED BY PF3 OPT-SEL - SELECTION ENTERED BY USER ON SCREEN. USED BETWEEN TRANSACTIONS FOR
		 * PROCESSING WHICH DEPENDS ON OPTION ENTERED ON PREVIOUS SCREEN PGM-NAME - PROGRAM NAME FOR PF3/PF12 TRANSFER
		 * CONTROL UPDATED IN TASK 2 OF EACH TRANSACTION.
		 */
		private FixedLengthStringData caSection5 = new FixedLengthStringData(260).isAPartOf(commArea, 290);
		private FixedLengthStringData caSection5Overlay = new FixedLengthStringData(260).isAPartOf(caSection5, 0,
		    REDEFINE);
		private BinaryData caCurrPgmIndex = new BinaryData(4, 0).isAPartOf(caSection5Overlay, 0);
		private FixedLengthStringData[] caPgmStack = FLSArrayPartOfStructure(13, 19, caSection5Overlay, 2);
		private FixedLengthStringData[] caPgmStackLevel = FLSDArrayPartOfArrayStructure(1, caPgmStack, 0);
		private FixedLengthStringData[] caPgmStackPgmName = FLSDArrayPartOfArrayStructure(8, caPgmStack, 3);
		/*
		 * APPLICATION PROGRAM WORK AREA * NOTE - THIS IS A PUBLIC AREA. * ## ADDED 1000 EXTRA BYTES *
		 */
		private FixedLengthStringData caSection7 = new FixedLengthStringData(2000).isAPartOf(commArea, 580);
		private FixedLengthStringData caSection7Overlay1 = new FixedLengthStringData(2000).isAPartOf(caSection7, 0,
		    REDEFINE);
		private FixedLengthStringData caProgramWorkArea = new FixedLengthStringData(2000).isAPartOf(caSection7Overlay1,
		    0);
		/*
		 * EXTRA FILLER PER NPJ REQUEST ##*** COMMUNICATION AREA - NPS SERVICE FOUNDATION *** ##** LENGTH OF
		 * COMMUNICATION AREA = 925 BYTES. ** ##* MISC INFORMATION *
		 */
		private FixedLengthStringData caMiscSec = new FixedLengthStringData(284).isAPartOf(commArea, 4075);
		private FixedLengthStringData caMiscSecOverlay = new FixedLengthStringData(284).isAPartOf(caMiscSec, 0,
		    REDEFINE);
		private FixedLengthStringData caOption = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 0);
		/* MENU OPTION ATTRIBUTE BYTE 1 */
		private FixedLengthStringData caMsg = new FixedLengthStringData(79).isAPartOf(caMiscSecOverlay, 2);
		/* MESSAGE LINE 1 */
		private FixedLengthStringData caMsg2 = new FixedLengthStringData(79).isAPartOf(caMiscSecOverlay, 81);
		/* MESSAGE LINE 2 */
		private FixedLengthStringData caUserid = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 160);
		/* SERVICE EMPLOYEE'S ID (USED FOR SQL CALLS) */
		private FixedLengthStringData caLogonUnNo = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 174);
		/* INDUSTRY CODE */
		private FixedLengthStringData caSvcUnNo = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 227);
		/*
		 * SERVICE ORDER TYPE - OTC, QUICK, ONSITE, HI-TECH, & SRS
		 */
		private FixedLengthStringData caActionCd = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 273);
		private Validator caAdd = new Validator(caActionCd, "A");
		private Validator caInquiry = new Validator(caActionCd, "I");
		private Validator caUpdate = new Validator(caActionCd, "U");
		private Validator caDelete = new Validator(caActionCd, "D");
		private Validator caReinstate = new Validator(caActionCd, "R");
		/* ACTION CODE */
		private FixedLengthStringData caQueryNo = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 274);
		private Validator caNameEmpidSsnEntered = new Validator(caQueryNo, "1");
		private Validator caNameEmpidEntered = new Validator(caQueryNo, "2");
		private Validator caNameSsnEntered = new Validator(caQueryNo, "3");
		private Validator caEmpidSsnEntered = new Validator(caQueryNo, "4");
		private Validator caNameEntered = new Validator(caQueryNo, "5");
		private Validator caEmpidEntered = new Validator(caQueryNo, "6");
		private Validator caSsnEntered = new Validator(caQueryNo, "7");
		private Validator caViewEmployees = new Validator(caQueryNo, "8");
		private Validator caRacfIdEntered = new Validator(caQueryNo, "9");
		/* ##* ERROR MESSAGE * */
		private FixedLengthStringData caErrorSec = new FixedLengthStringData(79).isAPartOf(commArea, 4359);
		private FixedLengthStringData caErrorSecOverlay = new FixedLengthStringData(79).isAPartOf(caErrorSec, 0,
		    REDEFINE);
		private FixedLengthStringData caErrorMsg = new FixedLengthStringData(79).isAPartOf(caErrorSecOverlay, 0);
		private FixedLengthStringData caErrorKey = new FixedLengthStringData(4).isAPartOf(caErrorMsg, 0);
		/*
		 * HELP KEY FOR VSAM READING & UPDATES ##* NPS SYSTEM SECURITY LEVELS *
		 */
		private FixedLengthStringData caSecuritySec = new FixedLengthStringData(1).isAPartOf(commArea, 4515);
		private FixedLengthStringData caSecuritySecOverlay = new FixedLengthStringData(1).isAPartOf(caSecuritySec, 0,
		    REDEFINE);
		private FixedLengthStringData caSecurityLvl = new FixedLengthStringData(1).isAPartOf(caSecuritySecOverlay, 0);
		private Validator userFromUnit = new Validator(caSecurityLvl, "1", "2", "3");
		private Validator userFromUnit1 = new Validator(caSecurityLvl, "1");
		private Validator userFromUnit2 = new Validator(caSecurityLvl, "2");
		private Validator userFromUnit3 = new Validator(caSecurityLvl, "3");
		private Validator userFromRegion = new Validator(caSecurityLvl, "4", "5");
		private Validator userFromRegion1 = new Validator(caSecurityLvl, "4");
		private Validator userFromRegion2 = new Validator(caSecurityLvl, "5");
		private Validator userFromHq = new Validator(caSecurityLvl, "6");
		private Validator userFromSco = new Validator(caSecurityLvl, "7");
		private Validator security1To7 = new Validator(caSecurityLvl, new ValueRange("1", "7"));
		/* ##* SWITCHES AND FLAGS * */
		private FixedLengthStringData caSwFlagSec = new FixedLengthStringData(10).isAPartOf(commArea, 4547);
		private FixedLengthStringData caSwFlagOverlay = new FixedLengthStringData(10).isAPartOf(caSwFlagSec, 0,
		    REDEFINE);
		/* FLAGS */
		private FixedLengthStringData caWorkAreaPresentFlag = new FixedLengthStringData(1)
		    .isAPartOf(caSwFlagOverlay, 1);
		private Validator caWorkAreaInOtherTbl = new Validator(caWorkAreaPresentFlag, "Y");
		private FixedLengthStringData caErrorFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 2);
		private Validator outstandingError = new Validator(caErrorFlag, "Y");
		private FixedLengthStringData caEndOfDataFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 3);
		private Validator caEndOfData = new Validator(caEndOfDataFlag, "Y");
		private Validator endOfData = new Validator(caEndOfDataFlag, "Y");
		/* END-OF-DATA INDICATOR */
		private FixedLengthStringData caSaveFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 4);
		private Validator caSavedFromLastScreen = new Validator(caSaveFlag, "Y");
		/*
		 * ##* COMMUNICATION AREA FILLER * ##* ## ADDED 500 BYTES TO THE FILLER *
		 */
		private FixedLengthStringData caFillerSec = new FixedLengthStringData(943).isAPartOf(commArea, 4557);
		private FixedLengthStringData caFillerOverlay = new FixedLengthStringData(941).isAPartOf(caFillerSec, 0,
		    REDEFINE);
		private FixedLengthStringData caBrUnNo = new FixedLengthStringData(7).isAPartOf(caFillerOverlay, 12);
		private Validator validItronixUser = new Validator(caBrUnNo, "PD86   ");
		/* ADDED SPDE UNIT INDICATOR FLAG */
		private FixedLengthStringData caSpdeSvcUnFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 19);
		private Validator spdeUnit = new Validator(caSpdeSvcUnFl, "Y", "M");
		private Validator spdeMsgsWtg = new Validator(caSpdeSvcUnFl, "M");
		/* Used for EMP REF capture NPS100 */
		private FixedLengthStringData caThdPtyFlag = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 433);
		private Validator thdPty = new Validator(caThdPtyFlag, "Y", "F");
		private Validator notThdPty = new Validator(caThdPtyFlag, "N");
		/* ORIGINATION CODE */
		private FixedLengthStringData caCamsFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 474);
		private Validator camsParallel = new Validator(caCamsFl, "1");
		private Validator camsPilot = new Validator(caCamsFl, "2");
		private Validator nonCams = new Validator(caCamsFl, " ");
	}

	/*
	 * Class transformed from Data Structure WORK-FIELDS_INNER
	 */
	private static final class WorkFieldsInner {

		/*
		 * WORK-FIELDS GF-04
		 */
		private PackedDecimalData workTime = new PackedDecimalData(15, 0).setUnsigned();
		private BinaryData hex80 = new BinaryData(4, 0).init(128);

		private FixedLengthStringData hex80Redefined = new FixedLengthStringData(2).isAPartOf(hex80, 0, REDEFINE);
		private FixedLengthStringData eraseEofInd = new FixedLengthStringData(1).isAPartOf(hex80Redefined, 1);
		private ZonedDecimalData wsRightJustify = new ZonedDecimalData(7, 0).setUnsigned();
		private FixedLengthStringData wsErrorCode = new FixedLengthStringData(4);
		private FixedLengthStringData wsRegion = new FixedLengthStringData(7);
		private FixedLengthStringData wsUnitNumber = new FixedLengthStringData(7);
		private FixedLengthStringData wsCallingPgm = new FixedLengthStringData(6).init(SPACES);
		/* GF-04 */
		private FixedLengthStringData wsTransactionId = new FixedLengthStringData(6).init("TRANID");

		private FixedLengthStringData wsXctlPgm = new FixedLengthStringData(8);
		private FixedLengthStringData wsXctlSysId = new FixedLengthStringData(3).isAPartOf(wsXctlPgm, 0);
		/* GF-04 */
		private BinaryData wsCicsCallLen = new BinaryData(4, 0);

		/* ##LH-08 START */
		private FixedLengthStringData wsConvertedToCamsFl = new FixedLengthStringData(1);
		private Validator convertedToCams = new Validator(wsConvertedToCamsFl, "Y");
		private Validator convertedToHals = new Validator(wsConvertedToCamsFl, "H");
	}

	/*
	 * Class transformed from Data Structure HA-CSMT-MSG_INNER
	 */
	private static final class HaCsmtMsgInner {

		private FixedLengthStringData haCsmtMsg = new FixedLengthStringData(99);
		private FixedLengthStringData haMsgPgm = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(haCsmtMsg, 6, FILLER)
		    .init(SPACES);
		private FixedLengthStringData filler1 = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 7, FILLER).init(
		    "E 0500");
		private FixedLengthStringData filler2 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 13, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler3 = new FixedLengthStringData(19).isAPartOf(haCsmtMsg, 15, FILLER).init(
		    "** PROGRAM ABEND **");
		private FixedLengthStringData filler4 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 34, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler5 = new FixedLengthStringData(13).isAPartOf(haCsmtMsg, 36, FILLER).init(
		    "ABEND CODE = ");
		private FixedLengthStringData haMsgAbendCode = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 49);
		private FixedLengthStringData filler6 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 53, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler7 = new FixedLengthStringData(7).isAPartOf(haCsmtMsg, 55, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData haMsgTermid = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 62);
		private FixedLengthStringData filler8 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 66, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler9 = new FixedLengthStringData(5).isAPartOf(haCsmtMsg, 68, FILLER).init(
		    "TIME=");
		private FixedLengthStringData haMsgTime = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 73);
		private FixedLengthStringData filler10 = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 81, FILLER).init(
		    " USERID=");
		private FixedLengthStringData haMsgUserid = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 89);
		private FixedLengthStringData filler11 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 97, FILLER).init(
		    SPACES);
	}

	/*
	 * Class transformed from Data Structure CL-CSMT-MSG1_INNER
	 */
	private static final class ClCsmtMsg1Inner {

		private FixedLengthStringData clCsmtMsg1 = new FixedLengthStringData(129);
		private FixedLengthStringData clPgmId1 = new FixedLengthStringData(6).isAPartOf(clCsmtMsg1, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 6, FILLER)
		    .init(" E ");
		private FixedLengthStringData filler1 = new FixedLengthStringData(5).isAPartOf(clCsmtMsg1, 9, FILLER).init(
		    "0500 ");
		private FixedLengthStringData clErrortype = new FixedLengthStringData(18).isAPartOf(clCsmtMsg1, 14);
		private FixedLengthStringData filler2 = new FixedLengthStringData(9).isAPartOf(clCsmtMsg1, 32, FILLER).init(
		    "EIBRCODE=");
		private FixedLengthStringData clEibrcode = new FixedLengthStringData(6).isAPartOf(clCsmtMsg1, 41);
		private FixedLengthStringData filler3 = new FixedLengthStringData(1).isAPartOf(clCsmtMsg1, 47, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler4 = new FixedLengthStringData(7).isAPartOf(clCsmtMsg1, 48, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData clTermid = new FixedLengthStringData(4).isAPartOf(clCsmtMsg1, 55);
		private FixedLengthStringData filler5 = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 59, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler6 = new FixedLengthStringData(5).isAPartOf(clCsmtMsg1, 62, FILLER).init(
		    "TIME=");
		private FixedLengthStringData clTime = new FixedLengthStringData(8).isAPartOf(clCsmtMsg1, 67);
		private FixedLengthStringData filler7 = new FixedLengthStringData(10).isAPartOf(clCsmtMsg1, 75, FILLER).init(
		    " USERID=  ");
		private FixedLengthStringData clUserid = new FixedLengthStringData(8).isAPartOf(clCsmtMsg1, 85);
		private FixedLengthStringData filler8 = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 93, FILLER).init(
		    SPACES);
		private FixedLengthStringData clCallLiteral = new FixedLengthStringData(17).isAPartOf(clCsmtMsg1, 96).init(
		    SPACES);
		private ZonedDecimalData clCallNumber = new ZonedDecimalData(4, 0).isAPartOf(clCsmtMsg1, 113)
		    .setPattern("ZZZZ").setBlankWhenZero();
		private FixedLengthStringData filler9 = new FixedLengthStringData(12).isAPartOf(clCsmtMsg1, 117, FILLER).init(
		    SPACES);
	}

	/*
	 * Class transformed from Data Structure NPS302-FILLER-RECORD_INNER
	 */
	private static final class Nps302FillerRecordInner {

		/*
		 * APS-GENERATED SCREEN RECORD: NPS302 *** LENGTH: 202 ***
		 */
		private FixedLengthStringData nps302FillerRecord = new FixedLengthStringData(202).init(LOVALUES);

		private FixedLengthStringData nps302Record = new FixedLengthStringData(202).isAPartOf(nps302FillerRecord, 0,
		    REDEFINE);
		private FixedLengthStringData scaNps302PgmLevel = new FixedLengthStringData(3).isAPartOf(nps302Record, 12);
		private BinaryData nps302PgmLevelLength = new BinaryData(4, 0).isAPartOf(scaNps302PgmLevel, 0);
		private FixedLengthStringData nps302PgmLevelAttr = new FixedLengthStringData(1).isAPartOf(scaNps302PgmLevel, 2);
		private FixedLengthStringData nps302PgmLevel = new FixedLengthStringData(2).isAPartOf(nps302Record, 15);
		private FixedLengthStringData scaNps302TdScreenDate = new FixedLengthStringData(3).isAPartOf(nps302Record, 17);
		private BinaryData nps302TdScreenDateLength = new BinaryData(4, 0).isAPartOf(scaNps302TdScreenDate, 0);
		private FixedLengthStringData nps302TdScreenDateAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps302TdScreenDate, 2);
		private FixedLengthStringData nps302TdScreenDate = new FixedLengthStringData(8).isAPartOf(nps302Record, 20);
		private FixedLengthStringData scaNps302SvcUnNo = new FixedLengthStringData(3).isAPartOf(nps302Record, 28);
		private BinaryData nps302SvcUnNoLength = new BinaryData(4, 0).isAPartOf(scaNps302SvcUnNo, 0);
		private FixedLengthStringData nps302SvcUnNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps302SvcUnNo, 2);
		private FixedLengthStringData nps302SvcUnNo = new FixedLengthStringData(7).isAPartOf(nps302Record, 31);
		private FixedLengthStringData scaNps302Msg = new FixedLengthStringData(3).isAPartOf(nps302Record, 38);
		private BinaryData nps302MsgLength = new BinaryData(4, 0).isAPartOf(scaNps302Msg, 0);
		private FixedLengthStringData nps302MsgAttr = new FixedLengthStringData(1).isAPartOf(scaNps302Msg, 2);
		private FixedLengthStringData nps302Msg = new FixedLengthStringData(79).isAPartOf(nps302Record, 41);
		private FixedLengthStringData scaNps302Msg2 = new FixedLengthStringData(3).isAPartOf(nps302Record, 120);
		private BinaryData nps302Msg2Length = new BinaryData(4, 0).isAPartOf(scaNps302Msg2, 0);
		private FixedLengthStringData nps302Msg2Attr = new FixedLengthStringData(1).isAPartOf(scaNps302Msg2, 2);
		private FixedLengthStringData nps302Msg2 = new FixedLengthStringData(79).isAPartOf(nps302Record, 123);
	}

	/*
	 * Class transformed from Data Structure APS-EIBFN-EIBRCODE_INNER
	 */
	private static final class ApsEibfnEibrcodeInner {

		/* APS-GENERATED EIBRCODE STRUCTURE *** */
		private FixedLengthStringData apsEibfnEibrcode = new FixedLengthStringData(7);
		private FixedLengthStringData apsEibfn = new FixedLengthStringData(1).isAPartOf(apsEibfnEibrcode, 0);
		private FixedLengthStringData apsEibrcode = new FixedLengthStringData(6).isAPartOf(apsEibfnEibrcode, 1);

		private FixedLengthStringData filler = new FixedLengthStringData(7).isAPartOf(apsEibfnEibrcode, 0,
		    FILLER_REDEFINE);
		private BinaryData apsEibfnEibrcodeX = new BinaryData(4, 0).isAPartOf(filler, 0);
		private Validator cbiderr = new Validator(apsEibfnEibrcodeX, +1259);
		private Validator disabled = new Validator(apsEibfnEibrcodeX, +1549);
		private Validator dsiderr = new Validator(apsEibfnEibrcodeX, +1537);
		private Validator dsstat = new Validator(apsEibfnEibrcodeX, +7684);
		private Validator dupkey = new Validator(apsEibfnEibrcodeX, +1668);
		private Validator duprec = new Validator(apsEibfnEibrcodeX, +1666);
		private Validator enddata = new Validator(apsEibfnEibrcodeX, +4097);
		private Validator endfile = new Validator(apsEibfnEibrcodeX, +1551);
		private Validator endinpt = new Validator(apsEibfnEibrcodeX, +1218);
		private Validator enqbusy = new Validator(apsEibfnEibrcodeX, +4658);
		private Validator envdeferr = new Validator(apsEibfnEibrcodeX, +4329);
		private Validator eods = new Validator(apsEibfnEibrcodeX, +1040);
		private Validator eof = new Validator(apsEibfnEibrcodeX, +1028, +1217);
		private Validator expired = new Validator(apsEibfnEibrcodeX, +4128);
		private Validator funcerr = new Validator(apsEibfnEibrcodeX, +7688);
		private Validator igreqcd = new Validator(apsEibfnEibrcodeX, +1258);
		private Validator illogic = new Validator(apsEibfnEibrcodeX, +1538);
		private Validator inverrterm = new Validator(apsEibfnEibrcodeX, +6176);
		private Validator invmpsz = new Validator(apsEibfnEibrcodeX, +6152);
		private Validator invreq = new Validator(apsEibfnEibrcodeX, +736, +1248, +1544, +2592, +3808, +4351, +4832,
		    +5122, +6145, +6880);
		private Validator invtsreq = new Validator(apsEibfnEibrcodeX, +4116);
		private Validator ioerr = new Validator(apsEibfnEibrcodeX, +1664, +2052, +2564, +4100, +5127);
		private Validator iscinvreq = new Validator(apsEibfnEibrcodeX, +1745, +2257, +2769, +4305);
		private Validator itemerr = new Validator(apsEibfnEibrcodeX, +2561);
		private Validator jiderr = new Validator(apsEibfnEibrcodeX, +5121);
		private Validator lengerr = new Validator(apsEibfnEibrcodeX, +1249, +1761, +2273, +2785, +3297, +4321, +5126,
		    +6369, +7905);
		private Validator mapfail = new Validator(apsEibfnEibrcodeX, +6148);
		private Validator nojbufsp = new Validator(apsEibfnEibrcodeX, +5129);
		private Validator nopassbkrd = new Validator(apsEibfnEibrcodeX, +1255);
		private Validator nopassbkwr = new Validator(apsEibfnEibrcodeX, +1256);
		private Validator nospace = new Validator(apsEibfnEibrcodeX, +1667, +2064, +2568);
		private Validator nostg = new Validator(apsEibfnEibrcodeX, +3298);
		private Validator notalloc = new Validator(apsEibfnEibrcodeX, +1237);
		private Validator notfnd = new Validator(apsEibfnEibrcodeX, +1665, +4225);
		private Validator notopen = new Validator(apsEibfnEibrcodeX, +1548, +2056, +5125);
		private Validator pgmiderr = new Validator(apsEibfnEibrcodeX, +3585);
		private Validator qbusy = new Validator(apsEibfnEibrcodeX, +2240);
		private Validator qiderr = new Validator(apsEibfnEibrcodeX, +2050, +2562);
		private Validator qzero = new Validator(apsEibfnEibrcodeX, +2049);
		private Validator rdatt = new Validator(apsEibfnEibrcodeX, +1252, +6372);
		private Validator retpage = new Validator(apsEibfnEibrcodeX, +6146);
		private Validator rtefail = new Validator(apsEibfnEibrcodeX, +6272);
		private Validator rtesome = new Validator(apsEibfnEibrcodeX, +6208);
		private Validator segiderr = new Validator(apsEibfnEibrcodeX, +1540);
		private Validator selnerr = new Validator(apsEibfnEibrcodeX, +7692);
		private Validator sessbusy = new Validator(apsEibfnEibrcodeX, +1236);
		private Validator sessionerr = new Validator(apsEibfnEibrcodeX, +1234);
		private Validator signal = new Validator(apsEibfnEibrcodeX, +1253);
		private Validator sysbusy = new Validator(apsEibfnEibrcodeX, +1235);
		private Validator sysiderr = new Validator(apsEibfnEibrcodeX, +1232, +1744, +2256, +2768, +4304);
		private Validator termiderr = new Validator(apsEibfnEibrcodeX, +1254, +4114);
		private Validator transiderr = new Validator(apsEibfnEibrcodeX, +4113);
		private Validator unexpin = new Validator(apsEibfnEibrcodeX, +7696);
		private Validator wrbrk = new Validator(apsEibfnEibrcodeX, +1251, +6371);
		private Validator errorFound = new Validator(apsEibfnEibrcodeX, +1259, +1537, +7684, +1668, +1666, +4097,
		    +1551, +1218, +4658, +4329, +1040, +1028, +1217, +4128, +7688, +1258, +1538, +6176, +6152, +736, +1248,
		    +1544, +2592, +3808, +4351, +4832, +5122, +6145, +6880, +4116, +1664, +2052, +2564, +4100, +5127, +1745,
		    +2257, +2769, +4305, +2561, +5121, +1249, +1761, +2273, +2785, +3297, +4321, +5126, +6369, +7905, +6148,
		    +5129, +1255, +1256, +1667, +2064, +2568, +3298, +1237, +1665, +4225, +1548, +2056, +5125, +3585, +2240,
		    +2050, +2562, +2049, +1252, +6372, +6146, +6272, +6208, +1540, +7692, +1236, +1234, +1253, +1235, +1232,
		    +1744, +2256, +2768, +4304, +1254, +4114, +4113, +7696, +1251, +6371);
	}

	/*
	 * Class transformed from Data Structure PFKEY-FIELD-GRP_INNER
	 */
	private static final class PfkeyFieldGrpInner {

		/* APS-GENERATED PFKEY STRUCTURE *** */
		private FixedLengthStringData pfkeyFieldGrp = new FixedLengthStringData(2);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 0, FILLER).init(
		    LOVALUES);
		private FixedLengthStringData pfkeyField = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 1);
		private Validator enterKey = new Validator(pfkeyField, QUOTES);
		private Validator clearKey = new Validator(pfkeyField, "_");
		private Validator pen = new Validator(pfkeyField, "=");
		private Validator opid = new Validator(pfkeyField, "W");
		private Validator msre = new Validator(pfkeyField, "X");
		private Validator strf = new Validator(pfkeyField, "H");
		private Validator trig = new Validator(pfkeyField, "\"");
		private Validator pa1 = new Validator(pfkeyField, "%");
		private Validator pa2 = new Validator(pfkeyField, ">");
		private Validator pa3 = new Validator(pfkeyField, ",");
		private Validator pf0 = new Validator(pfkeyField, QUOTES);
		private Validator pf00 = new Validator(pfkeyField, QUOTES);
		private Validator pf1 = new Validator(pfkeyField, "1");
		private Validator pf01 = new Validator(pfkeyField, "1");
		private Validator pf2 = new Validator(pfkeyField, "2");
		private Validator pf02 = new Validator(pfkeyField, "2");
		private Validator pf3 = new Validator(pfkeyField, "3");
		private Validator pf03 = new Validator(pfkeyField, "3");
		private Validator pf4 = new Validator(pfkeyField, "4");
		private Validator pf04 = new Validator(pfkeyField, "4");
		private Validator pf5 = new Validator(pfkeyField, "5");
		private Validator pf05 = new Validator(pfkeyField, "5");
		private Validator pf6 = new Validator(pfkeyField, "6");
		private Validator pf06 = new Validator(pfkeyField, "6");
		private Validator pf7 = new Validator(pfkeyField, "7");
		private Validator pf07 = new Validator(pfkeyField, "7");
		private Validator pf8 = new Validator(pfkeyField, "8");
		private Validator pf08 = new Validator(pfkeyField, "8");
		private Validator pf9 = new Validator(pfkeyField, "9");
		private Validator pf09 = new Validator(pfkeyField, "9");
		private Validator pf10 = new Validator(pfkeyField, ":");
		private Validator pf11 = new Validator(pfkeyField, "#");
		private Validator pf12 = new Validator(pfkeyField, "@");
		private Validator pf13 = new Validator(pfkeyField, "A");
		private Validator pf14 = new Validator(pfkeyField, "B");
		private Validator pf15 = new Validator(pfkeyField, "C");
		private Validator pf16 = new Validator(pfkeyField, "D");
		private Validator pf17 = new Validator(pfkeyField, "E");
		private Validator pf18 = new Validator(pfkeyField, "F");
		private Validator pf19 = new Validator(pfkeyField, "G");
		private Validator pf20 = new Validator(pfkeyField, "H");
		private Validator pf21 = new Validator(pfkeyField, "I");
		private Validator pf23 = new Validator(pfkeyField, ".");
		private Validator pf24 = new Validator(pfkeyField, "<");

		private FixedLengthStringData pfkeyFieldPf22 = new FixedLengthStringData(2).isAPartOf(pfkeyFieldGrp, 0,
		    REDEFINE);
		private BinaryData apsPf22 = new BinaryData(4, 0).isAPartOf(pfkeyFieldPf22, 0);
		private Validator pf22 = new Validator(apsPf22, +74);
	}

	/*
	 * Class transformed from Data Structure APS-SCREEN-ATTRIBUTES_INNER
	 */
	private static final class ApsScreenAttributesInner {

		/* APS-SCREEN-ATTRIBUTES */
		private ZonedDecimalData tpPositionCursor = new ZonedDecimalData(4, 0).init(-1);
		private BinaryData tpAttrPnfffX = new BinaryData(4, 0).init(224);
		private BinaryData tpAttrUbfftX = new BinaryData(4, 0).init(200);

		private FixedLengthStringData tpAttrUbfftY = new FixedLengthStringData(2).isAPartOf(tpAttrUbfftX, 0, REDEFINE);
		private FixedLengthStringData tpAttrUbfft = new FixedLengthStringData(1).isAPartOf(tpAttrUbfftY, 1);
		private BinaryData tpAttrUnfffX = new BinaryData(4, 0).init(192);

		private FixedLengthStringData tpAttrUnfffY = new FixedLengthStringData(2).isAPartOf(tpAttrUnfffX, 0, REDEFINE);
		private FixedLengthStringData tpAttrUnfff = new FixedLengthStringData(1).isAPartOf(tpAttrUnfffY, 1);
		private BinaryData tpAttrPbfffX = new BinaryData(4, 0).init(232);
	}
}
