/*
 * Generation Date: 21 November 2011 8:57:26 PM
 * Generated by:     CSC
 * Generated from:  NPS031.CBL
 * 
 * Copyright 2011 CSC, all rights reserved.
 * 
 * This software is the proprietary information of CSC.
 * Use is subject to license terms.
 */
package com.sears.processing.code;

import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER;
import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER_REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSDArrayPartOfArrayStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.LOVALUES;
import static com.quipoz.COBOLFramework.COBOLFunctions.PtrArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.QUOTES;
import static com.quipoz.COBOLFramework.COBOLFunctions.REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.SPACES;
import static com.quipoz.COBOLFramework.COBOLFunctions.isEQ;
import static com.quipoz.COBOLFramework.COBOLFunctions.isGTE;
import static com.quipoz.COBOLFramework.COBOLFunctions.isNE;
import static com.quipoz.COBOLFramework.COBOLFunctions.setAddressToAddress;

import com.csc.qre.cics.command.CICSCommandFactory;
import com.csc.qre.cics.command.CICSCondition;
import com.csc.qre.cics.command.impl.IgnoreCondition;
import com.csc.qre.cics.command.impl.LinkProgram;
import com.csc.qre.cics.command.impl.ReturnControl;
import com.csc.qre.cics.command.impl.WriteTransientStorage;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendText;
import com.csc.qre.cics.util.CICSNonConvCodeModel;
import com.quipoz.COBOLFramework.datatype.Validator;
import com.quipoz.COBOLFramework.datatype.ValueRange;
import com.quipoz.COBOLFramework.util.COBOLExitProgramException;
import com.quipoz.framework.datatype.BinaryData;
import com.quipoz.framework.datatype.FixedLengthStringData;
import com.quipoz.framework.datatype.IntegerData;
import com.quipoz.framework.datatype.PointerData;
import com.quipoz.framework.datatype.ZonedDecimalData;

/**
 * <pre>
 * ***************************************************************   687000
 *        THE PURPOSE OF THIS MACRO IS TO ALLOW US TO            *   688000
 *        SET THE INITIAL PREFIX OF OUR DB2 TABLES OR            *   689000
 *        VIEWS AT COMPILE TIME WITHOUT HAVING TO                *   690000
 *        ACTUALLY CHANGE THE CODE.  INSTEAD, WE WILL            *   691000
 *        CHANGE THE MACRO THAT IS REFERENCED UNDER USERMAC      *   692000
 *        ON THE APS GENERATOR PANEL.                            *   693000
 *                                                               *   694000
 *        TO USE THIS MACRO, MAKE SURE THAT YOU CODE YOUR SQL    *   695000
 *        STATEMENTS TO CALL A TABLE '&TABLE-PREFIX.XX...'       *   696000
 *        INSTEAD OF HARDCODING THE SPECIFIC TABLENAME YOU MAY   *   697000
 *        BE TESTING WITH.                                       *   698000
 *                                                               *   699000
 * ***************************************************************   700000
 * ***************************************************************   701101
 *  USE THIS PREFIX FOR HMIS SOURCE TABLES                           702001
 * ***************************************************************   702101
 * AUTHOR.                         NPS TEAM.
 * DATE-WRITTEN.                   11/11/04.
 * DATE-COMPILED.                  04 NOV 11 05.19.00.
 * REMARKS.
 * 
 *     ************************************************************* G
 *     *                                                           * G00020
 *     *               SYSTEM NAME                                 * G00030
 *     *               -----------                                 * G00040
 *     *                                                           * G00050
 *     * PROGRAM NAME AND LEVEL                                    * G00060
 *     * ----------------------                                    * G00070
 *     *   NPS031 - GET SQL ERROR MESSAGE                          * G00080
 *     *                                                           * G00090
 *     * PROGRAM BRIEF                                             * G00100
 *     * -------------                                             * G00110
 *     *   THIS PROGRAM GETS THE SQL ERROR MESSAGE USING DSNTIAR.  * G00120
 *     *   THIS PROGRAM IS CALLED FROM $NPS-DB2-ACTIV-CHECK MACRO  * G00130
 *     *                                                           * G00170
 *     *   THIS PROGRAM HAS NO TRANSID.                            * G00180
 *     *                                                           * G00190
 *     * INTERFACES                                                * G00200
 *     * ----------                                                * G00210
 *     *   NONE                                                    * G00220
 *     *                                                           * G00230
 *     * INPUT                                                     * G00240
 *     * -----                                                     * G00250
 *     *   COMMAREA                                                * G00260
 *     *                                                           * G00270
 *     * OUTPUT                                                    * G00280
 *     * ------                                                    * G00290
 *     *   COMMAREA                                                * G00300
 *     *                                                           * G00310
 *     * PROCEDURE NAME                                            * G00320
 *     * --------------                                            * G00330
 *     *   ON-LINE PROGRAM                                         * G00340
 *     *                                                           * G00350
 *     * CALLED PROGRAMS                                           * G00360
 *     * ---------------                                           * G00370
 *     *   DSNTIAR - DB2 SQL ERROR MESSAGE PROGRAM                 * G00380
 *     *                                                           * G00390
 *     * CALLING PROGRAM                                           * G00400
 *     * ---------------                                           * G00410
 *     *                                                           * G00420
 *     *                                                           * G00430
 *     * SPECIAL CONSIDERATIONS                                    * G00440
 *     * ----------------------                                    * G00450
 *     *   PROGRAM MUST BE RECOMPILED FOR EVERY PRODUCTION RELEASE * G00460
 *     *   OF DB2 TO BRING IN THE CURRENT VERSION OF DSNTIAR       * G00480
 *     *                                                           * G00481
 *     * MESSAGES                                                  * G00490
 *     * --------                                                  * G00500
 *     *   0007  XXXXXX CANNOT BE PROGRAM INVOKED.                 * G00510
 *     ************************************************************* G00520
 *          EJECT                                                    G00530
 *     ************************************************************* G
 * </pre>
 */
public class GetSqlErrorMessage extends CICSNonConvCodeModel {

	/* GENERATED-FLAGS */
	private FixedLengthStringData trux = new FixedLengthStringData(1).init("T");
	private Validator always = new Validator(trux, "T");
	private Validator never = new Validator(trux, "F");
	private ZonedDecimalData wsAbendCicsNum = new ZonedDecimalData(4, 0).setUnsigned();
	private FixedLengthStringData wsAbendCicsTermid = new FixedLengthStringData(4);
	private FixedLengthStringData wsAbendCicsUserid = new FixedLengthStringData(8);
	/*
	 * : == WORKING-STORAGE FIELDS FOR $NPS-FORMAT-TIME == : : (GENERATED BY $NPS-FORMAT-TIME) :
	 */
	private ZonedDecimalData foTimeNum = new ZonedDecimalData(7, 0).setPattern("-------9");

	private FixedLengthStringData foTime = new FixedLengthStringData(8).isAPartOf(foTimeNum, 0, REDEFINE);
	private FixedLengthStringData foHours = new FixedLengthStringData(2).isAPartOf(foTime, 2);
	private FixedLengthStringData foMinutes = new FixedLengthStringData(2).isAPartOf(foTime, 4);
	private FixedLengthStringData foSeconds = new FixedLengthStringData(2).isAPartOf(foTime, 6);

	private FixedLengthStringData foTimeScreen = new FixedLengthStringData(8);
	private FixedLengthStringData foScrnHours = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 0);
	private FixedLengthStringData foScrnColon1 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 2).init(":");
	private FixedLengthStringData foScrnMinutes = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 3);
	private FixedLengthStringData foScrnColon2 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 5).init(":");
	private FixedLengthStringData foScrnSeconds = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 6);

	/*
	 * : === END OF $NPS-FORMAT-TIME-WS === : &08+01 CSMT-MSG2.
	 */
	private FixedLengthStringData csmtMsg2 = new FixedLengthStringData(75);
	private FixedLengthStringData msg2Filler = new FixedLengthStringData(32).isAPartOf(csmtMsg2, 0).init(SPACES);
	private FixedLengthStringData filler3 = new FixedLengthStringData(9).isAPartOf(csmtMsg2, 32, FILLER).init(
	    "EIBFN   =");
	private FixedLengthStringData filler4 = new FixedLengthStringData(5).isAPartOf(csmtMsg2, 48, FILLER).init("UNIT=");
	private FixedLengthStringData msg2SvcUnNo = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 53);
	private FixedLengthStringData filler5 = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 60, FILLER)
	    .init("  DATE=");
	private FixedLengthStringData msg2Date = new FixedLengthStringData(8).isAPartOf(csmtMsg2, 67);
	private BinaryData csmtMsg2Length = new BinaryData(3, 0).init(75);
	/*
	 * % SET PROCEDURE : === WORKING-STORAGE FIELDS FOR $NPS-CICS-NUMBER=== : : (GENERATED BY $NPS-CICS-NUMBER-WS) :
	 */
	private ZonedDecimalData cicsCallNumber = new ZonedDecimalData(4, 0).setUnsigned();
	private FixedLengthStringData apsHoldInvocationMode = new FixedLengthStringData(1);

	private FixedLengthStringData apsScreenFlags = new FixedLengthStringData(1);

	/*
	 * APS-GENERATED DFHCOMMAREA *** LENGTH: 5620 ***
	 */
	private FixedLengthStringData dfhcommarea = new FixedLengthStringData(5620);
	private FixedLengthStringData tpHdrLinkage = new FixedLengthStringData(40).isAPartOf(dfhcommarea, 0);
	private FixedLengthStringData tpUserLinkage = new FixedLengthStringData(5500).isAPartOf(dfhcommarea, 40);
	private FixedLengthStringData tpAddrTableLinkage = new FixedLengthStringData(80).isAPartOf(dfhcommarea, 5540);
	private PointerData[] tpAddrLinkage = PtrArrayPartOfStructure(20, tpAddrTableLinkage, 0);
	private IntegerData slDsntiarMsgIndex = new IntegerData();
	private ApsEibfnEibrcodeInner apsEibfnEibrcodeInner = new ApsEibfnEibrcodeInner();
	private Nps031WorkFieldsInner nps031WorkFieldsInner = new Nps031WorkFieldsInner();
	private PfkeyFieldGrpInner pfkeyFieldGrpInner = new PfkeyFieldGrpInner();
	private TpCommareaInner tpCommareaInner = new TpCommareaInner();

	/**
	 * Default constructor.
	 */
	public GetSqlErrorMessage() {
		super();
	}

	/**
	 * Overridden method to set DFHCOMMAREA
	 * 
	 * @param commArea - DFHCOMMAREA
	 */
	public void setCommArea(FixedLengthStringData commArea) {
		super.setCommArea(commArea);
		if (commArea != null) {
			dfhcommarea.changeLength(commArea.getLength());
			setAddressToAddress(dfhcommarea, commArea);
		}

	}

	/**
	 * The mainline method is the default entry point of the program when called by other programs using the Quipoz
	 * runtime framework.
	 */
	public void mainline() {
		try {
			nps031Section();
		} catch (COBOLExitProgramException e) {
			// Expected exception for control flow purposes
		}
	}

	/**
	 * Method generated from section NPS031-SECTION.
	 */
	private void nps031Section() {
		/* APS-MAIN-PARA */
		apsHousekeepingPara();
		apsUserMainPara();
		/* APS-MAIN-PARA--EXIT */
		exitProgram();
	}

	/**
	 * Method generated from paragraph MAIN-SECTION-SXIT.
	 */
	private void mainSectionSxit() {
		goBack();
		/**** APS-GENERATED HOUSEKEEPING PARAGRAPH ****/
	}

	/**
	 * Method generated from paragraph APS-HOUSEKEEPING-PARA.
	 */
	private void apsHousekeepingPara() {
		if (isEQ(getCICSContext().getEIB().getLengthCommarea(), 0)) {
			tpCommareaInner.tpCommarea.set(SPACES);
			tpCommareaInner.tpInvocationMode.set("T");
			tpCommareaInner.tpCallingProgramId.set("        ");
		} else {
			tpCommareaInner.tpCommarea.set(dfhcommarea);
		}
		/* ##* Ending: IF EIBCALEN = 0... */
		IgnoreCondition ignoreCondition = CICSCommandFactory.getIgnoreCondition(getCICSContext());
		ignoreCondition.addCondition(CICSCondition.ERROR);
		ignoreCondition.execute();
		pfkeyFieldGrpInner.pfkeyField.set(getCICSContext().getEIB().getFunctionKey());
	}

	/**
	 * Method generated from paragraph APS-USER-MAIN-PARA.
	 */
	private void apsUserMainPara() {
		/* ##* * MAINLINE LOGIC * */
		/* ##* * THIS PARAGRAPH WILL BRANCH TO THE APPROPRIATE PROCESSING * */
		/* ##* * ROUTINE DEPENDING ON HOW THIS PROGRAM WAS INVOKED. * */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			linkInvProcessing();
		} else {
			if (tpCommareaInner.tpProgramInvoked.isTrue()) {
				programInvProcessing();
			}
			/* ##* Ending: IF TP-PROGRAM-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph 1000-LINK-INV-PROCESSING.
	 */
	private void linkInvProcessing() {
		initialize();
		writeToCsmt();
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 1100-INITIALIZE.
	 */
	private void initialize() {
		nps031WorkFieldsInner.wsPa.set(tpCommareaInner.caProgramWorkArea);
		nps031WorkFieldsInner.msg1Id.set(nps031WorkFieldsInner.wsPaProgId);
		nps031WorkFieldsInner.msg2Id.set(nps031WorkFieldsInner.wsPaProgId);
		nps031WorkFieldsInner.msg1Sqlcode.set(getAppVars().getSqlErrorCode());
		nps031WorkFieldsInner.msg1CallNumber.set(nps031WorkFieldsInner.wsPaCallNumber);
		nps031WorkFieldsInner.msg1Userid.set(tpCommareaInner.caUserid);
		nps031WorkFieldsInner.msg1Termid.set(getCICSContext().getEIB().getTerminalId());
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		nps031WorkFieldsInner.msg1Time.set(foTimeScreen);
	}

	/**
	 * Method generated from paragraph 1200-WRITE-TO-CSMT.
	 */
	private void writeToCsmt() {
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(nps031WorkFieldsInner.blanksMessage);
		writeqTd.setLength(nps031WorkFieldsInner.blanksMessage.getLength());
		writeqTd.execute();
		WriteTransientStorage writeqTd2 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd2.setQueue("CSMT");
		writeqTd2.setFrom(nps031WorkFieldsInner.borderMessage);
		writeqTd2.setLength(nps031WorkFieldsInner.borderMessage.getLength());
		writeqTd2.execute();
		WriteTransientStorage writeqTd3 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd3.setQueue("CSMT");
		writeqTd3.setFrom(nps031WorkFieldsInner.message1);
		writeqTd3.setLength(nps031WorkFieldsInner.message1.getLength());
		writeqTd3.execute();
		/* ##* NEW ADDITIONS BY E.E. */
		/* ##* THE LAYOUT OF CSMT-MSG2 CAN BE FOUND IN NPSMACS IN THE */
		/* ##* $NPS-MORE-MESSAGES MACRO. */
		/* % SET WRITE-CONTROL */
		/* % BEGIN */
		/* % IF NOT &DEFINED(&WS-DEFINED) */
		/* % &WS-DEFINED = 1 */
		/* $NPS-MORE-MESSAGES-WS */
		/* % SET WORKING-STORAGE */
		/* $Z100-MORE-MSG */
		/* % BEGIN */
		/* MSG2-DATE = CA-TD-SCREEN-DATE */
		msg2Date.set(tpCommareaInner.caTdScreenDate);
		/* MSG2-SVC-UN-NO = CA-SVC-UN-NO */
		msg2SvcUnNo.set(tpCommareaInner.caSvcUnNo);
		/* % SET NOWRITE-CONTROL */
		WriteTransientStorage writeqTd4 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd4.setQueue("CSMT");
		writeqTd4.setFrom(csmtMsg2);
		writeqTd4.setLength(csmtMsg2Length);
		writeqTd4.execute();
		/* ##* END OF NEW ADDITIONS BY E.E. */
		getAppVars().formatSqlError(getAppVars().getSqlca(), nps031WorkFieldsInner.slDsntiarMessage,
		    nps031WorkFieldsInner.slDsntiarLrecl);
		if (returnCode == 0) {
			slDsntiarMsgIndex.set(1);
			while (!(isGTE(slDsntiarMsgIndex, 10))) {
				if (isNE(nps031WorkFieldsInner.slDsntiarMsgLine[slDsntiarMsgIndex.toInt()], SPACES)) {
					nps031WorkFieldsInner.slSqlerrmc.set(nps031WorkFieldsInner.slDsntiarMsgLine[slDsntiarMsgIndex
					    .toInt()]);
					WriteTransientStorage writeqTd5 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
					writeqTd5.setQueue("CSMT");
					writeqTd5.setFrom(nps031WorkFieldsInner.message2);
					writeqTd5.setLength(nps031WorkFieldsInner.message2.getLength());
					writeqTd5.execute();
				}
				/* ##* Ending: IF SL-DSNTIAR-MSG-LINE(SL-DSNTIAR-MSG-INDEX)... */
				slDsntiarMsgIndex.add(1);
			}

		} else {
			nps031WorkFieldsInner.slDsntiarCode.set(returnCode);
			nps031WorkFieldsInner.slSqlerrmc.set(nps031WorkFieldsInner.slCsmtBadDsntiarMsg);
			WriteTransientStorage writeqTd6 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
			writeqTd6.setQueue("CSMT");
			writeqTd6.setFrom(nps031WorkFieldsInner.message2);
			writeqTd6.setLength(nps031WorkFieldsInner.message2.getLength());
			writeqTd6.execute();
		}
		/* ##* Ending: IF RETURN-CODE = 0... */
		WriteTransientStorage writeqTd7 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd7.setQueue("CSMT");
		writeqTd7.setFrom(nps031WorkFieldsInner.borderMessage);
		writeqTd7.setLength(nps031WorkFieldsInner.borderMessage.getLength());
		writeqTd7.execute();
		WriteTransientStorage writeqTd8 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd8.setQueue("CSMT");
		writeqTd8.setFrom(nps031WorkFieldsInner.blanksMessage);
		writeqTd8.setLength(nps031WorkFieldsInner.blanksMessage.getLength());
		writeqTd8.execute();
	}

	/**
	 * Method generated from paragraph 2000-PROGRAM-INV-PROCESSING.
	 */
	private void programInvProcessing() {
		tpCommareaInner.caErrorKey.set("0007");
		cicsCallNumber.set("1");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		nps031WorkFieldsInner.wsMessageArea.set(tpCommareaInner.caErrorMsg);
		nps031WorkFieldsInner.wsMessageProgId.set("NPS031");
		ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
		sendText.setFrom(nps031WorkFieldsInner.wsMessageArea);
		sendText.setLength(79);
		sendText.setErase(true);
		sendText.setFreekb(true);
		sendText.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 99400-FORMAT-TIME.
	 */
	private void formatTime() {
		/* : (GENERATED BY $NPS-FORMAT-TIME) : */
		foTimeNum.set(getCICSContext().getEIB().getTaskTime());
		foScrnHours.set(foHours);
		foScrnMinutes.set(foMinutes);
		foScrnSeconds.set(foSeconds);
	}

	/*
	 * Class transformed from Data Structure TP-COMMAREA_INNER
	 */
	private static final class TpCommareaInner {

		private FixedLengthStringData tpCommarea = new FixedLengthStringData(5620);
		private FixedLengthStringData tpHeader = new FixedLengthStringData(40).isAPartOf(tpCommarea, 0);
		private FixedLengthStringData tpInvocationMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 0);
		private Validator tpTransidInvoked = new Validator(tpInvocationMode, "T");
		private Validator tpProgramInvoked = new Validator(tpInvocationMode, "P");
		private Validator tpScreenInvoked = new Validator(tpInvocationMode, "S");
		private Validator tpLinkInvoked = new Validator(tpInvocationMode, "L");
		private FixedLengthStringData tpPsbScheduledMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 1);
		private Validator tpPsbScheduled = new Validator(tpPsbScheduledMode, "P");
		private BinaryData tpAddrCount = new BinaryData(4, 0).isAPartOf(tpHeader, 2);
		private FixedLengthStringData tpCallingProgramId = new FixedLengthStringData(8).isAPartOf(tpHeader, 4);
		private FixedLengthStringData tpAddrTable = new FixedLengthStringData(80).isAPartOf(tpCommarea, 5540);
		private PointerData[] tpAddr = PtrArrayPartOfStructure(20, tpAddrTable, 0);

		private FixedLengthStringData filler2 = new FixedLengthStringData(5540).isAPartOf(tpCommarea, 0,
		    FILLER_REDEFINE);
		private FixedLengthStringData tpUserarea = new FixedLengthStringData(5500).isAPartOf(filler2, 40);
		private FixedLengthStringData commArea = new FixedLengthStringData(5500).isAPartOf(tpUserarea, 0, REDEFINE);
		/*
		 * NPS CICS COMMAREA FOR APS PROGRAMS * SYSTEM AREA = 120 * APPL COMMAREA = 2400* * TOTAL LENGTH = 2520* * TOTAL
		 * NPJ/NPS COMM-AREA = 5500 * MODIFICATION HISTORY * DATE CHANGED BY DESCRIPTION * 09/07/89 HANSON NG NEW FIELDS
		 * FOR SCT * 09/11/89 LANDOLT ATTACHED NPS (US) COMM-AREA * 10/09/89 HANSON NG ADD TIME & SERVICE LOCATION * -
		 * CA-LOGON-TIME * - CA-ITEM-SVCE-LOCN * 11/15/89 JOHN JEREB - CA-PREV-PGM-INDEX * 12/01/89 JOHN JEREB -
		 * CA-XE-SUP-GROUP * 03/28/90 ANDY SECORD ADDED CA-SO-NO * 03/29/90 SERGEI VARBANOV ADDED EXTRA 2000 BYTES *
		 * 07/23/92 BRECK KUHNKE ADDED CA-SPDE-SVC-UN-FL * 08/29/92 ALKA PATEL ADDED CA-BR-UN-NO * 08/27/02 IDA DOLINSKY
		 * ADDED CA-SVC-OGP-CD * LEVEL 03 07/02/93 ANNETTE STEPHENSON ADDED CA-SAVE-DATA-CNT * 09/22/93 SHEILA BRYANT
		 * ADDED CA-MENU-350-OPTION * 10/12/93 SHEILA BRYANT ADDED CA-BCH-NO (CA-SECTION8)* 09/29/94 SHEILA BRYANT ADDED
		 * CA-CUST-ALT-PHONE & * CA-CUST-CROSS-STREETS & * CA-CUST-APT-NO & * CA-CUST-ADDR-REC-TYPE TO * CA-SECTION9. 69
		 * BYTES TOTAL * FILLER WAS 700 BYTES NOW 630 * 04/28/94 B. ROBERTS ADDED CA-LAST-UNIT-NO * FIX NPS143
		 * PRODUCTION PROB. * 08/17/94 STEVEN GODEE ADDED POINTERS TO COMMON * STORAGE TABLES: CA-NPJ551-PTR* 11/29/94
		 * JOHN COLLINS ADDED CA-PRN-ID TO * CA-FILLER-SEC * 12/15/94 MOIRA CHASELEY ADDED CA-NPS020-OPTION * 01/10/95
		 * R. DYNAKO ADDED CA-AGR-ADJ-CNC-NO * 02/28/95 S. GODEE ADDED CA-MENU-285-OPTION * 04/28/95 M. YAU ADDED
		 * CA-TERMS-FLAG * 05/05/95 J. HUPPERT ADDED CA-CUST-SOURCE * 05/08/95 R. DYNAKO ADDED CA-RESTRICTED-ACCESS *
		 * 09/29/95 J. CORTEZ ADDED CA-CPU-AID-RTE-FL * CA-CPU-AID-RTE-PGM * 10/03/95 I. MARGULIS ADDED CA-SAVE-MU-NO *
		 * 06/20/96 J. CORTEZ ADDED CA-BUSINESS-CD * 07/03/96 M. WELTZER ADDED CA-HOMELIFE-UNIT * IN CA-FILLER-SEC *
		 * 07/30/96 M. SMITH ADDED CA-CUST-STREET-WOUT-APT* 11/05/96 M. YAU ADDED CA-WENT-TO-NPS471 * 01/07/97 J. CASEY
		 * ADDED CA-HOME-SERVICE-FL * 02/14/97 J. CASEY ADDED SECURITY-1-TO-7 * 10/08/97 J. VOGEL ADDED
		 * CA-FRH-RETURN-CODE, * CA-FRH-DIAG-CODE1, AND * VALUE '10' FOR CA-RETURN-CODE* 10/20/97 ALKA PATEL ADDED
		 * CA-MENU-602-OPTION * 10/30/97 ALKA PATEL ADDED CA-SYSID-604 * 04/22/99 T.R. GANESHA ADDED CA-INQUIRY-PA TO *
		 * CA-FILLER-SEC * 05/28/99 J. CASEY ADDED CA-SHOPBLOCK-FL * (REDEFINES CA-WENT-TO-NPS471* WHICH IS SOLELY USED
		 * BY * NPJ4701) * 07/13/99 A.PATEL/K.GILL 150 BYES FOR THIRD PARTY. * 12/21/99 M. HOWELL 30 BYES FOR TELESERV.
		 * * 02/25/99 P. NGUYEN ADDED CA-CRT-SO * 10/23/00 G. Hueneman ADDED CA-ath-py-dt. * 03/13/01 M.K.BALA ADDED
		 * THD-PTY-FLAG FOR GLBA * 06/02/01 J. JSARSFI ADDED 88 LEVEL FOR CA-BR-UN-NO* 01/31/02 C. TORRES ADDED GEOCODE,
		 * COUNTY CODE, * 7 JURISDICTION GLAGS, 3 TAX * FLAGS AND TAX RATE AT THE END * 08/27/02 I. DOLINSKY ADDED
		 * SERVICING ORGANIZATION * 10/02/02 I. DOLINSKY ADDED RACF-ID-ENTERED * 11/22/02 J. SMORYNSKI ADDED CA-OPTION2
		 * * 12/06/02 J. SMORYNSKI ADDED CA-ORI-CD * G. SAVAGE ADDED COMMENT FOR CA-CUST-IND * AND CA-CUST-TYPE. *
		 * 01/14/03 c. torres ADDED CA-CAP-NEEDED FOR DCL * 05/19/03 S. BROWN ADDED CA-EMP-SSN FOR IBO * 06/20/03 C.
		 * TORRES ADDED CA-FORCE-RSN FOR DCL * ADDED CA-NPS114-UN-NO for dcl * 02/12/04 i.Dolinsky Added
		 * ca-nps145-orig-sch-dt * for AE Growth project * 04/13/04 C. TORRES ADDED CA-BUS-ORG-CD * 11/02/04 C. TORRES
		 * ADDED CA-INQ-CMY-CD * 08/03/06 Kasinath Gupta Added Repair location unit no * as part of Call Code 97
		 * changes* 11/22/06 SURESH KAMARAJ ADDED CA-FST-AVL-DT AS PART * OF PROJECT JUMP * 12/26/07 VISWA C ADDED
		 * CA-PM-CHK-CD and adjust * the filler from 423 to 422 as* part of Call Close Project. * SYSTEM WORK AREA * -
		 * COMMON WORKFIELDS * . MENU FUNCTION * . RACF INFO *
		 */
		private FixedLengthStringData caSection1 = new FixedLengthStringData(130).isAPartOf(commArea, 0);
		private FixedLengthStringData caSection1Overlay = new FixedLengthStringData(130).isAPartOf(caSection1, 0,
		    REDEFINE);
		private FixedLengthStringData caTdScreenDate = new FixedLengthStringData(8).isAPartOf(caSection1Overlay, 86);
		/*
		 * APPLICATION PROGRAM WORK AREA * NOTE - THIS IS A PUBLIC AREA. * ## ADDED 1000 EXTRA BYTES *
		 */
		private FixedLengthStringData caSection7 = new FixedLengthStringData(2000).isAPartOf(commArea, 580);
		private FixedLengthStringData caSection7Overlay1 = new FixedLengthStringData(2000).isAPartOf(caSection7, 0,
		    REDEFINE);
		private FixedLengthStringData caProgramWorkArea = new FixedLengthStringData(2000).isAPartOf(caSection7Overlay1,
		    0);
		/*
		 * EXTRA FILLER PER NPJ REQUEST ##*** COMMUNICATION AREA - NPS SERVICE FOUNDATION *** ##** LENGTH OF
		 * COMMUNICATION AREA = 925 BYTES. ** ##* MISC INFORMATION *
		 */
		private FixedLengthStringData caMiscSec = new FixedLengthStringData(284).isAPartOf(commArea, 4075);
		private FixedLengthStringData caMiscSecOverlay = new FixedLengthStringData(284).isAPartOf(caMiscSec, 0,
		    REDEFINE);
		/* MESSAGE LINE 2 */
		private FixedLengthStringData caUserid = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 160);
		/* INDUSTRY CODE */
		private FixedLengthStringData caSvcUnNo = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 227);
		/*
		 * SERVICE ORDER TYPE - OTC, QUICK, ONSITE, HI-TECH, & SRS
		 */
		private FixedLengthStringData caActionCd = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 273);
		private Validator caAdd = new Validator(caActionCd, "A");
		private Validator caInquiry = new Validator(caActionCd, "I");
		private Validator caUpdate = new Validator(caActionCd, "U");
		private Validator caDelete = new Validator(caActionCd, "D");
		private Validator caReinstate = new Validator(caActionCd, "R");
		/* ACTION CODE */
		private FixedLengthStringData caQueryNo = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 274);
		private Validator caNameEmpidSsnEntered = new Validator(caQueryNo, "1");
		private Validator caNameEmpidEntered = new Validator(caQueryNo, "2");
		private Validator caNameSsnEntered = new Validator(caQueryNo, "3");
		private Validator caEmpidSsnEntered = new Validator(caQueryNo, "4");
		private Validator caNameEntered = new Validator(caQueryNo, "5");
		private Validator caEmpidEntered = new Validator(caQueryNo, "6");
		private Validator caSsnEntered = new Validator(caQueryNo, "7");
		private Validator caViewEmployees = new Validator(caQueryNo, "8");
		private Validator caRacfIdEntered = new Validator(caQueryNo, "9");
		/* ##* ERROR MESSAGE * */
		private FixedLengthStringData caErrorSec = new FixedLengthStringData(79).isAPartOf(commArea, 4359);
		private FixedLengthStringData caErrorSecOverlay = new FixedLengthStringData(79).isAPartOf(caErrorSec, 0,
		    REDEFINE);
		private FixedLengthStringData caErrorMsg = new FixedLengthStringData(79).isAPartOf(caErrorSecOverlay, 0);
		private FixedLengthStringData caErrorKey = new FixedLengthStringData(4).isAPartOf(caErrorMsg, 0);
		/*
		 * HELP KEY FOR VSAM READING & UPDATES ##* NPS SYSTEM SECURITY LEVELS *
		 */
		private FixedLengthStringData caSecuritySec = new FixedLengthStringData(1).isAPartOf(commArea, 4515);
		private FixedLengthStringData caSecuritySecOverlay = new FixedLengthStringData(1).isAPartOf(caSecuritySec, 0,
		    REDEFINE);
		private FixedLengthStringData caSecurityLvl = new FixedLengthStringData(1).isAPartOf(caSecuritySecOverlay, 0);
		private Validator userFromUnit = new Validator(caSecurityLvl, "1", "2", "3");
		private Validator userFromUnit1 = new Validator(caSecurityLvl, "1");
		private Validator userFromUnit2 = new Validator(caSecurityLvl, "2");
		private Validator userFromUnit3 = new Validator(caSecurityLvl, "3");
		private Validator userFromRegion = new Validator(caSecurityLvl, "4", "5");
		private Validator userFromRegion1 = new Validator(caSecurityLvl, "4");
		private Validator userFromRegion2 = new Validator(caSecurityLvl, "5");
		private Validator userFromHq = new Validator(caSecurityLvl, "6");
		private Validator userFromSco = new Validator(caSecurityLvl, "7");
		private Validator security1To7 = new Validator(caSecurityLvl, new ValueRange("1", "7"));
		/* ##* SWITCHES AND FLAGS * */
		private FixedLengthStringData caSwFlagSec = new FixedLengthStringData(10).isAPartOf(commArea, 4547);
		private FixedLengthStringData caSwFlagOverlay = new FixedLengthStringData(10).isAPartOf(caSwFlagSec, 0,
		    REDEFINE);
		/* FLAGS */
		private FixedLengthStringData caWorkAreaPresentFlag = new FixedLengthStringData(1)
		    .isAPartOf(caSwFlagOverlay, 1);
		private Validator caWorkAreaInOtherTbl = new Validator(caWorkAreaPresentFlag, "Y");
		private FixedLengthStringData caErrorFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 2);
		private Validator outstandingError = new Validator(caErrorFlag, "Y");
		private FixedLengthStringData caEndOfDataFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 3);
		private Validator caEndOfData = new Validator(caEndOfDataFlag, "Y");
		private Validator endOfData = new Validator(caEndOfDataFlag, "Y");
		/* END-OF-DATA INDICATOR */
		private FixedLengthStringData caSaveFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 4);
		private Validator caSavedFromLastScreen = new Validator(caSaveFlag, "Y");
		/*
		 * ##* COMMUNICATION AREA FILLER * ##* ## ADDED 500 BYTES TO THE FILLER *
		 */
		private FixedLengthStringData caFillerSec = new FixedLengthStringData(943).isAPartOf(commArea, 4557);
		private FixedLengthStringData caFillerOverlay = new FixedLengthStringData(941).isAPartOf(caFillerSec, 0,
		    REDEFINE);
		private FixedLengthStringData caBrUnNo = new FixedLengthStringData(7).isAPartOf(caFillerOverlay, 12);
		private Validator validItronixUser = new Validator(caBrUnNo, "PD86   ");
		/* ADDED SPDE UNIT INDICATOR FLAG */
		private FixedLengthStringData caSpdeSvcUnFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 19);
		private Validator spdeUnit = new Validator(caSpdeSvcUnFl, "Y", "M");
		private Validator spdeMsgsWtg = new Validator(caSpdeSvcUnFl, "M");
		/* Used for EMP REF capture NPS100 */
		private FixedLengthStringData caThdPtyFlag = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 433);
		private Validator thdPty = new Validator(caThdPtyFlag, "Y", "F");
		private Validator notThdPty = new Validator(caThdPtyFlag, "N");
		/* ORIGINATION CODE */
		private FixedLengthStringData caCamsFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 474);
		private Validator camsParallel = new Validator(caCamsFl, "1");
		private Validator camsPilot = new Validator(caCamsFl, "2");
		private Validator nonCams = new Validator(caCamsFl, " ");
	}

	/*
	 * Class transformed from Data Structure NPS031-WORK-FIELDS_INNER
	 */
	private static final class Nps031WorkFieldsInner {

		/* NPS031-WORK-FIELDS */
		private FixedLengthStringData slDsntiarLrecl = new FixedLengthStringData(4);
		private BinaryData slDsntiarMsgLineLength = new BinaryData(8, 0).isAPartOf(slDsntiarLrecl, 0).init(112);

		private FixedLengthStringData slDsntiarMessage = new FixedLengthStringData(1122);
		private BinaryData slDsntiarMsgAreaLength = new BinaryData(4, 0).isAPartOf(slDsntiarMessage, 0).init(1120);
		private FixedLengthStringData[] slDsntiarMsgTbl = FLSArrayPartOfStructure(10, 112, slDsntiarMessage, 2);
		private FixedLengthStringData[] slDsntiarMsgLine = FLSDArrayPartOfArrayStructure(112, slDsntiarMsgTbl, 0);

		private FixedLengthStringData message1 = new FixedLengthStringData(137);
		private FixedLengthStringData msg1Id = new FixedLengthStringData(6).isAPartOf(message1, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(8).isAPartOf(message1, 6, FILLER).init(
		    " E 0500 ");
		private FixedLengthStringData filler1 = new FixedLengthStringData(18).isAPartOf(message1, 14, FILLER).init(
		    "** SQL-ERROR **   ");
		private FixedLengthStringData filler2 = new FixedLengthStringData(8).isAPartOf(message1, 32, FILLER).init(
		    "SQLCODE=");
		private ZonedDecimalData msg1Sqlcode = new ZonedDecimalData(8, 0).isAPartOf(message1, 40).setPattern(
		    "--------9");
		private FixedLengthStringData filler3 = new FixedLengthStringData(3).isAPartOf(message1, 49, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler4 = new FixedLengthStringData(16).isAPartOf(message1, 52, FILLER).init(
		    "SQL-CALL-NUMBER=");
		private ZonedDecimalData msg1CallNumber = new ZonedDecimalData(4, 0).isAPartOf(message1, 68).setUnsigned();
		private FixedLengthStringData filler5 = new FixedLengthStringData(3).isAPartOf(message1, 72, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler6 = new FixedLengthStringData(7).isAPartOf(message1, 75, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData msg1Termid = new FixedLengthStringData(4).isAPartOf(message1, 82);
		private FixedLengthStringData filler7 = new FixedLengthStringData(3).isAPartOf(message1, 86, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler8 = new FixedLengthStringData(5).isAPartOf(message1, 89, FILLER).init(
		    "TIME=");
		private FixedLengthStringData msg1Time = new FixedLengthStringData(8).isAPartOf(message1, 94);
		private FixedLengthStringData filler9 = new FixedLengthStringData(10).isAPartOf(message1, 102, FILLER).init(
		    "  USERID= ");
		private FixedLengthStringData msg1Userid = new FixedLengthStringData(8).isAPartOf(message1, 112);
		private FixedLengthStringData filler10 = new FixedLengthStringData(17).isAPartOf(message1, 120, FILLER).init(
		    SPACES);

		private FixedLengthStringData message2 = new FixedLengthStringData(132);
		private FixedLengthStringData msg2Id = new FixedLengthStringData(6).isAPartOf(message2, 0);
		private FixedLengthStringData filler11 = new FixedLengthStringData(3).isAPartOf(message2, 6, FILLER)
		    .init(" E ");
		private FixedLengthStringData filler12 = new FixedLengthStringData(5).isAPartOf(message2, 9, FILLER).init(
		    "0500 ");
		private FixedLengthStringData filler13 = new FixedLengthStringData(6).isAPartOf(message2, 14, FILLER).init(
		    ">>>>  ");
		private FixedLengthStringData slSqlerrmc = new FixedLengthStringData(112).isAPartOf(message2, 20);

		private FixedLengthStringData slCsmtBadDsntiarMsg = new FixedLengthStringData(59);
		private FixedLengthStringData filler14 = new FixedLengthStringData(55)
		    .isAPartOf(slCsmtBadDsntiarMsg, 0, FILLER).init("RETURN CODE TO DSNTIAR NOT EQUAL ZEROES  RETURN CODE =");
		private FixedLengthStringData slDsntiarCode = new FixedLengthStringData(4).isAPartOf(slCsmtBadDsntiarMsg, 55);
		private FixedLengthStringData borderMessage = new FixedLengthStringData(132).init("*", true);
		private FixedLengthStringData blanksMessage = new FixedLengthStringData(132).init(SPACES);

		private FixedLengthStringData wsPa = new FixedLengthStringData(148);
		private FixedLengthStringData wsPaSqlca = new FixedLengthStringData(136).isAPartOf(wsPa, 0);
		private FixedLengthStringData wsPaProgId = new FixedLengthStringData(8).isAPartOf(wsPa, 136);
		private ZonedDecimalData wsPaCallNumber = new ZonedDecimalData(4, 0).isAPartOf(wsPa, 144).setUnsigned();

		private FixedLengthStringData wsMessageArea = new FixedLengthStringData(79);
		private FixedLengthStringData wsMessageProgId = new FixedLengthStringData(6).isAPartOf(wsMessageArea, 0);
	}

	/*
	 * Class transformed from Data Structure APS-EIBFN-EIBRCODE_INNER
	 */
	private static final class ApsEibfnEibrcodeInner {

		/*
		 * : === END OF $NPS-CICS-NUMBER-WS === : APS-GENERATED EIBRCODE STRUCTURE ***
		 */
		private FixedLengthStringData apsEibfnEibrcode = new FixedLengthStringData(7);
		private FixedLengthStringData apsEibfn = new FixedLengthStringData(1).isAPartOf(apsEibfnEibrcode, 0);
		private FixedLengthStringData apsEibrcode = new FixedLengthStringData(6).isAPartOf(apsEibfnEibrcode, 1);

		private FixedLengthStringData filler = new FixedLengthStringData(7).isAPartOf(apsEibfnEibrcode, 0,
		    FILLER_REDEFINE);
		private BinaryData apsEibfnEibrcodeX = new BinaryData(4, 0).isAPartOf(filler, 0);
		private Validator cbiderr = new Validator(apsEibfnEibrcodeX, +1259);
		private Validator disabled = new Validator(apsEibfnEibrcodeX, +1549);
		private Validator dsiderr = new Validator(apsEibfnEibrcodeX, +1537);
		private Validator dsstat = new Validator(apsEibfnEibrcodeX, +7684);
		private Validator dupkey = new Validator(apsEibfnEibrcodeX, +1668);
		private Validator duprec = new Validator(apsEibfnEibrcodeX, +1666);
		private Validator enddata = new Validator(apsEibfnEibrcodeX, +4097);
		private Validator endfile = new Validator(apsEibfnEibrcodeX, +1551);
		private Validator endinpt = new Validator(apsEibfnEibrcodeX, +1218);
		private Validator enqbusy = new Validator(apsEibfnEibrcodeX, +4658);
		private Validator envdeferr = new Validator(apsEibfnEibrcodeX, +4329);
		private Validator eods = new Validator(apsEibfnEibrcodeX, +1040);
		private Validator eof = new Validator(apsEibfnEibrcodeX, +1028, +1217);
		private Validator expired = new Validator(apsEibfnEibrcodeX, +4128);
		private Validator funcerr = new Validator(apsEibfnEibrcodeX, +7688);
		private Validator igreqcd = new Validator(apsEibfnEibrcodeX, +1258);
		private Validator illogic = new Validator(apsEibfnEibrcodeX, +1538);
		private Validator inverrterm = new Validator(apsEibfnEibrcodeX, +6176);
		private Validator invmpsz = new Validator(apsEibfnEibrcodeX, +6152);
		private Validator invreq = new Validator(apsEibfnEibrcodeX, +736, +1248, +1544, +2592, +3808, +4351, +4832,
		    +5122, +6145, +6880);
		private Validator invtsreq = new Validator(apsEibfnEibrcodeX, +4116);
		private Validator ioerr = new Validator(apsEibfnEibrcodeX, +1664, +2052, +2564, +4100, +5127);
		private Validator iscinvreq = new Validator(apsEibfnEibrcodeX, +1745, +2257, +2769, +4305);
		private Validator itemerr = new Validator(apsEibfnEibrcodeX, +2561);
		private Validator jiderr = new Validator(apsEibfnEibrcodeX, +5121);
		private Validator lengerr = new Validator(apsEibfnEibrcodeX, +1249, +1761, +2273, +2785, +3297, +4321, +5126,
		    +6369, +7905);
		private Validator mapfail = new Validator(apsEibfnEibrcodeX, +6148);
		private Validator nojbufsp = new Validator(apsEibfnEibrcodeX, +5129);
		private Validator nopassbkrd = new Validator(apsEibfnEibrcodeX, +1255);
		private Validator nopassbkwr = new Validator(apsEibfnEibrcodeX, +1256);
		private Validator nospace = new Validator(apsEibfnEibrcodeX, +1667, +2064, +2568);
		private Validator nostg = new Validator(apsEibfnEibrcodeX, +3298);
		private Validator notalloc = new Validator(apsEibfnEibrcodeX, +1237);
		private Validator notfnd = new Validator(apsEibfnEibrcodeX, +1665, +4225);
		private Validator notopen = new Validator(apsEibfnEibrcodeX, +1548, +2056, +5125);
		private Validator pgmiderr = new Validator(apsEibfnEibrcodeX, +3585);
		private Validator qbusy = new Validator(apsEibfnEibrcodeX, +2240);
		private Validator qiderr = new Validator(apsEibfnEibrcodeX, +2050, +2562);
		private Validator qzero = new Validator(apsEibfnEibrcodeX, +2049);
		private Validator rdatt = new Validator(apsEibfnEibrcodeX, +1252, +6372);
		private Validator retpage = new Validator(apsEibfnEibrcodeX, +6146);
		private Validator rtefail = new Validator(apsEibfnEibrcodeX, +6272);
		private Validator rtesome = new Validator(apsEibfnEibrcodeX, +6208);
		private Validator segiderr = new Validator(apsEibfnEibrcodeX, +1540);
		private Validator selnerr = new Validator(apsEibfnEibrcodeX, +7692);
		private Validator sessbusy = new Validator(apsEibfnEibrcodeX, +1236);
		private Validator sessionerr = new Validator(apsEibfnEibrcodeX, +1234);
		private Validator signal = new Validator(apsEibfnEibrcodeX, +1253);
		private Validator sysbusy = new Validator(apsEibfnEibrcodeX, +1235);
		private Validator sysiderr = new Validator(apsEibfnEibrcodeX, +1232, +1744, +2256, +2768, +4304);
		private Validator termiderr = new Validator(apsEibfnEibrcodeX, +1254, +4114);
		private Validator transiderr = new Validator(apsEibfnEibrcodeX, +4113);
		private Validator unexpin = new Validator(apsEibfnEibrcodeX, +7696);
		private Validator wrbrk = new Validator(apsEibfnEibrcodeX, +1251, +6371);
		private Validator errorFound = new Validator(apsEibfnEibrcodeX, +1259, +1537, +7684, +1668, +1666, +4097,
		    +1551, +1218, +4658, +4329, +1040, +1028, +1217, +4128, +7688, +1258, +1538, +6176, +6152, +736, +1248,
		    +1544, +2592, +3808, +4351, +4832, +5122, +6145, +6880, +4116, +1664, +2052, +2564, +4100, +5127, +1745,
		    +2257, +2769, +4305, +2561, +5121, +1249, +1761, +2273, +2785, +3297, +4321, +5126, +6369, +7905, +6148,
		    +5129, +1255, +1256, +1667, +2064, +2568, +3298, +1237, +1665, +4225, +1548, +2056, +5125, +3585, +2240,
		    +2050, +2562, +2049, +1252, +6372, +6146, +6272, +6208, +1540, +7692, +1236, +1234, +1253, +1235, +1232,
		    +1744, +2256, +2768, +4304, +1254, +4114, +4113, +7696, +1251, +6371);
	}

	/*
	 * Class transformed from Data Structure PFKEY-FIELD-GRP_INNER
	 */
	private static final class PfkeyFieldGrpInner {

		/* APS-GENERATED PFKEY STRUCTURE *** */
		private FixedLengthStringData pfkeyFieldGrp = new FixedLengthStringData(2);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 0, FILLER).init(
		    LOVALUES);
		private FixedLengthStringData pfkeyField = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 1);
		private Validator enterKey = new Validator(pfkeyField, QUOTES);
		private Validator clearKey = new Validator(pfkeyField, "_");
		private Validator pen = new Validator(pfkeyField, "=");
		private Validator opid = new Validator(pfkeyField, "W");
		private Validator msre = new Validator(pfkeyField, "X");
		private Validator strf = new Validator(pfkeyField, "H");
		private Validator trig = new Validator(pfkeyField, "\"");
		private Validator pa1 = new Validator(pfkeyField, "%");
		private Validator pa2 = new Validator(pfkeyField, ">");
		private Validator pa3 = new Validator(pfkeyField, ",");
		private Validator pf0 = new Validator(pfkeyField, QUOTES);
		private Validator pf00 = new Validator(pfkeyField, QUOTES);
		private Validator pf1 = new Validator(pfkeyField, "1");
		private Validator pf01 = new Validator(pfkeyField, "1");
		private Validator pf2 = new Validator(pfkeyField, "2");
		private Validator pf02 = new Validator(pfkeyField, "2");
		private Validator pf3 = new Validator(pfkeyField, "3");
		private Validator pf03 = new Validator(pfkeyField, "3");
		private Validator pf4 = new Validator(pfkeyField, "4");
		private Validator pf04 = new Validator(pfkeyField, "4");
		private Validator pf5 = new Validator(pfkeyField, "5");
		private Validator pf05 = new Validator(pfkeyField, "5");
		private Validator pf6 = new Validator(pfkeyField, "6");
		private Validator pf06 = new Validator(pfkeyField, "6");
		private Validator pf7 = new Validator(pfkeyField, "7");
		private Validator pf07 = new Validator(pfkeyField, "7");
		private Validator pf8 = new Validator(pfkeyField, "8");
		private Validator pf08 = new Validator(pfkeyField, "8");
		private Validator pf9 = new Validator(pfkeyField, "9");
		private Validator pf09 = new Validator(pfkeyField, "9");
		private Validator pf10 = new Validator(pfkeyField, ":");
		private Validator pf11 = new Validator(pfkeyField, "#");
		private Validator pf12 = new Validator(pfkeyField, "@");
		private Validator pf13 = new Validator(pfkeyField, "A");
		private Validator pf14 = new Validator(pfkeyField, "B");
		private Validator pf15 = new Validator(pfkeyField, "C");
		private Validator pf16 = new Validator(pfkeyField, "D");
		private Validator pf17 = new Validator(pfkeyField, "E");
		private Validator pf18 = new Validator(pfkeyField, "F");
		private Validator pf19 = new Validator(pfkeyField, "G");
		private Validator pf20 = new Validator(pfkeyField, "H");
		private Validator pf21 = new Validator(pfkeyField, "I");
		private Validator pf23 = new Validator(pfkeyField, ".");
		private Validator pf24 = new Validator(pfkeyField, "<");

		private FixedLengthStringData pfkeyFieldPf22 = new FixedLengthStringData(2).isAPartOf(pfkeyFieldGrp, 0,
		    REDEFINE);
		private BinaryData apsPf22 = new BinaryData(4, 0).isAPartOf(pfkeyFieldPf22, 0);
		private Validator pf22 = new Validator(apsPf22, +74);
	}
}
