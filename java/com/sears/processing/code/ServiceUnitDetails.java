/*
 * Generation Date: 21 November 2011 8:57:30 PM
 * Generated by:     CSC
 * Generated from:  nps220.CBL
 * 
 * Copyright 2011 CSC, all rights reserved.
 * 
 * This software is the proprietary information of CSC.
 * Use is subject to license terms.
 */
package com.sears.processing.code;

import static com.quipoz.COBOLFramework.COBOLFunctions.ALPHABETIC;
import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER;
import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER_REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSDArrayPartOfArrayStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.LOVALUES;
import static com.quipoz.COBOLFramework.COBOLFunctions.NUMERIC;
import static com.quipoz.COBOLFramework.COBOLFunctions.PtrArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.QUOTES;
import static com.quipoz.COBOLFramework.COBOLFunctions.REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.SPACES;
import static com.quipoz.COBOLFramework.COBOLFunctions.ZDArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.ZERO;
import static com.quipoz.COBOLFramework.COBOLFunctions.add;
import static com.quipoz.COBOLFramework.COBOLFunctions.compute;
import static com.quipoz.COBOLFramework.COBOLFunctions.initialize;
import static com.quipoz.COBOLFramework.COBOLFunctions.isEQ;
import static com.quipoz.COBOLFramework.COBOLFunctions.isGT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isGTE;
import static com.quipoz.COBOLFramework.COBOLFunctions.isLT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isLTE;
import static com.quipoz.COBOLFramework.COBOLFunctions.isNE;
import static com.quipoz.COBOLFramework.COBOLFunctions.setAddressToAddress;
import static com.quipoz.COBOLFramework.COBOLFunctions.sub;
import static com.quipoz.COBOLFramework.COBOLFunctions.subString;

import java.sql.SQLException;

import com.csc.qre.bms.screen.ScreenHelper;
import com.csc.qre.cics.CICSContext;
import com.csc.qre.cics.command.CICSCommandFactory;
import com.csc.qre.cics.command.CICSCondition;
import com.csc.qre.cics.command.CICSHandler;
import com.csc.qre.cics.command.impl.AssignTransactionDetails;
import com.csc.qre.cics.command.impl.DumpApplication;
import com.csc.qre.cics.command.impl.HandleAbend;
import com.csc.qre.cics.command.impl.IgnoreCondition;
import com.csc.qre.cics.command.impl.LinkProgram;
import com.csc.qre.cics.command.impl.ReadTemporaryStorage;
import com.csc.qre.cics.command.impl.ReleaseTemporaryStorage;
import com.csc.qre.cics.command.impl.ReturnControl;
import com.csc.qre.cics.command.impl.TransactionSyncpoint;
import com.csc.qre.cics.command.impl.TransferControl;
import com.csc.qre.cics.command.impl.WriteTemporaryStorage;
import com.csc.qre.cics.command.impl.WriteTransientStorage;
import com.csc.qre.cics.command.impl.fileaccess.DeleteRecord;
import com.csc.qre.cics.command.impl.fileaccess.EndFileBrowse;
import com.csc.qre.cics.command.impl.fileaccess.ReadDirectly;
import com.csc.qre.cics.command.impl.fileaccess.ReadForwards;
import com.csc.qre.cics.command.impl.fileaccess.StartFileBrowse;
import com.csc.qre.cics.command.impl.fileaccess.WriteRecord;
import com.csc.qre.cics.command.impl.screencontrol.ScreenReceiveMap;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendMap;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendText;
import com.csc.qre.cics.util.CICSNonConvCodeModel;
import com.quipoz.COBOLFramework.datatype.Validator;
import com.quipoz.COBOLFramework.datatype.ValueRange;
import com.quipoz.COBOLFramework.util.COBOLExitProgramException;
import com.quipoz.COBOLFramework.util.StringUtil;
import com.quipoz.framework.datatype.BaseData;
import com.quipoz.framework.datatype.BinaryData;
import com.quipoz.framework.datatype.FixedLengthStringData;
import com.quipoz.framework.datatype.IntegerData;
import com.quipoz.framework.datatype.PointerData;
import com.quipoz.framework.datatype.ZonedDecimalData;
import com.sears.framework.utils.DateValidator;
import com.sears.framework.utils.ScreenNavigation;
import com.sears.processing.code.model.NPGStatesProvices;
import com.sears.processing.code.model.NPJServiceUnits;
import com.sears.processing.code.model.NPSBasUnits;
import com.sears.processing.code.model.NPSRetailUnits;
import com.sears.processing.code.model.NPSServiceUnitCharges;
import com.sears.processing.code.model.NPSServiceUnits;
import com.sears.processing.code.model.Nps220ScreenVars;
import com.sears.processing.code.model.TempAreaForServiceUnitDetails;
import com.sears.processing.dataaccess.IpsdrcflKsdsVsam;
import com.sears.processing.dataaccess.IpsiqcflKsdsVsam;
import com.sears.processing.dataaccess.IpspltflKsdsVsam;
import com.sears.processing.dataaccess.IpsumgflKsdsVsam;
import com.sears.processing.dataaccess.UpjtsrpKsdsVsam;
import com.sears.processing.dataaccess.UpsmuiflKsdsVsam;

/**
 * <pre>
 * ***************************************************************   687000
 *        THE PURPOSE OF THIS MACRO IS TO ALLOW US TO            *   688000
 *        SET THE INITIAL PREFIX OF OUR DB2 TABLES OR            *   689000
 *        VIEWS AT COMPILE TIME WITHOUT HAVING TO                *   690000
 *        ACTUALLY CHANGE THE CODE.  INSTEAD, WE WILL            *   691000
 *        CHANGE THE MACRO THAT IS REFERENCED UNDER USERMAC      *   692000
 *        ON THE APS GENERATOR PANEL.                            *   693000
 *                                                               *   694000
 *        TO USE THIS MACRO, MAKE SURE THAT YOU CODE YOUR SQL    *   695000
 *        STATEMENTS TO CALL A TABLE '&TABLE-PREFIX.XX...'       *   696000
 *        INSTEAD OF HARDCODING THE SPECIFIC TABLENAME YOU MAY   *   697000
 *        BE TESTING WITH.                                       *   698000
 *                                                               *   699000
 * ***************************************************************   700000
 * ***************************************************************   701101
 *  USE THIS PREFIX FOR HMIS SOURCE TABLES                           702001
 * ***************************************************************   702101
 * AUTHOR.                         NPS TEAM.                               
 * DATE-WRITTEN.                   09/01/30.                               
 * DATE-COMPILED.                  30 JAN 09 16.59.00.                     
 * REMARKS.                                                                
 *                                                                         
 *     ***********************************************************   G     
 *     *                                                         *   G00020
 *     *                NATIONAL PRODUCT SERVICES                *   G00030
 *     *                -------------------------                *   G00040
 *     *                                                         *   G00050
 *     *  PROGRAM NAME AND LEVEL                                 *   G00060
 *     *  ----------------------                                 *   G00070
 *     *    NPS220      - UPDATE SERVICE UNIT INFORMATION        *   G00080
 *     *    APPLICATION - BUILD1                                 *   G00090
 *     *    TRANSID     - PS3M                                   *   G00100
 *     *    COLLID      - NPS*L000                               *   G00110
 *     *                                                         *   G00120
 *     *  PROGRAM BRIEF                                          *   G00130
 *     *  -------------                                          *   G00140
 *     *    NPS220 - TO UPDATE THE SERVICE UNIT INFORMATION.     *   G00150
 *     *    PS30, PS60, PS70 AND PS80 WILL BE ABLE TO UPDATE THIS*   G00160
 *     *    TABLE, ELSE IT WILL BE IN INQUIRY MODE ONLY.         *   G00170
 *     *                                                         *   G00180
 *     *  INTERFACES                                             *   G00190
 *     *  ----------                                             *   G00200
 *     *    DB2                                                  *   G00210
 *     *                                                         *   G00220
 *     *  INPUT                                                  *   G00230
 *     *  -----                                                  *   G00240
 *     *    NPJXTXU                                              *   G00250
 *     *    NPSXTSU                                              *   G00260
 *     *    NPSXTBU                                              *   G00270
 *     *    NPSXTSC                                              *   G00280
 *     *    NPSXTRU     ##JA-16                                  *   G00281
 *     *    NPJXTXR                                              *   G00282
 *     *                                                         *   G00283
 *     *  OUTPUT                                                 *   G00284
 *     *  ------                                                 *   G00285
 *     *   NPS220 INQUIRY/UPDATE SCREEN                          *   G00286
 *     *                                                         *   G00287
 *     *  PROCEDURE NAME                                         *   G00288
 *     *  --------------                                         *   G00289
 *     *    ON-LINE                                              *   G00290
 *     *                                                         *   G00300
 *     *  CALLED PROGRAMS                                        *   G00310
 *     *  ---------------                                        *   G00320
 *     *    NPS015 - MAIN MENU                                   *   G00330
 *     *    NPS050 - HELP PROGRAM                                *   G00340
 *     *    NPS231 - TABLE MAINTENANCE MENU                      *   G00350
 *     *    NPS302 - UNIT SELECTION MENU                         *   G00360
 *     *                                                         *   G00370
 *     *  CALLING PROGRAMS                                       *   G00380
 *     *  ----------------                                       *   G00390
 *     *    NPS050 - HELP PROGRAM                                *   G00400
 *     *    NPS231 - TABLE MAINTENANCE MENU                      *   G00410
 *     *    NPS302 - UNIT SELECTION MENU                         *   G00420
 *     *                                                         *   G00430
 *     *  LINK PROGRAMS                                          *   G00440
 *     *  ----------------                                       *   G00450
 *     *  NPS030 - NPS MESSAGE PROGRAM                               G00460
 *     *                                                             G00470
 *     *  ERROR MESSAGE DESCRIPTIONS                             *   G00480
 *     *  --------------------------                             *   G00490
 *     *    I005 - INDICATES THAT THE USER MAY NOT INVOKE        *   G00500
 *     *           THIS PROGRAM WITH THE TRANSID.                *   G00510
 *     *    I007 - PLEASE NOTIFY THE SYSTEMS SUPPORT GROUP       *   G00520
 *     *           ABOUT THIS MESSAGE.                           *   G00530
 *     *    I015 - CHARACTERS OTHER THAN 'Y' OR 'N' ARE INVALID  *   G00540
 *     *    I022 - OPTION NOT AVAILABLE AT THIS TIME             *   G00550
 *     *    I028 - CHARACTERS OTHER THAN 'O' OR 'S' OR 'B' OR 'N'*   G00560
 *     *           ARE INVALID                                   *   G00570
 *     *    I029 - CHARACTERS OTHER THAN 'A' OR 'B' OR 'C' OR 'N'*   G00580
 *     *           ARE INVALID                                   *   G00590
 *     *    0003 - INVALID KEY WAS PRESSED.                      *   G00600
 *     *    0007 - XXXXXX CANNOT BE PROGRAM INVOKED.             *   G00610
 *     *    0009 - PLEASE ENTER REQUIRED FIELD(S).               *   G00620
 *     *    0011 - HIGHLIGHTED FIELD IN ERROR.                   *   G00630
 *     *    0022 - Invalid Unit Number.                          *   G00640
 *     *    0025 - UPDATE(S) SUCCESSFUL                          *   G00650
 *     *    0070 - ENTER PARTS MARK-UP PERCENT OR ZEROS.         *   G00660
 *     *    2035 - DATA FIELD MUST BE NUMERIC.                   *   G00670
 *     *    2050 - INVALID TIME ENTERED                          *   G00680
 *     *    2055 - REGION NUMBER NOT FOUND                       *   G00690
 *     *    2056 - CENTRAL NUMBER NOT FOUND                      *   G00700
 *     *    2101 - NO DATA WAS CHANGED                           *   G00710
 *     *    2256 - UNIT NOT YET ADDED                            *   G00720
 *     *    2311 - BRANCH CANNOT BE HOST                         *   G00721
 *     *    2312 - HOST UNIT HAS NOT BEEN CONVERTED              *   G00722
 *     *    2382 - Unit is not a Joint venture unit              *   G00723
 *     *    2381 - Only one joint Venture Service Unit can be    *   G00724
 *     *           allowed for a Unit.                           *   G00725
 *     *    2497 - NPS221 MUST BE COMPLETED TO SAVE DATA         *   G00726
 *     *    2597 - ACCESS DOCK UNIT NOT FOUND                    *   G00727
 *     *    2642 - Access Dock must be a Service Unit.           *   G00728
 *     *    2643 - Access Dock not allowed for Service Unit.     *   G00729
 *     *    3070 - INVALID VALUE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  *   G00730
 *     *    3081 - INQUIRY ONLY.  PLEASE CONTACT SYSTEM SUPPORT  *   G00740
 *     *           FOR UPDATE CAPABILITY.                        *   G00750
 *     *    9000 - SYSTEM PROBLEMS. CONTACT TECHNICAL SERVICES   *   G00760
 *     *                                                         *   G00770
 *     *  SPECIAL CONSIDERATIONS                                 *   G00780
 *     *  ----------------------                                 *   G00790
 *     *    NONE                                                 *   G00800
 *     *                                                         *   G00810
 *     ***********************************************************   G00820
 *     EJECT                                                         G00830
 *     ***********************************************************   G
 * </pre>
 */
public class ServiceUnitDetails extends CICSNonConvCodeModel {

	private Nps220ScreenVars screenVar = ScreenHelper.getScreenVars(Nps220ScreenVars.class);
	private boolean sqlerrorflag;
	private BaseData[] sqlparams = null;
	private BaseData[] sqlind = null;
	private BaseData[] sqlinto = null;
	private String sqlstmt = "";

	/* GENERATED-FLAGS */
	private FixedLengthStringData trux = new FixedLengthStringData(1).init("T");
	private Validator always = new Validator(trux, "T");
	private Validator never = new Validator(trux, "F");

	/* TSR ORGANIZATION LAYOUT */
	private FixedLengthStringData tsrOrgActivity = new FixedLengthStringData(1000);
	private FixedLengthStringData tsrOrgKey = new FixedLengthStringData(32).isAPartOf(tsrOrgActivity, 0);
	private FixedLengthStringData tsrOrgDesc = new FixedLengthStringData(4).isAPartOf(tsrOrgKey, 0);
	private FixedLengthStringData tsrOrgId = new FixedLengthStringData(2).isAPartOf(tsrOrgKey, 4);
	private FixedLengthStringData tsrOrgTstamp = new FixedLengthStringData(26).isAPartOf(tsrOrgKey, 6);
	private FixedLengthStringData tsrOrgNumber = new FixedLengthStringData(7).isAPartOf(tsrOrgActivity, 32);

	/*
	 * ##JA-16S RECORD LAYOUT FOR IPSDRCFL * PRIMARY INDEX = SVC-UN-NO (7 BYTES) * LENGTH = 80 BYTES *
	 */
	private FixedLengthStringData ipsdrcflRec = new FixedLengthStringData(80);
	private FixedLengthStringData ipsdrcflKey = new FixedLengthStringData(7).isAPartOf(ipsdrcflRec, 0);
	private FixedLengthStringData ipsdrcflSvcUnNo = new FixedLengthStringData(7).isAPartOf(ipsdrcflKey, 0);
	private FixedLengthStringData ipsdrcflDrcUnNo = new FixedLengthStringData(7).isAPartOf(ipsdrcflRec, 7);

	/*
	 * ##JA-16E ##CT-20S** I P S I Q C F L L A Y O U T *** *
	 */
	private FixedLengthStringData ipsiqcflRecord = new FixedLengthStringData(46);
	private FixedLengthStringData ipsiqcflKey = new FixedLengthStringData(1).isAPartOf(ipsiqcflRecord, 0);
	private FixedLengthStringData ipsiqcflInqCmyCd = new FixedLengthStringData(1).isAPartOf(ipsiqcflKey, 0);
	private FixedLengthStringData ipsiqcflValidTargetFl = new FixedLengthStringData(1).isAPartOf(ipsiqcflRecord, 36);

	/* *** I P S U M G F L L A Y O U T *** * */
	private FixedLengthStringData ipsumgflRecord = new FixedLengthStringData(15);
	private FixedLengthStringData ipsumgflKey = new FixedLengthStringData(8).isAPartOf(ipsumgflRecord, 0);
	private FixedLengthStringData ipsumgflUnNo = new FixedLengthStringData(7).isAPartOf(ipsumgflKey, 0);
	private FixedLengthStringData ipsumgflInqCmyCd = new FixedLengthStringData(1).isAPartOf(ipsumgflKey, 7);

	/*
	 * ##CT-20E ##PD-24S NPS - PILOT UNITS * VSAM KEY LENGTH = 24 * TOTAL FILE LENGTH = 80 * THIS FILE LISTS PILOT UNITS
	 * WHICH ARE AUTHORIZED TO * PERFORM SPECIFIC FUNCTIONS. *** FOR NATIONAL ROLLOOUT WILL HAVE 99999999999999 ROW ***
	 * AND UNITS THAT ARE NOT PILOT UNIT WILL HAVE ROW WITH *** IPSPLTFL-FL = 'N'. * MODIFICATION HISTORY * DATE CHANGED
	 * BY DESCRIPTION * 12/12/97 T. AHN INITIAL RELEASE * 05/15/98 A. PATEL ADDED IPSPLTFL-FL *
	 */
	private FixedLengthStringData ipspltflRec = new FixedLengthStringData(80);
	private FixedLengthStringData ipspltflKey = new FixedLengthStringData(24).isAPartOf(ipspltflRec, 0);
	private FixedLengthStringData ipspltflLogonUnNo = new FixedLengthStringData(7).isAPartOf(ipspltflKey, 0);
	private FixedLengthStringData ipspltflSvcUnNo = new FixedLengthStringData(7).isAPartOf(ipspltflKey, 7);
	private FixedLengthStringData ipspltflFunction = new FixedLengthStringData(10).isAPartOf(ipspltflKey, 14);
	private FixedLengthStringData ipspltflFields = new FixedLengthStringData(56).isAPartOf(ipspltflRec, 24);
	private FixedLengthStringData ipspltflFl = new FixedLengthStringData(1).isAPartOf(ipspltflFields, 0);

	/* 05 WS-PFKEY-OPTIONS. */
	private FixedLengthStringData wsMessageArea = new FixedLengthStringData(158);
	private FixedLengthStringData wsMessageLine1 = new FixedLengthStringData(79).isAPartOf(wsMessageArea, 0);
	private FixedLengthStringData wsMessagePgmId = new FixedLengthStringData(6).isAPartOf(wsMessageLine1, 5);
	private FixedLengthStringData wsMessageLine2 = new FixedLengthStringData(79).isAPartOf(wsMessageArea, 79);

	/* WS-FLAGS */
	private FixedLengthStringData foundFlag = new FixedLengthStringData(1);
	private Validator found = new Validator(foundFlag, "Y");

	private FixedLengthStringData notFoundFlag = new FixedLengthStringData(1);
	private Validator notFound = new Validator(notFoundFlag, "N");
	private ZonedDecimalData stampLevelNumber = new ZonedDecimalData(2, 0).init(23).setUnsigned();
	private ZonedDecimalData wsAbendCicsNum = new ZonedDecimalData(4, 0).setUnsigned();
	private ZonedDecimalData wsAbendCicsCode = new ZonedDecimalData(8, 0).setPattern("--------9");
	private FixedLengthStringData wsAbendCicsTermid = new FixedLengthStringData(4);
	private FixedLengthStringData wsAbendCicsUserid = new FixedLengthStringData(8);
	private FixedLengthStringData haMessageArea = new FixedLengthStringData(79).init(SPACES);
	/*
	 * : === END OF $NPS-HANDLE-ABEND === : : === WS FIELDS FOR $NPS-SAVE-SCREEN === :
	 */
	private FixedLengthStringData ssArea1 = new FixedLengthStringData(4);

	private FixedLengthStringData filler9 = new FixedLengthStringData(4).isAPartOf(ssArea1, 0, FILLER_REDEFINE);
	private ZonedDecimalData ssArea1Num = new ZonedDecimalData(4, 0).isAPartOf(filler9, 0).setUnsigned();
	private FixedLengthStringData ssArea2 = new FixedLengthStringData(8);

	private FixedLengthStringData ssProgName = new FixedLengthStringData(6);
	private FixedLengthStringData ssProgNamePfx = new FixedLengthStringData(1).isAPartOf(ssProgName, 0);
	private FixedLengthStringData ssProgNameSysid = new FixedLengthStringData(2).isAPartOf(ssProgName, 1);
	private FixedLengthStringData ssProgNameSfx = new FixedLengthStringData(3).isAPartOf(ssProgName, 3);

	private FixedLengthStringData ssProgQueue = new FixedLengthStringData(8);
	private FixedLengthStringData ssProgQueueSysid = new FixedLengthStringData(2).isAPartOf(ssProgQueue, 0);
	private FixedLengthStringData ssProgQueueTid = new FixedLengthStringData(4).isAPartOf(ssProgQueue, 2);
	private BinaryData ssProgQueueId = new BinaryData(4, 0).isAPartOf(ssProgQueue, 6);
	private BinaryData ssPageNumber = new BinaryData(4, 0);
	private FixedLengthStringData ssTsRecord = new FixedLengthStringData(2000);

	/* NPS-LEFT-JUSTIFY-FIELDS */
	private FixedLengthStringData npsLjNonSpaceFlag = new FixedLengthStringData(1);
	private Validator nonSpaceCharFound = new Validator(npsLjNonSpaceFlag, "Y");
	private BinaryData npsLjInputSub = new BinaryData(4, 0);
	private BinaryData npsLjOutputSub = new BinaryData(4, 0);

	private FixedLengthStringData npsLjInput = new FixedLengthStringData(66);
	private FixedLengthStringData[] npsLjInputChar = FLSArrayPartOfStructure(66, 1, npsLjInput, 0);
	private FixedLengthStringData npsLjOutput = new FixedLengthStringData(66);
	private FixedLengthStringData[] npsLjOutputChar = FLSArrayPartOfStructure(66, npsLjOutput, 0, REDEFINE);

	/* NPS-RIGHT-JUSTIFY-FIELDS */
	private FixedLengthStringData npsRightJustifyErr = new FixedLengthStringData(1);
	private Validator npsRightJustifyError = new Validator(npsRightJustifyErr, "Y");
	private Validator npsRightJustifyValid = new Validator(npsRightJustifyErr, "N");
	private BinaryData npsInputSub = new BinaryData(4, 0);
	private BinaryData npsOutputSub = new BinaryData(4, 0);

	private FixedLengthStringData npsInput = new FixedLengthStringData(16);
	private FixedLengthStringData[] npsInputChar = FLSArrayPartOfStructure(16, 1, npsInput, 0);
	private ZonedDecimalData npsOutput = new ZonedDecimalData(16, 0).setUnsigned();
	private ZonedDecimalData[] npsOutputChar = ZDArrayPartOfStructure(16, 1, 0, npsOutput, 0, REDEFINE, UNSIGNED_TRUE);

	/*
	 * : === END OF $NPS-RIGHT-JUSTIFY-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-SQL-ERROR=== : : (GENERATED BY
	 * $NPS-SQL-ERROR-WS) :
	 */
	private FixedLengthStringData slWorkArea = new FixedLengthStringData(148);
	private FixedLengthStringData slSqlca = new FixedLengthStringData(136).isAPartOf(slWorkArea, 0);
	private FixedLengthStringData slProgId = new FixedLengthStringData(8).isAPartOf(slWorkArea, 136);
	private ZonedDecimalData slCallNumber = new ZonedDecimalData(4, 0).isAPartOf(slWorkArea, 144).setUnsigned();
	/*
	 * : === END OF $NPS-SQL-ERROR-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-SQL-NUMBER=== : : (GENERATED BY
	 * $NPS-SQL-NUMBER-WS) :
	 */
	private ZonedDecimalData sqCallNumber = new ZonedDecimalData(4, 0).setUnsigned();
	/*
	 * : === END OF $NPS-SQL-NUMBER-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-CHECK-DATE : : (GENERATED BY
	 * $NPS-CHECK-DATE) :
	 */
	private ZonedDecimalData npsDummy = new ZonedDecimalData(2, 0).setUnsigned();
	private ZonedDecimalData npsRemainder = new ZonedDecimalData(1, 0).setUnsigned();
	private FixedLengthStringData npsFormatNo = new FixedLengthStringData(1);
	private ZonedDecimalData npsRjDate = new ZonedDecimalData(2, 0).setUnsigned();

	private FixedLengthStringData npsDateErr = new FixedLengthStringData(1);
	private Validator npsDateError = new Validator(npsDateErr, "Y");
	private Validator npsDateValid = new Validator(npsDateErr, "N");

	private FixedLengthStringData npsFormatDate = new FixedLengthStringData(8);
	private FixedLengthStringData npsFormatMmX = new FixedLengthStringData(2).isAPartOf(npsFormatDate, 0);
	private FixedLengthStringData npsFormatDdX = new FixedLengthStringData(2).isAPartOf(npsFormatDate, 3);
	private FixedLengthStringData npsFormatYyX = new FixedLengthStringData(2).isAPartOf(npsFormatDate, 6);

	private FixedLengthStringData filler12 = new FixedLengthStringData(8).isAPartOf(npsFormatDate, 0, FILLER_REDEFINE);
	private ZonedDecimalData npsFormatMm = new ZonedDecimalData(2, 0).isAPartOf(filler12, 0).setUnsigned();
	private ZonedDecimalData npsFormatDd = new ZonedDecimalData(2, 0).isAPartOf(filler12, 3).setUnsigned();
	private ZonedDecimalData npsFormatYy = new ZonedDecimalData(2, 0).isAPartOf(filler12, 6).setUnsigned();
	/* NPS-MONTHS-TABLE */
	private FixedLengthStringData npsMonthsValues = new FixedLengthStringData(24).init("312931303130313130313031");

	private FixedLengthStringData filler15 = new FixedLengthStringData(24).isAPartOf(npsMonthsValues, 0,
	    FILLER_REDEFINE);
	private ZonedDecimalData[] npsDaysInMonth = ZDArrayPartOfStructure(12, 2, 0, filler15, 0, UNSIGNED_TRUE);
	/*
	 * : === END OF $NPS-CHECK-DATE-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-CICS-NUMBER=== : : (GENERATED BY
	 * $NPS-CICS-NUMBER-WS) :
	 */
	private ZonedDecimalData cicsCallNumber = new ZonedDecimalData(4, 0).setUnsigned();
	/*
	 * : === END OF $NPS-CICS-NUMBER-WS === : : === WS FIELDS FOR $NPS-ACCESS-ERROR === :
	 */
	private BinaryData clCsmtMsg1Length = new BinaryData(4, 0).init(135);
	private BinaryData clCsmtBorderLength = new BinaryData(4, 0).init(141);

	private FixedLengthStringData clCsmtBorder = new FixedLengthStringData(141);
	private FixedLengthStringData filler16 = new FixedLengthStringData(141).isAPartOf(clCsmtBorder, 0, FILLER).init(
	    "*", true);
	private BinaryData clCsmtBlanksLength = new BinaryData(4, 0).init(1);

	private FixedLengthStringData clCsmtBlanks = new FixedLengthStringData(141);
	private FixedLengthStringData filler17 = new FixedLengthStringData(141).isAPartOf(clCsmtBlanks, 0, FILLER).init(
	    SPACES);
	private String clErrorflag = "";
	/*
	 * : === END OF $NPS-ACCESS-ERROR-WS === : : === WS FIELDS FOR $NPS-DELETE-QUEUES === :
	 */
	private FixedLengthStringData dqArea1 = new FixedLengthStringData(4);

	private FixedLengthStringData dqProgName = new FixedLengthStringData(6);
	private FixedLengthStringData dqProgNamePfx = new FixedLengthStringData(1).isAPartOf(dqProgName, 0);
	private FixedLengthStringData dqProgNameSysid = new FixedLengthStringData(2).isAPartOf(dqProgName, 1);
	private FixedLengthStringData dqProgNameSfx = new FixedLengthStringData(3).isAPartOf(dqProgName, 3);

	private FixedLengthStringData dqProgQueue = new FixedLengthStringData(8);
	private FixedLengthStringData dqProgQueueSysid = new FixedLengthStringData(2).isAPartOf(dqProgQueue, 0);
	private FixedLengthStringData dqProgQueueTid = new FixedLengthStringData(4).isAPartOf(dqProgQueue, 2);
	private BinaryData dqProgQueueId = new BinaryData(4, 0).isAPartOf(dqProgQueue, 6);
	/*
	 * : === END OF $NPS-DELETE-QUEUES-WS === : : == WORKING-STORAGE FIELDS FOR $NPS-FORMAT-TIME == : : (GENERATED BY
	 * $NPS-FORMAT-TIME) :
	 */
	private ZonedDecimalData foTimeNum = new ZonedDecimalData(7, 0).setPattern("-------9");

	private FixedLengthStringData foTime = new FixedLengthStringData(8).isAPartOf(foTimeNum, 0, REDEFINE);
	private FixedLengthStringData foHours = new FixedLengthStringData(2).isAPartOf(foTime, 2);
	private FixedLengthStringData foMinutes = new FixedLengthStringData(2).isAPartOf(foTime, 4);
	private FixedLengthStringData foSeconds = new FixedLengthStringData(2).isAPartOf(foTime, 6);

	private FixedLengthStringData foTimeScreen = new FixedLengthStringData(8);
	private FixedLengthStringData foScrnHours = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 0);
	private FixedLengthStringData foScrnColon1 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 2).init(":");
	private FixedLengthStringData foScrnMinutes = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 3);
	private FixedLengthStringData foScrnColon2 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 5).init(":");
	private FixedLengthStringData foScrnSeconds = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 6);

	/*
	 * : === END OF $NPS-FORMAT-TIME-WS === : &08+01 CSMT-MSG2.
	 */
	private FixedLengthStringData csmtMsg2 = new FixedLengthStringData(75);
	private FixedLengthStringData msg2Filler = new FixedLengthStringData(32).isAPartOf(csmtMsg2, 0).init(SPACES);
	private FixedLengthStringData filler19 = new FixedLengthStringData(9).isAPartOf(csmtMsg2, 32, FILLER).init(
	    "EIBFN   =");
	private FixedLengthStringData msg2Eibfn = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 41);
	private FixedLengthStringData filler20 = new FixedLengthStringData(5).isAPartOf(csmtMsg2, 48, FILLER).init("UNIT=");
	private FixedLengthStringData msg2SvcUnNo = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 53);
	private FixedLengthStringData filler21 = new FixedLengthStringData(7).isAPartOf(csmtMsg2, 60, FILLER).init(
	    "  DATE=");
	private FixedLengthStringData msg2Date = new FixedLengthStringData(8).isAPartOf(csmtMsg2, 67);
	private BinaryData csmtMsg2Length = new BinaryData(3, 0).init(75);
	private FixedLengthStringData apsHoldInvocationMode = new FixedLengthStringData(1);

	private FixedLengthStringData tpScrnReceived = new FixedLengthStringData(8);
	private Validator tpNps220Received = new Validator(tpScrnReceived, "NPS220");

	private FixedLengthStringData apsScreenFlags = new FixedLengthStringData(2);
	private FixedLengthStringData nps220CursorFlag = new FixedLengthStringData(1).isAPartOf(apsScreenFlags, 1);
	private Validator nps220CursorPos = new Validator(nps220CursorFlag, "T");

	/*
	 * APS-GENERATED DFHCOMMAREA *** LENGTH: 5620 ***
	 */
	private FixedLengthStringData dfhcommarea = new FixedLengthStringData(5620);
	private FixedLengthStringData tpHdrLinkage = new FixedLengthStringData(40).isAPartOf(dfhcommarea, 0);
	private FixedLengthStringData tpUserLinkage = new FixedLengthStringData(5500).isAPartOf(dfhcommarea, 40);
	private FixedLengthStringData tpAddrTableLinkage = new FixedLengthStringData(80).isAPartOf(dfhcommarea, 5540);
	private PointerData[] tpAddrLinkage = PtrArrayPartOfStructure(20, tpAddrTableLinkage, 0);
	private IntegerData wsFinalSub = new IntegerData();
	private TempAreaForServiceUnitDetails ps220ss = new TempAreaForServiceUnitDetails();
	private NPJServiceUnits npjxtxu = new NPJServiceUnits();
	private NPGStatesProvices npjxtxy = new NPGStatesProvices();
	private NPSServiceUnits npsxtsu = new NPSServiceUnits();
	private NPSServiceUnitCharges npsxtsc = new NPSServiceUnitCharges();
	private NPSBasUnits npsxtbu = new NPSBasUnits();
	private NPSRetailUnits npsxtru = new NPSRetailUnits();
	private ApsEibfnEibrcodeInner apsEibfnEibrcodeInner = new ApsEibfnEibrcodeInner();
	private ApsScreenAttributesInner apsScreenAttributesInner = new ApsScreenAttributesInner();
	private ClCsmtMsg1Inner clCsmtMsg1Inner = new ClCsmtMsg1Inner();
	private HaCsmtMsgInner haCsmtMsgInner = new HaCsmtMsgInner();
	private Nps220FillerRecordInner nps220FillerRecordInner = new Nps220FillerRecordInner();
	private Nps220WorkFieldsInner nps220WorkFieldsInner = new Nps220WorkFieldsInner();
	private PaFieldsInner paFieldsInner = new PaFieldsInner();
	private PfkeyFieldGrpInner pfkeyFieldGrpInner = new PfkeyFieldGrpInner();
	private TpCommareaInner tpCommareaInner = new TpCommareaInner();
	private TrcConvrConversationalInner trcConvrConversationalInner = new TrcConvrConversationalInner();
	private UpsmuiflRecInner upsmuiflRecInner = new UpsmuiflRecInner();
	private WsUpsmuiflRecInner wsUpsmuiflRecInner = new WsUpsmuiflRecInner();

	/**
	 * Default constructor.
	 */
	public ServiceUnitDetails() {
		super();
	}

	/**
	 * Overridden method to set DFHCOMMAREA
	 * 
	 * @param commArea - DFHCOMMAREA
	 */
	public void setCommArea(FixedLengthStringData commArea) {
		super.setCommArea(commArea);
		if (commArea != null) {
			dfhcommarea.changeLength(commArea.getLength());
			setAddressToAddress(dfhcommarea, commArea);
		}

	}

	/**
	 * The mainline method is the default entry point of the program when called by other programs using the Quipoz
	 * runtime framework.
	 */
	public void mainline() {
		try {
			nps220Section();
		} catch (COBOLExitProgramException e) {
			// Expected exception for control flow purposes
		}
	}

	/**
	 * Method generated from section NPS220-SECTION.
	 */
	private void nps220Section() {
		/* APS-MAIN-PARA */
		apsHousekeepingPara();
		if (tpCommareaInner.tpScreenInvoked.isTrue()) {
			ScreenReceiveMap receiveMap = CICSCommandFactory.getScreenReceiveMap(getCICSContext());
			receiveMap.setScreen(Nps220ScreenVars.class);
			receiveMap.setInto(nps220FillerRecordInner.nps220Record);
			receiveMap.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		}
		/* ##* Ending: IF TP-SCREEN-INVOKED... */
		apsUserMainPara();
		/* APS-MAIN-PARA--EXIT */
		exitProgram();
	}

	/**
	 * Method generated from paragraph MAIN-SECTION-SXIT.
	 */
	private void mainSectionSxit() {
		goBack();
		/**** APS-GENERATED HOUSEKEEPING PARAGRAPH ****/
	}

	/**
	 * Method generated from paragraph APS-HOUSEKEEPING-PARA.
	 */
	private void apsHousekeepingPara() {
		if (isEQ(getCICSContext().getEIB().getLengthCommarea(), 0)) {
			tpCommareaInner.tpCommarea.set(SPACES);
			tpCommareaInner.tpInvocationMode.set("T");
			tpCommareaInner.tpCallingProgramId.set("        ");
		} else {
			tpCommareaInner.tpCommarea.set(dfhcommarea);
		}
		/* ##* Ending: IF EIBCALEN = 0... */
		IgnoreCondition ignoreCondition = CICSCommandFactory.getIgnoreCondition(getCICSContext());
		ignoreCondition.addCondition(CICSCondition.ERROR);
		ignoreCondition.execute();
		pfkeyFieldGrpInner.pfkeyField.set(getCICSContext().getEIB().getFunctionKey());
		apsScreenFlags.set(SPACES);
	}

	/**
	 * Method generated from paragraph APS-USER-MAIN-PARA.
	 */
	private void apsUserMainPara() {
		nps220FillerRecordInner.nps220PgmLevel.set(stampLevelNumber);
		/* : === CODE GENERATED BY $NPS-HANDLE-ABEND === : */
		HandleAbend handleAbend = CICSCommandFactory.getHandleAbend(getCICSContext());
		handleAbend.setHandler(new CICSHandler() {

			@Override
			public void handle(CICSContext context) {
				z100HandleAbend();
			}
		});
		handleAbend.execute();
		/* : === END OF CODE FOR $NPS-HANDLE-ABEND === : */
		/* ##* * MAINLINE LOGIC * */
		/* ##* * THIS PARAGRAPH WILL BRANCH TO THE APPROPRIATE PROCESSING * */
		/* ##* * PARAGRAPH DEPENDING ON HOW THIS PROGRAM WAS INVOKED. * */
		if (tpCommareaInner.tpScreenInvoked.isTrue()) {
			screenInvProcessing();
		} else {
			if (tpCommareaInner.tpProgramInvoked.isTrue()) {
				programInvProcessing();
			} else {
				if (tpCommareaInner.tpTransidInvoked.isTrue()) {
					transidInvProcessing();
				}
				/* ##* Ending: IF TP-TRANSID-INVOKED... */
			}
			/* ##* Ending: IF TP-PROGRAM-INVOKED... */
		}
		/* ##* Ending: IF TP-SCREEN-INVOKED... */
	}

	/**
	 * Method generated from paragraph 1000-SCREEN-INV-PROCESSING.
	 */
	private void screenInvProcessing() {
		/* : === BEGIN CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
		ssPageNumber.set(tpCommareaInner.caCurrPageNo);
		ssArea2.set(SPACES);
		ssProgName.set("NPS220");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		z100RestoreScreen();
		ps220ss.ssNps220Record.set(ssTsRecord);
		/* : === END CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
		paFieldsInner.paFields.set(tpCommareaInner.caRemainig1);
		if (pfkeyFieldGrpInner.enterKey.isTrue()) {
			processData();
			sendScreenDataonly();
		} else {
			if (pfkeyFieldGrpInner.pf1.isTrue() || pfkeyFieldGrpInner.pf13.isTrue()) {
				if (isGT(nps220FillerRecordInner.nps220Record, LOVALUES)) {
					if (isNE(tpCommareaInner.caErrorFlag, "Y")) {
						tpCommareaInner.caErrorFlag.set("P");
					}
					/* ##* Ending: IF CA-ERROR-FLAG NOT = 'Y'... */
				}
				/* ##* Ending: IF NPS220-RECORD > LOW-VALUES... */
				editUpdateSsRecord();
				nps220WorkFieldsInner.wsXctlPgm.set("NPS050");
				xctl();
			} else {
				if (pfkeyFieldGrpInner.pf3.isTrue() || pfkeyFieldGrpInner.pf15.isTrue()) {
					compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
					if (!tpCommareaInner.userFromSco.isTrue()) {
						while (!(!(isNE(tpCommareaInner.caPgmStackLevel[tpCommareaInner.caCurrPgmIndex.toInt()], "X") && isGT(
						    tpCommareaInner.caCurrPgmIndex, 0)))) {
							compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
						}

					}
					/* ##* Ending: IF NOT USER-FROM-SCO... */
					nps220WorkFieldsInner.wsXctlPgm
					    .set(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()]);
					if (isEQ(nps220WorkFieldsInner.wsXctlSysId, "NPS")) {
						compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
					}
					/* ##* Ending: IF WS-XCTL-SYS-ID = 'NPS'... */
					xctl();
				} else {
					if (pfkeyFieldGrpInner.pf9.isTrue() || pfkeyFieldGrpInner.pf21.isTrue()) {
						nps220FillerRecordInner.nps220CommandLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220CommandAttr.set(apsScreenAttributesInner.tpAttrUnfff);
						ps220ss.scaSsNps220Command.set(nps220FillerRecordInner.scaNps220Command);
						sendScreenDataonly();
					} else {
						if (pfkeyFieldGrpInner.pf12.isTrue() || pfkeyFieldGrpInner.pf24.isTrue()) {
							compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
							nps220WorkFieldsInner.wsXctlPgm
							    .set(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()]);
							compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
							xctl();
						} else {
							if (pfkeyFieldGrpInner.pf5.isTrue() || pfkeyFieldGrpInner.pf17.isTrue()) {
								firstTimeThru();
								sendScreen();
								/* TSA-13-S */
								/* ##* PERFORM 9100-SEND-SCREEN-DATAONLY ##TSA-13-E */
							} else {
								if (pfkeyFieldGrpInner.clearKey.isTrue()) {
									firstTimeThru();
									sendScreen();
								} else {
									editUpdateSsRecord();
									nps220WorkFieldsInner.wsMessageKey.set("0003");
									sendScreenDataonly();
								}
								/* ##* Ending: IF CLEAR-KEY... */
							}
							/* ##* Ending: IF PF5 OR PF17... */
						}
						/* ##* Ending: IF PF12 OR PF24... */
					}
					/* ##* Ending: IF PF9 OR PF21... */
				}
				/* ##* Ending: IF PF3 OR PF15... */
			}
			/* ##* Ending: IF PF1 OR PF13... */
		}
		/* ##* Ending: IF ENTER-KEY... */
	}

	/**
	 * Method generated from paragraph 1100-EDIT-UPDATE-SS-RECORD.
	 */
	private void editUpdateSsRecord() {
		if (isGT(nps220FillerRecordInner.scaNps220SuName, LOVALUES)) {
			ps220ss.ssNps220SuName.set(nps220FillerRecordInner.nps220SuName);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-SU-NAME > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220AddrLine1, LOVALUES)) {
			ps220ss.ssNps220AddrLine1.set(nps220FillerRecordInner.nps220AddrLine1);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-ADDR-LINE1 > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220AddrLine2, LOVALUES)) {
			ps220ss.ssNps220AddrLine2.set(nps220FillerRecordInner.nps220AddrLine2);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-ADDR-LINE2 > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220City, LOVALUES)) {
			ps220ss.ssNps220City.set(nps220FillerRecordInner.nps220City);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CITY > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220State, LOVALUES)) {
			ps220ss.ssNps220State.set(nps220FillerRecordInner.nps220State);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-STATE > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220Zip5, LOVALUES)) {
			ps220ss.ssNps220Zip5.set(nps220FillerRecordInner.nps220Zip5);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-ZIP-5 > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220Zip4, LOVALUES)) {
			ps220ss.ssNps220Zip4.set(nps220FillerRecordInner.nps220Zip4);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-ZIP-4 > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220UnitType, LOVALUES)) {
			ps220ss.ssNps220UnitType.set(nps220FillerRecordInner.nps220UnitType);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-UNIT-TYPE > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220InqCmyCd, LOVALUES)) {
			/* CT-20S */
			ps220ss.ssNps220InqCmyCd.set(nps220FillerRecordInner.nps220InqCmyCd);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-INQ-CMY-CD > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220MsgCmyLst, LOVALUES)) {
			ps220ss.ssNps220MsgCmyLst.set(nps220FillerRecordInner.nps220MsgCmyLst);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-MSG-CMY-LST > LOW-VALUES... */
		/* CT-20E */
		if (isGT(nps220FillerRecordInner.scaNps220RegionNo, LOVALUES)) {
			ps220ss.ssNps220RegionNo.set(nps220FillerRecordInner.nps220RegionNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-REGION-NO > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CentralNo, LOVALUES)) {
			ps220ss.ssNps220CentralNo.set(nps220FillerRecordInner.nps220CentralNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CENTRAL-NO > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220HostNo, LOVALUES)) {
			ps220ss.ssNps220HostNo.set(nps220FillerRecordInner.nps220HostNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-HOST-NO > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220SvcPvdFl, LOVALUES)) {
			ps220ss.ssNps220SvcPvdFl.set(nps220FillerRecordInner.nps220SvcPvdFl);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-SVC-PVD-FL > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220MktAtvFl, LOVALUES)) {
			ps220ss.ssNps220MktAtvFl.set(nps220FillerRecordInner.nps220MktAtvFl);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-MKT-ATV-FL > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220UnitConverted, LOVALUES)) {
			ps220ss.ssNps220UnitConverted.set(nps220FillerRecordInner.nps220UnitConverted);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-UNIT-CONVERTED > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220PrtInvCryFl, LOVALUES)) {
			ps220ss.ssNps220PrtInvCryFl.set(nps220FillerRecordInner.nps220PrtInvCryFl);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-PRT-INV-CRY-FL > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220RteUnNo, LOVALUES)) {
			/* CT-20S */
			ps220ss.ssNps220RteUnNo.set(nps220FillerRecordInner.nps220RteUnNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-RTE-UN-NO > LOW-VALUES... */
		/* CT-20E */
		/* ##* ##JA-16S */
		if (isGT(nps220FillerRecordInner.scaNps220CrtDrcOrdFl, LOVALUES)) {
			ps220ss.ssNps220CrtDrcOrdFl.set(nps220FillerRecordInner.nps220CrtDrcOrdFl);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CRT-DRC-ORD-FL > LOW-VALUES... */
		/* ##* ##JA-16E */
		if (isGT(nps220FillerRecordInner.scaNps220UnOpnDtMm, LOVALUES)) {
			ps220ss.ssNps220UnOpnDtMm.set(nps220FillerRecordInner.nps220UnOpnDtMm);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-UN-OPN-DT-MM > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220UnOpnDtDd, LOVALUES)) {
			ps220ss.ssNps220UnOpnDtDd.set(nps220FillerRecordInner.nps220UnOpnDtDd);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-UN-OPN-DT-DD > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220UnOpnDtYy, LOVALUES)) {
			ps220ss.ssNps220UnOpnDtYy.set(nps220FillerRecordInner.nps220UnOpnDtYy);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-UN-OPN-DT-YY > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220SvcUnCloDtMm, LOVALUES)) {
			ps220ss.ssNps220SvcUnCloDtMm.set(nps220FillerRecordInner.nps220SvcUnCloDtMm);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-SVC-UN-CLO-DT-MM > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220SvcUnCloDtDd, LOVALUES)) {
			ps220ss.ssNps220SvcUnCloDtDd.set(nps220FillerRecordInner.nps220SvcUnCloDtDd);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-SVC-UN-CLO-DT-DD > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220SvcUnCloDtYy, LOVALUES)) {
			ps220ss.ssNps220SvcUnCloDtYy.set(nps220FillerRecordInner.nps220SvcUnCloDtYy);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-SVC-UN-CLO-DT-YY > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220PosStaDtMm, LOVALUES)) {
			ps220ss.ssNps220PosStaDtMm.set(nps220FillerRecordInner.nps220PosStaDtMm);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-POS-STA-DT-MM > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220PosStaDtDd, LOVALUES)) {
			ps220ss.ssNps220PosStaDtDd.set(nps220FillerRecordInner.nps220PosStaDtDd);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-POS-STA-DT-DD > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220PosStaDtYy, LOVALUES)) {
			ps220ss.ssNps220PosStaDtYy.set(nps220FillerRecordInner.nps220PosStaDtYy);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-POS-STA-DT-YY > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220PosUnNo, LOVALUES)) {
			ps220ss.ssNps220PosUnNo.set(nps220FillerRecordInner.nps220PosUnNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-POS-UN-NO > LOW-VALUES... */
		/* ##* ##KG-23S */
		if (isGT(nps220FillerRecordInner.scaNps220RfsAcctNo, LOVALUES)) {
			ps220ss.ssNps220RfsAcctNo.set(nps220FillerRecordInner.nps220RfsAcctNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-RFS-ACCT-NO > LOW-VALUES... */
		/* ##* ##KG-23E */
		/* ##* ##PB-19S */
		/* ##* IF SCA-NPS220-JV-UN-NO > LOW-VALUES ##RK-18S */
		/* ##* SS-NPS220-JV-UN-NO = NPS220-JV-UN-NO */
		/* ##* WS-DATA-CHANGED-FL = 'Y' ##RK-18E */
		/* ##* ##PB-19E */
		if (isGT(nps220FillerRecordInner.scaNps220CnvSpdeDtMm, LOVALUES)) {
			ps220ss.ssNps220CnvSpdeDtMm.set(nps220FillerRecordInner.nps220CnvSpdeDtMm);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-SPDE-DT-MM > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvSpdeDtDd, LOVALUES)) {
			ps220ss.ssNps220CnvSpdeDtDd.set(nps220FillerRecordInner.nps220CnvSpdeDtDd);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-SPDE-DT-DD > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvSpdeDtYy, LOVALUES)) {
			ps220ss.ssNps220CnvSpdeDtYy.set(nps220FillerRecordInner.nps220CnvSpdeDtYy);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-SPDE-DT-YY > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvNpnDtMm, LOVALUES)) {
			ps220ss.ssNps220CnvNpnDtMm.set(nps220FillerRecordInner.nps220CnvNpnDtMm);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-NPN-DT-MM > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvNpnDtDd, LOVALUES)) {
			ps220ss.ssNps220CnvNpnDtDd.set(nps220FillerRecordInner.nps220CnvNpnDtDd);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-NPN-DT-DD > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvNpnDtYy, LOVALUES)) {
			ps220ss.ssNps220CnvNpnDtYy.set(nps220FillerRecordInner.nps220CnvNpnDtYy);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-NPN-DT-YY > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvCarsDtMm, LOVALUES)) {
			ps220ss.ssNps220CnvCarsDtMm.set(nps220FillerRecordInner.nps220CnvCarsDtMm);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-CARS-DT-MM > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvCarsDtDd, LOVALUES)) {
			ps220ss.ssNps220CnvCarsDtDd.set(nps220FillerRecordInner.nps220CnvCarsDtDd);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-CARS-DT-DD > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220CnvCarsDtYy, LOVALUES)) {
			ps220ss.ssNps220CnvCarsDtYy.set(nps220FillerRecordInner.nps220CnvCarsDtYy);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CNV-CARS-DT-YY > LOW-VALUES... */
		/* JAH-15-S */
		if (isGT(nps220FillerRecordInner.scaNps220CpuAidRte, LOVALUES)) {
			ps220ss.ssNps220CpuAidRte.set(nps220FillerRecordInner.nps220CpuAidRte);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-CPU-AID-RTE > LOW-VALUES... */
		/* JAH-15-E */
		if (isGT(nps220FillerRecordInner.scaNps220StateRegNo, LOVALUES)) {
			ps220ss.ssNps220StateRegNo.set(nps220FillerRecordInner.nps220StateRegNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-STATE-REG-NO > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220FgnStrPrtMku, LOVALUES)) {
			ps220ss.ssNps220FgnStrPrtMku.set(nps220FillerRecordInner.nps220FgnStrPrtMku);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-FGN-STR-PRT-MKU > LOW-VALUES... */
		/* TSA-13-S */
		if (isGT(nps220FillerRecordInner.scaNps220InhomePrtMku, LOVALUES)) {
			ps220ss.ssNps220InhomePrtMku.set(nps220FillerRecordInner.nps220InhomePrtMku);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-INHOME-PRT-MKU > LOW-VALUES... */
		/* ##* IF SCA-NPS220-SHOP-PRT-MKU > LOW-VALUES */
		/* ##* SS-NPS220-SHOP-PRT-MKU = NPS220-SHOP-PRT-MKU */
		/* ##* WS-DATA-CHANGED-FL = 'Y' */
		/* TSA-13-E */
		if (isGT(nps220FillerRecordInner.scaNps220ShipDest, LOVALUES)) {
			ps220ss.ssNps220ShipDest.set(nps220FillerRecordInner.nps220ShipDest);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-SHIP-DEST > LOW-VALUES... */
		/* ##* ##JA-16S */
		if (isGT(nps220FillerRecordInner.scaNps220AcsDckUnNo, LOVALUES)) {
			ps220ss.ssNps220AcsDckUnNo.set(nps220FillerRecordInner.nps220AcsDckUnNo);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-ACS-DCK-UN-NO > LOW-VALUES... */
		/* ##* ##JA-16E */
		if (isGT(nps220FillerRecordInner.scaNps220Msg, LOVALUES)) {
			ps220ss.ssNps220Msg.set(nps220FillerRecordInner.nps220Msg);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-MSG > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220Msg2, LOVALUES)) {
			ps220ss.ssNps220Msg2.set(nps220FillerRecordInner.nps220Msg2);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-MSG2 > LOW-VALUES... */
		if (isGT(nps220FillerRecordInner.scaNps220Command, LOVALUES)) {
			ps220ss.ssNps220Command.set(nps220FillerRecordInner.nps220Command);
			nps220WorkFieldsInner.wsDataChangedFl.set("Y");
		}
		/* ##* Ending: IF SCA-NPS220-COMMAND > LOW-VALUES... */
		/* : === CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		ssPageNumber.set(tpCommareaInner.caCurrPageNo);
		ssArea2.set(SPACES);
		ssProgName.set("NPS220");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		ssTsRecord.set(ps220ss.ssNps220Record);
		z100SaveScreen();
	}

	/**
	 * Method generated from paragraph 1106-RESET-SCREEN-ATTR.
	 */
	private void resetScreenAttr() {
		nps220FillerRecordInner.nps220SuNameAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220AddrLine1Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220AddrLine2Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CityAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220StateAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220Zip5Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220Zip4Attr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220RegionNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CentralNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220HostNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220SvcPvdFlAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220MktAtvFlAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220UnitConvertedAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220PrtInvCryFlAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* ##* ##JA-16S */
		nps220FillerRecordInner.nps220CrtDrcOrdFlAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* ##* ##JA-16E */
		nps220FillerRecordInner.nps220UnOpnDtMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220UnOpnDtDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220UnOpnDtYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220SvcUnCloDtMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220SvcUnCloDtDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220SvcUnCloDtYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220PosStaDtMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220PosStaDtDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220PosStaDtYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220PosUnNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* ##* ##KG-23S */
		nps220FillerRecordInner.nps220RfsAcctNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* ##* ##KG-23E */
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* TP-ATTR NPS220 NORM JV-UN-NO */
		/* ##* ##PB-19E */
		/* ##* ##RK-18E */
		nps220FillerRecordInner.nps220CnvSpdeDtMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvSpdeDtDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvSpdeDtYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvNpnDtMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvNpnDtDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvNpnDtYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvCarsDtMmAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvCarsDtDdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220CnvCarsDtYyAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* JAH-15-S */
		/* ##* ##PD-24S */
		/* ##* TP-ATTR NPS220 NORM CPU-AID-RTE */
		if (isEQ(nps220WorkFieldsInner.halConvFl, "Y")) {
			nps220FillerRecordInner.nps220CpuAidRteAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		} else {
			nps220FillerRecordInner.nps220CpuAidRteAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		}
		/* ##* Ending: IF HAL-CONV-FL = 'Y'... */
		/* ##* ##PD-24E */
		/* JAH-15-E */
		nps220FillerRecordInner.nps220StateRegNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220FgnStrPrtMkuAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* TSA-13-S */
		nps220FillerRecordInner.nps220InhomePrtMkuAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* ##* TP-ATTR NPS220 NORM SHOP-PRT-MKU */
		/* TSA-13-E */
		nps220FillerRecordInner.nps220ShipDestAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* ##* ##JA-16S */
		nps220FillerRecordInner.nps220AcsDckUnNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		/* ##* ##JA-16E */
		/* ##* ##CT-20S */
		nps220FillerRecordInner.nps220InqCmyCdAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220RteUnNoAttr.set(apsScreenAttributesInner.tpAttrUnfff);
		nps220FillerRecordInner.nps220MsgCmyLstAttr.set(apsScreenAttributesInner.tpAttrUnfff);
	}

	/**
	 * Method generated from paragraph 1200-PROCESS-DATA.
	 */
	private void processData() {
		/* ##* ##PD-24S */
		halConvCheck();
		/* ##* ##PD-24E */
		if (tpCommareaInner.userFromSco.isTrue()) {
			editUpdateSsRecord();
			resetScreenAttr();
			editScreenFields();
			if ((isEQ(nps220FillerRecordInner.nps220Command, LOVALUES)) && isGT(ps220ss.ssNps220Command, SPACES)) {
				nps220FillerRecordInner.nps220Command.set(ps220ss.ssNps220Command);
			}
			/* ##* Ending: IF (NPS220-COMMAND = LOW-VALUES) AND... */
			if (isGT(nps220FillerRecordInner.nps220Record, LOVALUES) || isEQ(tpCommareaInner.caErrorFlag, "Y")
			        || isEQ(tpCommareaInner.caErrorFlag, "P") || isEQ(ps220ss.ssNps220SuName, SPACES)) {
				if (isGT(nps220FillerRecordInner.nps220Command, SPACES)) {
					if (isEQ(nps220FillerRecordInner.nps220Command, "1")) {
						if (isEQ(tpCommareaInner.caCustInd[1], "N")) {
							if (isGT(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
								/* CONTINUE_STMT */
							} else {
								nps220WorkFieldsInner.wsMessageKey.set("2497");
							}
							/* ##* Ending: IF WS-MESSAGE-KEY > SPACES ... */
						} else {
							determineSysid();
							if (nps220WorkFieldsInner.wsHomelife.isTrue()) {
								nps220FillerRecordInner.nps220CommandLength
								    .set(apsScreenAttributesInner.tpPositionCursor);
								nps220CursorFlag.set("T");
								nps220FillerRecordInner.nps220CommandAttr.set(apsScreenAttributesInner.tpAttrUbfft);
								nps220WorkFieldsInner.wsMessageKey.set("I022");
							} else {
								nps220WorkFieldsInner.wsXctlPgm.set("NPS671");
								xctl();
							}
							/* ##* Ending: IF WS-HOMELIFE ... */
						}
						/* ##* Ending: IF CA-CUST-IND(1) = 'N' ... */
					} else {
						if (isEQ(nps220FillerRecordInner.nps220Command, "2")
						        && (paFieldsInner.oldUnit.isTrue() || isEQ(tpCommareaInner.caCustInd[1], "N"))) {
							if (isEQ(tpCommareaInner.caErrorFlag, "Y")) {
								/* CONTINUE_STMT */
							} else {
								nps220WorkFieldsInner.wsXctlPgm.set("NPS221");
								xctl();
							}
							/* ##* Ending: IF CA-ERROR-FLAG = 'Y' ... */
						} else {
							nps220FillerRecordInner.nps220CommandLength.set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220CommandAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							ps220ss.scaSsNps220Command.set(nps220FillerRecordInner.scaNps220Command);
							ps220ss.ssNps220Command.set(nps220FillerRecordInner.nps220Command);
							nps220WorkFieldsInner.wsMessageKey.set("0020");
							nps220WorkFieldsInner.wsDataChangedFl.set("Y");
						}
						/* ##* Ending: IF NPS220-COMMAND = '2' ... */
					}
					/* ##* Ending: IF NPS220-COMMAND = '1' ... */
				}
				/* ##* Ending: IF NPS220-COMMAND > SPACES... */
				if (isEQ(nps220WorkFieldsInner.wsMessageKey, SPACES)
				        || isEQ(subString(tpCommareaInner.caErrorMsg, 1, 4), "4265")) {
					if (isEQ(subString(tpCommareaInner.caErrorMsg, 1, 4), "4265")) {
						nps220WorkFieldsInner.wsDataChangedFl.set("Y");
					}
					/* ##* Ending: IF CA-ERROR-MSG(1:4) = '4265' ... */
					/* CT-20E */
					tpCommareaInner.caErrorFlag.set("N");
					if (nps220WorkFieldsInner.dataChanged.isTrue()) {
						checkAddUpd();
					}
					/* ##* Ending: IF DATA-CHANGED ... */
				} else {
					tpCommareaInner.caErrorFlag.set("Y");
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES OR ... */
				if (nps220WorkFieldsInner.dataChanged.isTrue() || isGT(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
					/* CONTINUE_STMT */
				} else {
					nps220WorkFieldsInner.wsMessageKey.set("2101");
				}
				/* ##* Ending: IF DATA-CHANGED OR WS-MESSAGE-KEY > SPACES... */
				sendScreenDataonly();
			} else {
				/* NPS220-RECORD = LOW-VALUES -- NOTHING CHANGED */
				/* : === BEGIN CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
				ssPageNumber.set(tpCommareaInner.caCurrPageNo);
				ssArea2.set(SPACES);
				ssProgName.set("NPS220");
				StringUtil stringVariable1 = new StringUtil();
				stringVariable1.addExpression(ssProgNameSfx);
				stringVariable1.addExpression("0");
				stringVariable1.setStringInto(ssArea1);
				z100RestoreScreen();
				ps220ss.ssNps220Record.set(ssTsRecord);
				/* : === END CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
				nps220FillerRecordInner.nps220PgmLevel.set(stampLevelNumber);
				nps220FillerRecordInner.nps220TdScreenDate.set(tpCommareaInner.caTdScreenDate);
				nps220FillerRecordInner.nps220MsgAttr.set(apsScreenAttributesInner.tpAttrPdfff);
				nps220WorkFieldsInner.wsMessageKey.set("2101");
				/* NO DATA CHANGED */
				sendScreenDataonly();
			}
			/* ##* Ending: IF NPS220-RECORD > LOW-VALUES... */
		} else {
			/* NOT USER-FROM-SCO */
			if ((isEQ(nps220FillerRecordInner.nps220Command, LOVALUES)) && isGT(ps220ss.ssNps220Command, SPACES)) {
				nps220FillerRecordInner.nps220Command.set(ps220ss.ssNps220Command);
			}
			/* ##* Ending: IF (NPS220-COMMAND = LOW-VALUES) AND... */
			if (isEQ(nps220FillerRecordInner.nps220Command, SPACES)
			        || isEQ(nps220FillerRecordInner.nps220Command, LOVALUES)) {
				ps220ss.ssNps220Command.set(nps220FillerRecordInner.nps220Command);
				nps220WorkFieldsInner.wsMessageKey.set("3081");
				nps220FillerRecordInner.nps220CommandLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220CommandAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			} else {
				if (isEQ(nps220FillerRecordInner.nps220Command, "1")) {
					determineSysid();
					if (nps220WorkFieldsInner.wsHomelife.isTrue()) {
						nps220FillerRecordInner.nps220CommandLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220CommandAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("I022");
					} else {
						nps220WorkFieldsInner.wsXctlPgm.set("NPS671");
						xctl();
					}
					/* ##* Ending: IF WS-HOMELIFE... */
				} else {
					if (isEQ(nps220FillerRecordInner.nps220Command, "2") && paFieldsInner.oldUnit.isTrue()) {
						nps220WorkFieldsInner.wsXctlPgm.set("NPS221");
						xctl();
					} else {
						nps220FillerRecordInner.nps220CommandLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220CommandAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						ps220ss.scaSsNps220Command.set(nps220FillerRecordInner.scaNps220Command);
						ps220ss.ssNps220Command.set(nps220FillerRecordInner.nps220Command);
						nps220WorkFieldsInner.wsMessageKey.set("0020");
					}
					/* ##* Ending: IF NPS220-COMMAND = '2'... */
				}
				/* ##* Ending: IF NPS220-COMMAND = '1'... */
			}
			/* ##* Ending: IF NPS220-COMMAND = SPACES OR LOW-VALUES... */
		}
		/* ##* Ending: IF USER-FROM-SCO... */
	}

	/**
	 * Method generated from paragraph 1210-EDIT-SCREEN-FIELDS.
	 */
	private void editScreenFields() {
		/* ##* ##JA-16S */
		editAcsDckUnNo();
		/* ##* ##JA-16E */
		/* TSA-13-S */
		/* ##* WS-SHOP-MKU = SS-NPS220-SHOP-PRT-MKU */
		nps220WorkFieldsInner.wsShopMku.set(ZERO);
		/* ##* PERFORM 1251-EDIT-SHOP-PRT-MKU */
		/* TSA-13-E */
		editShipDest();
		/* TSA-13-S */
		nps220WorkFieldsInner.wsInhomeMku.set(ps220ss.ssNps220InhomePrtMku);
		editInhomePrtMku();
		/* TSA-13-E */
		nps220WorkFieldsInner.wsPrtMku.set(ps220ss.ssNps220FgnStrPrtMku);
		editFgnStrPrtMku();
		editDates();
		editFlags();
		nps220WorkFieldsInner.wsHostNum.set(ps220ss.ssNps220HostNo);
		editHost();
		if (isEQ(ps220ss.ssNps220MktAtvFl, "Y") || isEQ(ps220ss.ssNps220MktAtvFl, "N")) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps220ss.ssNps220MktAtvFl, SPACES) || isEQ(ps220ss.ssNps220MktAtvFl, LOVALUES)
			        || isEQ(ps220ss.ssNps220MktAtvFl, "?")) {
				ps220ss.ssNps220MktAtvFl.set("N");
			} else {
				nps220FillerRecordInner.nps220MktAtvFlLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220MktAtvFlAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("I015");
			}
			/* ##* Ending: IF SS-NPS220-MKT-ATV-FL = SPACES... */
		}
		/* ##* Ending: IF SS-NPS220-MKT-ATV-FL = 'Y' OR 'N'... */
		editCentral();
		nps220WorkFieldsInner.wsSvcFl.set(ps220ss.ssNps220SvcPvdFl);
		if (nps220WorkFieldsInner.onsite.isTrue() || nps220WorkFieldsInner.shop.isTrue()
		        || nps220WorkFieldsInner.both.isTrue() || nps220WorkFieldsInner.nOne.isTrue()) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps220ss.ssNps220SvcPvdFl, SPACES) || isEQ(ps220ss.ssNps220SvcPvdFl, LOVALUES)) {
				ps220ss.ssNps220SvcPvdFl.set("?");
			}
			/* ##* Ending: IF SS-NPS220-SVC-PVD-FL = SPACES OR LOW-VALUES... */
			nps220FillerRecordInner.nps220SvcPvdFlLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220SvcPvdFlAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("I028");
		}
		/* ##* Ending: IF ONSITE OR SHOP OR BOTH OR N-ONE... */
		editRegion();
		editUnitType();
		editRteUnNo();
		/* CT-20 */
		editInqCmyCd();
		/* CT-20 */
		editMsgCmyLst();
		/* CT-20 */
		editStateZip();
		if (isEQ(ps220ss.ssNps220City, SPACES) || isEQ(ps220ss.ssNps220City, LOVALUES)
		        || isEQ(ps220ss.ssNps220City, "?")) {
			ps220ss.ssNps220City.set("?");
			nps220FillerRecordInner.nps220CityLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220CityAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsLjInput.set(ps220ss.ssNps220City);
			z100LeftJustify();
			ps220ss.ssNps220City.set(npsLjOutput);
		}
		/* ##* Ending: IF SS-NPS220-CITY = SPACES... */
		if (isEQ(ps220ss.ssNps220AddrLine1, SPACES) || isEQ(ps220ss.ssNps220AddrLine1, LOVALUES)
		        || isEQ(ps220ss.ssNps220AddrLine1, "?")) {
			ps220ss.ssNps220AddrLine1.set("?");
			nps220FillerRecordInner.nps220AddrLine1Length.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220AddrLine1Attr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsLjInput.set(ps220ss.ssNps220AddrLine1);
			z100LeftJustify();
			ps220ss.ssNps220AddrLine1.set(npsLjOutput);
		}
		/* ##* Ending: IF SS-NPS220-ADDR-LINE1 = SPACES... */
		if (isEQ(ps220ss.ssNps220SuName, SPACES) || isEQ(ps220ss.ssNps220SuName, LOVALUES)
		        || isEQ(ps220ss.ssNps220SuName, "?")) {
			ps220ss.ssNps220SuName.set("?");
			nps220FillerRecordInner.nps220SuNameLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220SuNameAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsLjInput.set(ps220ss.ssNps220SuName);
			z100LeftJustify();
			ps220ss.ssNps220SuName.set(npsLjOutput);
		}
		/* ##* Ending: IF SS-NPS220-SU-NAME = SPACES... */
		setSaveScreenAttr();
		nps220FillerRecordInner.nps220Record.set(ps220ss.ssNps220Record);
	}

	/**
	 * Method generated from paragraph 1215-EDIT-STATE-ZIP.
	 */
	private void editStateZip() {
		if (isGT(ps220ss.ssNps220Zip4, SPACES)) {
			npsInput.set(ps220ss.ssNps220Zip4);
			z100RightJustify();
			nps220WorkFieldsInner.wsZip4.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220Zip4Length.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220Zip4Attr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220Zip4.set(nps220WorkFieldsInner.wsZip4);
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-ZIP-4 > SPACES... */
		if (isEQ(ps220ss.ssNps220Zip5, SPACES) || isEQ(ps220ss.ssNps220Zip5, LOVALUES)
		        || isEQ(ps220ss.ssNps220Zip5, "?")) {
			ps220ss.ssNps220Zip5.set("?");
			nps220FillerRecordInner.nps220Zip5Length.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220Zip5Attr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsInput.set(ps220ss.ssNps220Zip5);
			z100RightJustify();
			nps220WorkFieldsInner.wsZip5.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220Zip5Length.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220Zip5Attr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220Zip5.set(nps220WorkFieldsInner.wsZip5);
				nps220FillerRecordInner.nps220Zip5.set(nps220WorkFieldsInner.wsZip5);
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-ZIP-5 = SPACES... */
		if (isEQ(ps220ss.ssNps220State, SPACES) || isEQ(ps220ss.ssNps220State, LOVALUES)
		        || isEQ(ps220ss.ssNps220State, "?")) {
			ps220ss.ssNps220State.set("?");
			nps220FillerRecordInner.nps220StateLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220StateAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			nps220WorkFieldsInner.wsState.set(ps220ss.ssNps220State);
			sqlerrorflag = false;
			try {
				sqlstmt = " SELECT  XY_ST_PR_CODE" + " FROM   " + getAppVars().getTableNameOverriden("NPJXTXY") + " "
				        + " WHERE XY_ST_PR_CODE = ?";
				sqlinto = new BaseData[] { npjxtxy.xyStPrCode };
				sqlparams = new BaseData[] { nps220WorkFieldsInner.wsState };
				getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
			} catch (SQLException ex) {
				sqlerrorflag = true;
				getAppVars().setSqlErrorCode(ex);
			}
			if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
				ps220ss.ssNps220State.set(nps220WorkFieldsInner.wsState);
			} else {
				if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
					nps220FillerRecordInner.nps220StateLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220StateAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("0011");
				} else {
					sqCallNumber.set("1");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 100... */
			}
			/* ##* Ending: IF SQLCODE = 0... */
		}
		/* ##* Ending: IF SS-NPS220-STATE = SPACES... */
	}

	/**
	 * Method generated from paragraph 1220-EDIT-REGION.
	 */
	private void editRegion() {
		if (isEQ(ps220ss.ssNps220RegionNo, SPACES) || isEQ(ps220ss.ssNps220RegionNo, LOVALUES)
		        || isEQ(ps220ss.ssNps220RegionNo, "?")) {
			ps220ss.ssNps220RegionNo.set("?");
			nps220FillerRecordInner.nps220RegionNoLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220RegionNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsInput.set(ps220ss.ssNps220RegionNo);
			z100RightJustify();
			nps220WorkFieldsInner.wsRegionNum.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220RegionNoLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220RegionNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220RegionNo.set(nps220WorkFieldsInner.wsRegionNum);
				nps220WorkFieldsInner.wsRegionNo.set(nps220WorkFieldsInner.wsRegionNum);
				sqlerrorflag = false;
				try {
					sqlstmt = " SELECT  RGN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPJXTXR") + " "
					        + " WHERE RGN_NO = ?";
					sqlinto = new BaseData[] { npsxtbu.rgnNo };
					sqlparams = new BaseData[] { nps220WorkFieldsInner.wsRegionNo };
					getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					ps220ss.ssNps220RegionNo.set(nps220WorkFieldsInner.wsRegionNo);
				} else {
					if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
						if (isEQ(nps220WorkFieldsInner.wsRegionNo, ps220ss.ssNps220SuNo)) {
							/* CONTINUE_STMT */
						} else {
							nps220FillerRecordInner.nps220RegionNoLength.set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220RegionNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0022");
						}
						/* ##* Ending: IF WS-REGION-NO = SS-NPS220-SU-NO ... */
					} else {
						sqCallNumber.set("2");
						z991SqlError();
					}
					/* ##* Ending: IF SQLCODE = +100 ... */
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-REGION-NO = SPACES... */
	}

	/**
	 * Method generated from paragraph 1225-EDIT-CENTRAL.
	 */
	private void editCentral() {
		if (isEQ(ps220ss.ssNps220CentralNo, SPACES) || isEQ(ps220ss.ssNps220CentralNo, LOVALUES)
		        || isEQ(ps220ss.ssNps220CentralNo, "?")) {
			ps220ss.ssNps220CentralNo.set("?");
			nps220FillerRecordInner.nps220CentralNoLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220CentralNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsInput.set(ps220ss.ssNps220CentralNo);
			z100RightJustify();
			nps220WorkFieldsInner.wsCentralNum.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220CentralNoLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220CentralNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220CentralNo.set(nps220WorkFieldsInner.wsCentralNum);
				nps220WorkFieldsInner.wsCentralNo.set(nps220WorkFieldsInner.wsCentralNum);
				if (isNE(nps220WorkFieldsInner.wsCentralNo, tpCommareaInner.caSvcUnNo)) {
					sqlerrorflag = false;
					try {
						sqlstmt = " SELECT  UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
						        + " WHERE UN_NO = ?";
						sqlinto = new BaseData[] { npsxtbu.unNo };
						sqlparams = new BaseData[] { nps220WorkFieldsInner.wsCentralNo };
						getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
					} catch (SQLException ex) {
						sqlerrorflag = true;
						getAppVars().setSqlErrorCode(ex);
					}
					if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
						ps220ss.ssNps220CentralNo.set(nps220WorkFieldsInner.wsCentralNo);
					} else {
						if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
							if (isEQ(nps220WorkFieldsInner.wsCentralNo, ps220ss.ssNps220SuNo)) {
								/* CONTINUE_STMT */
							} else {
								nps220FillerRecordInner.nps220CentralNoLength
								    .set(apsScreenAttributesInner.tpPositionCursor);
								nps220CursorFlag.set("T");
								nps220FillerRecordInner.nps220CentralNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
								nps220WorkFieldsInner.wsMessageKey.set("0022");
							}
							/* ##* Ending: IF WS-CENTRAL-NO = SS-NPS220-SU-NO ... */
						} else {
							sqCallNumber.set("3");
							z991SqlError();
						}
						/* ##* Ending: IF SQLCODE = 100 ... */
					}
					/* ##* Ending: IF SQLCODE = 0... */
				}
				/* ##* Ending: IF WS-CENTRAL-NO NOT = CA-SVC-UN-NO... */
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-CENTRAL-NO = SPACES... */
	}

	/**
	 * Method generated from paragraph 1230-EDIT-HOST.
	 */
	private void editHost() {
		if (isEQ(ps220ss.ssNps220HostNo, SPACES) || isEQ(ps220ss.ssNps220HostNo, LOVALUES)
		        || isEQ(ps220ss.ssNps220HostNo, "?")) {
			ps220ss.ssNps220HostNo.set("?");
			nps220FillerRecordInner.nps220HostNoLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220HostNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsInput.set(ps220ss.ssNps220HostNo);
			z100RightJustify();
			nps220WorkFieldsInner.wsHostNum.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220HostNoLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220HostNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220HostNo.set(nps220WorkFieldsInner.wsHostNo);
				sqlerrorflag = false;
				try {
					sqlstmt = " SELECT  UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
					        + " WHERE UN_NO = ?";
					sqlinto = new BaseData[] { npsxtbu.unNo };
					sqlparams = new BaseData[] { nps220WorkFieldsInner.wsHostNo };
					getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					/* CONTINUE_STMT */
				} else {
					if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
						if (isEQ(nps220WorkFieldsInner.wsHostNo, ps220ss.ssNps220SuNo)) {
							/* CONTINUE_STMT */
						} else {
							nps220FillerRecordInner.nps220HostNoLength.set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220HostNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0022");
						}
						/* ##* Ending: IF WS-HOST-NO = SS-NPS220-SU-NO... */
					} else {
						sqCallNumber.set("4");
						z991SqlError();
					}
					/* ##* Ending: IF SQLCODE = +100 ... */
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-HOST-NO = SPACES... */
	}

	/**
	 * Method generated from paragraph 1235-EDIT-FLAGS.
	 */
	private void editFlags() {
		/* ##* ##JA-16S */
		if (isEQ(ps220ss.ssNps220CrtDrcOrdFl, "Y") || isEQ(ps220ss.ssNps220CrtDrcOrdFl, "N")) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps220ss.ssNps220CrtDrcOrdFl, SPACES) || isEQ(ps220ss.ssNps220CrtDrcOrdFl, LOVALUES)) {
				ps220ss.ssNps220CrtDrcOrdFl.set("N");
			} else {
				nps220FillerRecordInner.nps220CrtDrcOrdFlLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220CrtDrcOrdFlAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("I015");
			}
			/* ##* Ending: IF SS-NPS220-CRT-DRC-ORD-FL = SPACES OR LOW-VALUES... */
		}
		/* ##* Ending: IF SS-NPS220-CRT-DRC-ORD-FL = 'Y' OR 'N'... */
		/* ##* ##JA-16E */
		nps220WorkFieldsInner.wsSvcFl.set(ps220ss.ssNps220PrtInvCryFl);
		if (nps220WorkFieldsInner.aLlow.isTrue() || nps220WorkFieldsInner.both.isTrue()
		        || nps220WorkFieldsInner.carry.isTrue() || nps220WorkFieldsInner.nOne.isTrue()) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps220ss.ssNps220PrtInvCryFl, SPACES) || isEQ(ps220ss.ssNps220PrtInvCryFl, LOVALUES)) {
				ps220ss.ssNps220PrtInvCryFl.set("?");
			}
			/* ##* Ending: IF SS-NPS220-PRT-INV-CRY-FL = SPACES OR LOW-VALUES... */
			nps220FillerRecordInner.nps220PrtInvCryFlLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220PrtInvCryFlAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("I029");
		}
		/* ##* Ending: IF A-LLOW OR BOTH OR CARRY OR N-ONE... */
		nps220WorkFieldsInner.wsPosUnNum.set(ps220ss.ssNps220PosUnNo);
		editPosUnitNo();
		/* ##* ##KG-23s */
		nps220WorkFieldsInner.wsRfsAcctNum.set(ps220ss.ssNps220RfsAcctNo);
		editRfsAcctNo();
		/* ##* ##KG-23E */
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* WS-JV-UN-NUM = SS-NPS220-JV-UN-NO */
		/* ##* IF WS-JV-UN-NO > SPACES */
		/* ##* PERFORM 1246-EDIT-JV-UNIT-NO */
		/* ##* ##PB-19E */
		/* ##* ##RK-18E */
		if (isEQ(ps220ss.ssNps220UnitConverted, "Y") || isEQ(ps220ss.ssNps220UnitConverted, "N")) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps220ss.ssNps220UnitConverted, SPACES) || isEQ(ps220ss.ssNps220UnitConverted, LOVALUES)) {
				ps220ss.ssNps220UnitConverted.set("N");
			} else {
				nps220FillerRecordInner.nps220UnitConvertedLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220UnitConvertedAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("I015");
			}
			/* ##* Ending: IF SS-NPS220-UNIT-CONVERTED = SPACES OR LOW-VALUES... */
		}
		/* ##* Ending: IF SS-NPS220-UNIT-CONVERTED = 'Y' OR 'N'... */
		if (isEQ(ps220ss.ssNps220CpuAidRte, "Y") || isEQ(ps220ss.ssNps220CpuAidRte, "N")
		        || isEQ(ps220ss.ssNps220CpuAidRte, "I")) {
			/* CONTINUE_STMT */
		} else {
			if (isEQ(ps220ss.ssNps220CpuAidRte, SPACES) || isEQ(ps220ss.ssNps220CpuAidRte, LOVALUES)) {
				ps220ss.ssNps220CpuAidRte.set("N");
			} else {
				nps220FillerRecordInner.nps220CpuAidRteLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220CpuAidRteAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("I030");
			}
			/* ##* Ending: IF SS-NPS220-CPU-AID-RTE = SPACES OR LOW-VALUES... */
		}
		/* ##* Ending: IF SS-NPS220-CPU-AID-RTE = 'Y' OR 'N' OR 'I'... */
	}

	/**
	 * Method generated from paragraph 1240-EDIT-DATES.
	 */
	private void editDates() {
		/* ##* EDIT THE UNIT CONVERTED TO CARS DATE */
		if (isGT(ps220ss.ssNps220CnvCarsDtMm, SPACES) || isGT(ps220ss.ssNps220CnvCarsDtDd, SPACES)
		        || isGT(ps220ss.ssNps220CnvCarsDtYy, SPACES)) {
			if (isEQ(ps220ss.ssNps220CnvCarsDtMm, SPACES) || isEQ(ps220ss.ssNps220CnvCarsDtMm, LOVALUES)
			        || isEQ(ps220ss.ssNps220CnvCarsDtMm, "?")) {
				ps220ss.ssNps220CnvCarsDtMm.set("?");
				nps220FillerRecordInner.nps220CnvCarsDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220CnvCarsDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				if (isEQ(ps220ss.ssNps220CnvCarsDtDd, SPACES) || isEQ(ps220ss.ssNps220CnvCarsDtDd, LOVALUES)
				        || isEQ(ps220ss.ssNps220CnvCarsDtDd, "?")) {
					ps220ss.ssNps220CnvCarsDtDd.set("?");
					nps220FillerRecordInner.nps220CnvCarsDtDdLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220CnvCarsDtDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					if (isEQ(ps220ss.ssNps220CnvCarsDtYy, SPACES) || isEQ(ps220ss.ssNps220CnvCarsDtYy, LOVALUES)
					        || isEQ(ps220ss.ssNps220CnvCarsDtYy, "?")) {
						ps220ss.ssNps220CnvCarsDtYy.set("?");
						nps220FillerRecordInner.nps220CnvCarsDtYyLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220CnvCarsDtYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("0009");
					} else {
						npsFormatNo.set("1");
						npsDateErr.set("N");
						npsFormatMmX.set(ps220ss.ssNps220CnvCarsDtMm);
						npsInput.set(npsFormatMmX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatMm.set(npsRjDate);
							ps220ss.ssNps220CnvCarsDtMm.set(npsFormatMm);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatDdX.set(ps220ss.ssNps220CnvCarsDtDd);
						npsInput.set(npsFormatDdX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatDd.set(npsRjDate);
							ps220ss.ssNps220CnvCarsDtDd.set(npsFormatDd);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatYyX.set(ps220ss.ssNps220CnvCarsDtYy);
						npsInput.set(npsFormatYyX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatYy.set(npsRjDate);
							ps220ss.ssNps220CnvCarsDtYy.set(npsFormatYy);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						if (isEQ(npsDateErr, "N")) {
							z100CheckDate();
						}
						/* ##* Ending: IF NPS-DATE-ERR = 'N'... */
						if (npsDateError.isTrue()) {
							nps220FillerRecordInner.nps220CnvCarsDtMmLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220CnvCarsDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0016");
						}
						/* ##* Ending: IF NPS-DATE-ERROR... */
					}
					/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-YY = SPACES... */
				}
				/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-DD = SPACES... */
			}
			/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-MM = SPACES... */
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-MM > SPACES OR... */
		/* ##* EDIT THE POS START DATE */
		if (isGT(ps220ss.ssNps220PosStaDtMm, SPACES) || isGT(ps220ss.ssNps220PosStaDtDd, SPACES)
		        || isGT(ps220ss.ssNps220PosStaDtYy, SPACES)) {
			if (isEQ(ps220ss.ssNps220PosStaDtMm, SPACES) || isEQ(ps220ss.ssNps220PosStaDtMm, LOVALUES)
			        || isEQ(ps220ss.ssNps220PosStaDtMm, "?")) {
				ps220ss.ssNps220PosStaDtMm.set("?");
				nps220FillerRecordInner.nps220PosStaDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220PosStaDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				if (isEQ(ps220ss.ssNps220PosStaDtDd, SPACES) || isEQ(ps220ss.ssNps220PosStaDtDd, LOVALUES)
				        || isEQ(ps220ss.ssNps220PosStaDtDd, "?")) {
					ps220ss.ssNps220PosStaDtDd.set("?");
					nps220FillerRecordInner.nps220PosStaDtDdLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220PosStaDtDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					if (isEQ(ps220ss.ssNps220PosStaDtYy, SPACES) || isEQ(ps220ss.ssNps220PosStaDtYy, LOVALUES)
					        || isEQ(ps220ss.ssNps220PosStaDtYy, "?")) {
						ps220ss.ssNps220PosStaDtYy.set("?");
						nps220FillerRecordInner.nps220PosStaDtYyLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220PosStaDtYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("0009");
					} else {
						npsFormatNo.set("1");
						npsDateErr.set("N");
						npsFormatMmX.set(ps220ss.ssNps220PosStaDtMm);
						npsInput.set(npsFormatMmX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatMm.set(npsRjDate);
							ps220ss.ssNps220PosStaDtMm.set(npsFormatMm);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatDdX.set(ps220ss.ssNps220PosStaDtDd);
						npsInput.set(npsFormatDdX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatDd.set(npsRjDate);
							ps220ss.ssNps220PosStaDtDd.set(npsFormatDd);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatYyX.set(ps220ss.ssNps220PosStaDtYy);
						npsInput.set(npsFormatYyX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatYy.set(npsRjDate);
							ps220ss.ssNps220PosStaDtYy.set(npsFormatYy);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						if (isEQ(npsDateErr, "N")) {
							z100CheckDate();
						}
						/* ##* Ending: IF NPS-DATE-ERR = 'N'... */
						if (npsDateError.isTrue()) {
							nps220FillerRecordInner.nps220PosStaDtMmLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220PosStaDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0016");
						}
						/* ##* Ending: IF NPS-DATE-ERROR... */
					}
					/* ##* Ending: IF SS-NPS220-POS-STA-DT-YY = SPACES... */
				}
				/* ##* Ending: IF SS-NPS220-POS-STA-DT-DD = SPACES... */
			}
			/* ##* Ending: IF SS-NPS220-POS-STA-DT-MM = SPACES... */
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-MM > SPACES OR... */
		/* ##* EDIT THE UNIT CONVERTED TO NPN DATE */
		if (isGT(ps220ss.ssNps220CnvNpnDtMm, SPACES) || isGT(ps220ss.ssNps220CnvNpnDtDd, SPACES)
		        || isGT(ps220ss.ssNps220CnvNpnDtYy, SPACES)) {
			if (isEQ(ps220ss.ssNps220CnvNpnDtMm, SPACES) || isEQ(ps220ss.ssNps220CnvNpnDtMm, LOVALUES)
			        || isEQ(ps220ss.ssNps220CnvNpnDtMm, "?")) {
				ps220ss.ssNps220CnvNpnDtMm.set("?");
				nps220FillerRecordInner.nps220CnvNpnDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220CnvNpnDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				if (isEQ(ps220ss.ssNps220CnvNpnDtDd, SPACES) || isEQ(ps220ss.ssNps220CnvNpnDtDd, LOVALUES)
				        || isEQ(ps220ss.ssNps220CnvNpnDtDd, "?")) {
					ps220ss.ssNps220CnvNpnDtDd.set("?");
					nps220FillerRecordInner.nps220CnvNpnDtDdLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220CnvNpnDtDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					if (isEQ(ps220ss.ssNps220CnvNpnDtYy, SPACES) || isEQ(ps220ss.ssNps220CnvNpnDtYy, LOVALUES)
					        || isEQ(ps220ss.ssNps220CnvNpnDtYy, "?")) {
						ps220ss.ssNps220CnvNpnDtYy.set("?");
						nps220FillerRecordInner.nps220CnvNpnDtYyLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220CnvNpnDtYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("0009");
					} else {
						npsFormatNo.set("1");
						npsDateErr.set("N");
						npsFormatMmX.set(ps220ss.ssNps220CnvNpnDtMm);
						npsInput.set(npsFormatMmX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatMm.set(npsRjDate);
							ps220ss.ssNps220CnvNpnDtMm.set(npsFormatMm);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatDdX.set(ps220ss.ssNps220CnvNpnDtDd);
						npsInput.set(npsFormatDdX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatDd.set(npsRjDate);
							ps220ss.ssNps220CnvNpnDtDd.set(npsFormatDd);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatYyX.set(ps220ss.ssNps220CnvNpnDtYy);
						npsInput.set(npsFormatYyX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatYy.set(npsRjDate);
							ps220ss.ssNps220CnvNpnDtYy.set(npsFormatYy);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						if (isEQ(npsDateErr, "N")) {
							z100CheckDate();
						}
						/* ##* Ending: IF NPS-DATE-ERR = 'N'... */
						if (npsDateError.isTrue()) {
							nps220FillerRecordInner.nps220CnvNpnDtMmLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220CnvNpnDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0016");
						}
						/* ##* Ending: IF NPS-DATE-ERROR... */
					}
					/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-YY = SPACES... */
				}
				/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-DD = SPACES... */
			}
			/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-MM = SPACES... */
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-MM > SPACES OR... */
		/* ##* EDIT THE UNIT CLOSE DATE */
		if (isGT(ps220ss.ssNps220SvcUnCloDtMm, SPACES) || isGT(ps220ss.ssNps220SvcUnCloDtDd, SPACES)
		        || isGT(ps220ss.ssNps220SvcUnCloDtYy, SPACES)) {
			if (isEQ(ps220ss.ssNps220SvcUnCloDtMm, SPACES) || isEQ(ps220ss.ssNps220SvcUnCloDtMm, LOVALUES)
			        || isEQ(ps220ss.ssNps220SvcUnCloDtMm, "?")) {
				ps220ss.ssNps220SvcUnCloDtMm.set("?");
				nps220FillerRecordInner.nps220SvcUnCloDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220SvcUnCloDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				if (isEQ(ps220ss.ssNps220SvcUnCloDtDd, SPACES) || isEQ(ps220ss.ssNps220SvcUnCloDtDd, LOVALUES)
				        || isEQ(ps220ss.ssNps220SvcUnCloDtDd, "?")) {
					ps220ss.ssNps220SvcUnCloDtDd.set("?");
					nps220FillerRecordInner.nps220SvcUnCloDtDdLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220SvcUnCloDtDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					if (isEQ(ps220ss.ssNps220SvcUnCloDtYy, SPACES) || isEQ(ps220ss.ssNps220SvcUnCloDtYy, LOVALUES)
					        || isEQ(ps220ss.ssNps220SvcUnCloDtYy, "?")) {
						ps220ss.ssNps220SvcUnCloDtYy.set("?");
						nps220FillerRecordInner.nps220SvcUnCloDtYyLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220SvcUnCloDtYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("0009");
					} else {
						npsFormatNo.set("1");
						npsDateErr.set("N");
						npsFormatMmX.set(ps220ss.ssNps220SvcUnCloDtMm);
						npsInput.set(npsFormatMmX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatMm.set(npsRjDate);
							ps220ss.ssNps220SvcUnCloDtMm.set(npsFormatMm);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatDdX.set(ps220ss.ssNps220SvcUnCloDtDd);
						npsInput.set(npsFormatDdX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatDd.set(npsRjDate);
							ps220ss.ssNps220SvcUnCloDtDd.set(npsFormatDd);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatYyX.set(ps220ss.ssNps220SvcUnCloDtYy);
						npsInput.set(npsFormatYyX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatYy.set(npsRjDate);
							ps220ss.ssNps220SvcUnCloDtYy.set(npsFormatYy);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						if (isEQ(npsDateErr, "N")) {
							z100CheckDate();
						}
						/* ##* Ending: IF NPS-DATE-ERR = 'N'... */
						if (npsDateError.isTrue()) {
							nps220FillerRecordInner.nps220SvcUnCloDtMmLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220SvcUnCloDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0016");
						}
						/* ##* Ending: IF NPS-DATE-ERROR... */
					}
					/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-YY = SPACES... */
				}
				/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-DD = SPACES... */
			}
			/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-MM = SPACES... */
			nps220WorkFieldsInner.wsSvcUnCloDtMm.set(ps220ss.ssNps220SvcUnCloDtMm);
			nps220WorkFieldsInner.wsSvcUnCloDtDd.set(ps220ss.ssNps220SvcUnCloDtDd);
			nps220WorkFieldsInner.wsSvcUnCloDtYy.set(ps220ss.ssNps220SvcUnCloDtYy);
			if (isGT(nps220WorkFieldsInner.wsSvcUnCloDtYy, 40)) {
				nps220WorkFieldsInner.wsSvcUnCloDtCc.set(19);
			} else {
				nps220WorkFieldsInner.wsSvcUnCloDtCc.set(20);
			}
			/* ##* Ending: IF WS-SVC-UN-CLO-DT-YY > 40... */
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-MM > SPACES OR... */
		/* ##* EDIT THE UNIT CONVERTED TO SPDE DATE */
		if (isGT(ps220ss.ssNps220CnvSpdeDtMm, SPACES) || isGT(ps220ss.ssNps220CnvSpdeDtDd, SPACES)
		        || isGT(ps220ss.ssNps220CnvSpdeDtYy, SPACES)) {
			if (isEQ(ps220ss.ssNps220CnvSpdeDtMm, SPACES) || isEQ(ps220ss.ssNps220CnvSpdeDtMm, LOVALUES)
			        || isEQ(ps220ss.ssNps220CnvSpdeDtMm, "?")) {
				ps220ss.ssNps220CnvSpdeDtMm.set("?");
				nps220FillerRecordInner.nps220CnvSpdeDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220CnvSpdeDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				if (isEQ(ps220ss.ssNps220CnvSpdeDtDd, SPACES) || isEQ(ps220ss.ssNps220CnvSpdeDtDd, LOVALUES)
				        || isEQ(ps220ss.ssNps220CnvSpdeDtDd, "?")) {
					ps220ss.ssNps220CnvSpdeDtDd.set("?");
					nps220FillerRecordInner.nps220CnvSpdeDtDdLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220CnvSpdeDtDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					if (isEQ(ps220ss.ssNps220CnvSpdeDtYy, SPACES) || isEQ(ps220ss.ssNps220CnvSpdeDtYy, LOVALUES)
					        || isEQ(ps220ss.ssNps220CnvSpdeDtYy, "?")) {
						ps220ss.ssNps220CnvSpdeDtYy.set("?");
						nps220FillerRecordInner.nps220CnvSpdeDtYyLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220CnvSpdeDtYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("0009");
					} else {
						npsFormatNo.set("1");
						npsDateErr.set("N");
						npsFormatMmX.set(ps220ss.ssNps220CnvSpdeDtMm);
						npsInput.set(npsFormatMmX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatMm.set(npsRjDate);
							ps220ss.ssNps220CnvSpdeDtMm.set(npsFormatMm);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatDdX.set(ps220ss.ssNps220CnvSpdeDtDd);
						npsInput.set(npsFormatDdX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatDd.set(npsRjDate);
							ps220ss.ssNps220CnvSpdeDtDd.set(npsFormatDd);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						npsFormatYyX.set(ps220ss.ssNps220CnvSpdeDtYy);
						npsInput.set(npsFormatYyX);
						z100RightJustify();
						npsRjDate.set(npsOutput);
						if (npsRightJustifyValid.isTrue()) {
							npsFormatYy.set(npsRjDate);
							ps220ss.ssNps220CnvSpdeDtYy.set(npsFormatYy);
						} else {
							npsDateErr.set("Y");
						}
						/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
						if (isEQ(npsDateErr, "N")) {
							z100CheckDate();
						}
						/* ##* Ending: IF NPS-DATE-ERR = 'N'... */
						if (npsDateError.isTrue()) {
							nps220FillerRecordInner.nps220CnvSpdeDtMmLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220CnvSpdeDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0016");
						}
						/* ##* Ending: IF NPS-DATE-ERROR... */
					}
					/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-YY = SPACES... */
				}
				/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-DD = SPACES... */
			}
			/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-MM = SPACES... */
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-MM > SPACES OR... */
		/* ##* EDIT THE UNIT OPEN DATE */
		if (isEQ(ps220ss.ssNps220UnOpnDtMm, SPACES) || isEQ(ps220ss.ssNps220UnOpnDtMm, LOVALUES)
		        || isEQ(ps220ss.ssNps220UnOpnDtMm, "?")) {
			ps220ss.ssNps220UnOpnDtMm.set("?");
			nps220FillerRecordInner.nps220UnOpnDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220UnOpnDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			if (isEQ(ps220ss.ssNps220UnOpnDtDd, SPACES) || isEQ(ps220ss.ssNps220UnOpnDtDd, LOVALUES)
			        || isEQ(ps220ss.ssNps220UnOpnDtDd, "?")) {
				ps220ss.ssNps220UnOpnDtDd.set("?");
				nps220FillerRecordInner.nps220UnOpnDtDdLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220UnOpnDtDdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				if (isEQ(ps220ss.ssNps220UnOpnDtYy, SPACES) || isEQ(ps220ss.ssNps220UnOpnDtYy, LOVALUES)
				        || isEQ(ps220ss.ssNps220UnOpnDtYy, "?")) {
					ps220ss.ssNps220UnOpnDtYy.set("?");
					nps220FillerRecordInner.nps220UnOpnDtYyLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220UnOpnDtYyAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("0009");
				} else {
					npsFormatNo.set("1");
					npsDateErr.set("N");
					npsFormatMmX.set(ps220ss.ssNps220UnOpnDtMm);
					npsInput.set(npsFormatMmX);
					z100RightJustify();
					npsRjDate.set(npsOutput);
					if (npsRightJustifyValid.isTrue()) {
						npsFormatMm.set(npsRjDate);
						ps220ss.ssNps220UnOpnDtMm.set(npsFormatMm);
					} else {
						npsDateErr.set("Y");
					}
					/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
					npsFormatDdX.set(ps220ss.ssNps220UnOpnDtDd);
					npsInput.set(npsFormatDdX);
					z100RightJustify();
					npsRjDate.set(npsOutput);
					if (npsRightJustifyValid.isTrue()) {
						npsFormatDd.set(npsRjDate);
						ps220ss.ssNps220UnOpnDtDd.set(npsFormatDd);
					} else {
						npsDateErr.set("Y");
					}
					/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
					npsFormatYyX.set(ps220ss.ssNps220UnOpnDtYy);
					npsInput.set(npsFormatYyX);
					z100RightJustify();
					npsRjDate.set(npsOutput);
					if (npsRightJustifyValid.isTrue()) {
						npsFormatYy.set(npsRjDate);
						ps220ss.ssNps220UnOpnDtYy.set(npsFormatYy);
					} else {
						npsDateErr.set("Y");
					}
					/* ##* Ending: IF NPS-RIGHT-JUSTIFY-VALID... */
					if (isEQ(npsDateErr, "N")) {
						z100CheckDate();
					}
					/* ##* Ending: IF NPS-DATE-ERR = 'N'... */
					if (npsDateError.isTrue()) {
						nps220FillerRecordInner.nps220UnOpnDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220UnOpnDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("0016");
					}
					/* ##* Ending: IF NPS-DATE-ERROR... */
				}
				/* ##* Ending: IF SS-NPS220-UN-OPN-DT-YY = SPACES... */
			}
			/* ##* Ending: IF SS-NPS220-UN-OPN-DT-DD = SPACES... */
		}
		/* ##* Ending: IF SS-NPS220-UN-OPN-DT-MM = SPACES... */
		nps220WorkFieldsInner.wsUnOpnDtMm.set(ps220ss.ssNps220UnOpnDtMm);
		nps220WorkFieldsInner.wsUnOpnDtDd.set(ps220ss.ssNps220UnOpnDtDd);
		nps220WorkFieldsInner.wsUnOpnDtYy.set(ps220ss.ssNps220UnOpnDtYy);
		if (isGT(nps220WorkFieldsInner.wsUnOpnDtYy, 40)) {
			nps220WorkFieldsInner.wsUnOpnDtCc.set(19);
		} else {
			nps220WorkFieldsInner.wsUnOpnDtCc.set(20);
		}
		/* ##* Ending: IF WS-UN-OPN-DT-YY > 40... */
		if (isGT(ps220ss.ssNps220SvcUnCloDtMm, SPACES) && isGT(ps220ss.ssNps220SvcUnCloDtDd, SPACES)
		        && isGT(ps220ss.ssNps220SvcUnCloDtYy, SPACES) && isEQ(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
			if (isGT(nps220WorkFieldsInner.wsUnOpnDt, nps220WorkFieldsInner.wsSvcUnCloDt)) {
				nps220WorkFieldsInner.wsMessageKey.set("0016");
				nps220FillerRecordInner.nps220SvcUnCloDtMmLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220SvcUnCloDtMmAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			}
			/* ##* Ending: IF WS-UN-OPN-DT > WS-SVC-UN-CLO-DT... */
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-MM > SPACES AND... */
	}

	/**
	 * Method generated from paragraph 1245-EDIT-POS-UNIT-NO.
	 */
	private void editPosUnitNo() {
		if (isEQ(ps220ss.ssNps220PosUnNo, SPACES) || isEQ(ps220ss.ssNps220PosUnNo, LOVALUES)
		        || isEQ(ps220ss.ssNps220PosUnNo, "?")) {
			ps220ss.ssNps220PosUnNo.set("?");
			nps220FillerRecordInner.nps220PosUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220PosUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsInput.set(ps220ss.ssNps220PosUnNo);
			z100RightJustify();
			nps220WorkFieldsInner.wsPosUnNum.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220PosUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220PosUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220PosUnNo.set(nps220WorkFieldsInner.wsPosUnNo);
				sqlerrorflag = false;
				try {
					sqlstmt = " SELECT  UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
					        + " WHERE UN_NO = ?";
					sqlinto = new BaseData[] { npsxtbu.unNo };
					sqlparams = new BaseData[] { nps220WorkFieldsInner.wsPosUnNo };
					getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					/* CONTINUE_STMT */
				} else {
					if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
						if (isEQ(nps220WorkFieldsInner.wsPosUnNo, ps220ss.ssNps220SuNo)) {
							/* CONTINUE_STMT */
						} else {
							nps220FillerRecordInner.nps220PosUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220PosUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0022");
						}
						/* ##* Ending: IF WS-POS-UN-NO = SS-NPS220-SU-NO... */
					} else {
						sqCallNumber.set("5");
						z991SqlError();
					}
					/* ##* Ending: IF SQLCODE = +100 ... */
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-POS-UN-NO = SPACES... */
	}

	/**
	 * Method generated from paragraph 1248-EDIT-RFS-ACCT-NO.
	 */
	private void editRfsAcctNo() {
		if (isEQ(ps220ss.ssNps220RfsAcctNo, SPACES) || isEQ(ps220ss.ssNps220RfsAcctNo, LOVALUES)
		        || isEQ(ps220ss.ssNps220RfsAcctNo, "?")) {
			ps220ss.ssNps220RfsAcctNo.set("?");
			nps220FillerRecordInner.nps220RfsAcctNoLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220RfsAcctNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			npsInput.set(ps220ss.ssNps220RfsAcctNo);
			z100RightJustify();
			nps220WorkFieldsInner.wsRfsAcctNum.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220RfsAcctNoLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220RfsAcctNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220RfsAcctNo.set(nps220WorkFieldsInner.wsRfsAcctNo);
				sqlerrorflag = false;
				try {
					sqlstmt = " SELECT  RFS_UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
					        + " WHERE UN_NO = ?";
					sqlinto = new BaseData[] { npsxtbu.rfsUnNo };
					sqlparams = new BaseData[] { nps220WorkFieldsInner.wsPosUnNo };
					getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					sqlerrorflag = false;
					try {
						sqlstmt = " UPDATE  " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
						        + " SET RFS_UN_NO = ?" + " WHERE UN_NO = ?";
						sqlparams = new BaseData[] { nps220WorkFieldsInner.wsRfsAcctNo, nps220WorkFieldsInner.wsPosUnNo };
						getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
					} catch (SQLException ex) {
						sqlerrorflag = true;
						getAppVars().setSqlErrorCode(ex);
					}
					if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
						/* CONTINUE_STMT */
					} else {
						sqCallNumber.set("6");
						z991SqlError();
					}
					/* ##* Ending: IF SQLCODE = 0... */
				} else {
					if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
						if (isEQ(nps220WorkFieldsInner.wsRfsAcctNo, ps220ss.ssNps220RfsAcctNo)) {
							/* CONTINUE_STMT */
						} else {
							nps220FillerRecordInner.nps220PosUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220PosUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0022");
						}
						/* ##* Ending: IF WS-RFS-ACCT-NO = SS-NPS220-RFS-ACCT-NO... */
					} else {
						sqCallNumber.set("7");
						z991SqlError();
					}
					/* ##* Ending: IF SQLCODE = +100 ... */
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-RFS-ACCT-NO = SPACES... */
	}

	/**
	 * Method generated from paragraph 1250-EDIT-FGN-STR-PRT-MKU.
	 */
	private void editFgnStrPrtMku() {
		if (isEQ(ps220ss.ssNps220FgnStrPrtMku, SPACES) || isEQ(ps220ss.ssNps220FgnStrPrtMku, LOVALUES)
		        || isEQ(ps220ss.ssNps220FgnStrPrtMku, "?")) {
			ps220ss.ssNps220FgnStrPrtMku.set("?");
			nps220FillerRecordInner.nps220FgnStrPrtMkuLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220FgnStrPrtMkuAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0070");
		} else {
			npsInput.set(ps220ss.ssNps220FgnStrPrtMku);
			z100RightJustify();
			nps220WorkFieldsInner.wsPrtMku.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220FgnStrPrtMkuLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220FgnStrPrtMkuAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220FgnStrPrtMku.set(nps220WorkFieldsInner.wsPrtMku);
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-FGN-STR-PRT-MKU = SPACES... */
	}

	/**
	 * Method generated from paragraph 1252-EDIT-INHOME-PRT-MKU.
	 */
	private void editInhomePrtMku() {
		if (isEQ(ps220ss.ssNps220InhomePrtMku, SPACES) || isEQ(ps220ss.ssNps220InhomePrtMku, LOVALUES)
		        || isEQ(ps220ss.ssNps220InhomePrtMku, "?")) {
			ps220ss.ssNps220InhomePrtMku.set("?");
			nps220FillerRecordInner.nps220InhomePrtMkuLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220InhomePrtMkuAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0070");
		} else {
			npsInput.set(ps220ss.ssNps220InhomePrtMku);
			z100RightJustify();
			nps220WorkFieldsInner.wsInhomeMku.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				nps220FillerRecordInner.nps220InhomePrtMkuLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220InhomePrtMkuAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("2035");
			} else {
				ps220ss.ssNps220InhomePrtMku.set(nps220WorkFieldsInner.wsInhomeMku);
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-INHOME-PRT-MKU = SPACES... */
	}

	/**
	 * Method generated from paragraph 1256-SET-SAVE-SCREEN-ATTR.
	 */
	private void setSaveScreenAttr() {
		ps220ss.scaSsNps220SuName.set(nps220FillerRecordInner.scaNps220SuName);
		ps220ss.scaSsNps220AddrLine1.set(nps220FillerRecordInner.scaNps220AddrLine1);
		ps220ss.scaSsNps220AddrLine2.set(nps220FillerRecordInner.scaNps220AddrLine2);
		ps220ss.scaSsNps220City.set(nps220FillerRecordInner.scaNps220City);
		ps220ss.scaSsNps220State.set(nps220FillerRecordInner.scaNps220State);
		ps220ss.scaSsNps220Zip5.set(nps220FillerRecordInner.scaNps220Zip5);
		ps220ss.scaSsNps220Zip4.set(nps220FillerRecordInner.scaNps220Zip4);
		ps220ss.scaSsNps220UnitType.set(nps220FillerRecordInner.scaNps220UnitType);
		ps220ss.scaSsNps220MktAtvFl.set(nps220FillerRecordInner.scaNps220MktAtvFl);
		ps220ss.scaSsNps220UnitConverted.set(nps220FillerRecordInner.scaNps220UnitConverted);
		ps220ss.scaSsNps220PrtInvCryFl.set(nps220FillerRecordInner.scaNps220PrtInvCryFl);
		/* ##* ##JA-16S */
		ps220ss.scaSsNps220CrtDrcOrdFl.set(nps220FillerRecordInner.scaNps220CrtDrcOrdFl);
		/* ##* ##JA-16E */
		ps220ss.scaSsNps220RegionNo.set(nps220FillerRecordInner.scaNps220RegionNo);
		ps220ss.scaSsNps220CentralNo.set(nps220FillerRecordInner.scaNps220CentralNo);
		ps220ss.scaSsNps220HostNo.set(nps220FillerRecordInner.scaNps220HostNo);
		ps220ss.scaSsNps220SvcPvdFl.set(nps220FillerRecordInner.scaNps220SvcPvdFl);
		ps220ss.scaSsNps220UnOpnDtMm.set(nps220FillerRecordInner.scaNps220UnOpnDtMm);
		ps220ss.scaSsNps220UnOpnDtDd.set(nps220FillerRecordInner.scaNps220UnOpnDtDd);
		ps220ss.scaSsNps220UnOpnDtYy.set(nps220FillerRecordInner.scaNps220UnOpnDtYy);
		ps220ss.scaSsNps220SvcUnCloDtMm.set(nps220FillerRecordInner.scaNps220SvcUnCloDtMm);
		ps220ss.scaSsNps220SvcUnCloDtDd.set(nps220FillerRecordInner.scaNps220SvcUnCloDtDd);
		ps220ss.scaSsNps220SvcUnCloDtYy.set(nps220FillerRecordInner.scaNps220SvcUnCloDtYy);
		ps220ss.scaSsNps220CnvNpnDtDd.set(nps220FillerRecordInner.scaNps220CnvNpnDtDd);
		ps220ss.scaSsNps220CnvNpnDtMm.set(nps220FillerRecordInner.scaNps220CnvNpnDtMm);
		ps220ss.scaSsNps220CnvNpnDtYy.set(nps220FillerRecordInner.scaNps220CnvNpnDtYy);
		ps220ss.scaSsNps220PosUnNo.set(nps220FillerRecordInner.scaNps220PosUnNo);
		/* ##* ##KG-23S */
		ps220ss.scaSsNps220RfsAcctNo.set(nps220FillerRecordInner.scaNps220RfsAcctNo);
		/* ##* ##KG-12E */
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* SCA-SS-NPS220-JV-UN-NO = */
		/* ##* ... SCA-NPS220-JV-UN-NO */
		/* ##* ##PB-19E */
		/* ##* ##RK-18E */
		ps220ss.scaSsNps220CnvSpdeDtDd.set(nps220FillerRecordInner.scaNps220CnvSpdeDtDd);
		ps220ss.scaSsNps220CnvSpdeDtMm.set(nps220FillerRecordInner.scaNps220CnvSpdeDtMm);
		ps220ss.scaSsNps220CnvSpdeDtYy.set(nps220FillerRecordInner.scaNps220CnvSpdeDtYy);
		ps220ss.scaSsNps220CnvCarsDtDd.set(nps220FillerRecordInner.scaNps220CnvCarsDtDd);
		ps220ss.scaSsNps220CnvCarsDtMm.set(nps220FillerRecordInner.scaNps220CnvCarsDtMm);
		ps220ss.scaSsNps220CnvCarsDtYy.set(nps220FillerRecordInner.scaNps220CnvCarsDtYy);
		ps220ss.scaSsNps220CpuAidRte.set(nps220FillerRecordInner.scaNps220CpuAidRte);
		ps220ss.scaSsNps220PosStaDtDd.set(nps220FillerRecordInner.scaNps220PosStaDtDd);
		ps220ss.scaSsNps220PosStaDtMm.set(nps220FillerRecordInner.scaNps220PosStaDtMm);
		ps220ss.scaSsNps220PosStaDtYy.set(nps220FillerRecordInner.scaNps220PosStaDtYy);
		ps220ss.scaSsNps220StateRegNo.set(nps220FillerRecordInner.scaNps220StateRegNo);
		ps220ss.scaSsNps220ShipDest.set(nps220FillerRecordInner.scaNps220ShipDest);
		ps220ss.scaSsNps220FgnStrPrtMku.set(nps220FillerRecordInner.scaNps220FgnStrPrtMku);
		/* TSA-13-S */
		ps220ss.scaSsNps220InhomePrtMku.set(nps220FillerRecordInner.scaNps220InhomePrtMku);
		/* ##* SCA-SS-NPS220-SHOP-PRT-MKU = */
		/* ##* ... SCA-NPS220-SHOP-PRT-MKU */
		/* ##* ##JA-16S */
		ps220ss.scaSsNps220AcsDckUnNo.set(nps220FillerRecordInner.scaNps220AcsDckUnNo);
		/* ##* ##JA-16E */
		/* TSA-13-E */
		/* ##* ##CT-20S */
		ps220ss.scaSsNps220InqCmyCd.set(nps220FillerRecordInner.scaNps220InqCmyCd);
		ps220ss.scaSsNps220RteUnNo.set(nps220FillerRecordInner.scaNps220RteUnNo);
		ps220ss.scaSsNps220MsgCmyLst.set(nps220FillerRecordInner.scaNps220MsgCmyLst);
	}

	/**
	 * Method generated from paragraph 1260-DETERMINE-SYSID.
	 */
	private void determineSysid() {
		cicsCallNumber.set("1");
		AssignTransactionDetails assign = CICSCommandFactory.getAssignTransactionDetails(getCICSContext());
		assign.setSysid(nps220WorkFieldsInner.wsCurrSysid);
		assign.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1265-EDIT-SHIP-DEST.
	 */
	private void editShipDest() {
		if (isEQ(ps220ss.ssNps220ShipDest, SPACES) || isEQ(ps220ss.ssNps220ShipDest, LOVALUES)
		        || isEQ(ps220ss.ssNps220ShipDest, "?")) {
			ps220ss.ssNps220ShipDest.set("?");
			nps220FillerRecordInner.nps220ShipDestLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220ShipDestAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			if (isGT(ps220ss.ssNps220ShipDest, SPACES)) {
				if (isEQ(ps220ss.ssNps220SuNo, ps220ss.ssNps220HostNo) && isEQ(ps220ss.ssNps220ShipDest, "H")) {
					/* CONTINUE_STMT */
				} else {
					if (isNE(ps220ss.ssNps220HostNo, ps220ss.ssNps220SuNo)
					        && (isEQ(ps220ss.ssNps220ShipDest, "B") || isEQ(ps220ss.ssNps220ShipDest, "T") || isEQ(
					            ps220ss.ssNps220ShipDest, "H"))) {
						/* CONTINUE_STMT */
					} else {
						nps220FillerRecordInner.nps220ShipDestLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220ShipDestAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("3070");
					}
					/* ##* Ending: IF SS-NPS220-HOST-NO NOT = SS-NPS220-SU-NO AND... */
				}
				/* ##* Ending: IF SS-NPS220-SU-NO = SS-NPS220-HOST-NO AND... */
			}
			/* ##* Ending: IF SS-NPS220-SHIP-DEST > SPACES... */
		}
		/* ##* Ending: IF SS-NPS220-SHIP-DEST = SPACES... */
	}

	/**
	 * Method generated from paragraph 1270-EDIT-UNIT-TYPE.
	 */
	private void editUnitType() {
		if ((isEQ(ps220ss.ssNps220UnitType, SPACES) || isEQ(ps220ss.ssNps220UnitType, LOVALUES) || isEQ(
		    ps220ss.ssNps220UnitType, "?")) && tpCommareaInner.userFromSco.isTrue()) {
			ps220ss.ssNps220UnitType.set("?");
			nps220FillerRecordInner.nps220UnitTypeLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		} else {
			if (isGT(ps220ss.ssNps220UnitType, SPACES)) {
				npsInput.set(ps220ss.ssNps220UnitType);
				z100RightJustify();
				nps220WorkFieldsInner.wsUnitTypeN.set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					if (isEQ(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
						nps220FillerRecordInner.nps220UnitTypeLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrUbfft);
						nps220WorkFieldsInner.wsMessageKey.set("2035");
					} else {
						nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					}
					/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
				} else {
					ps220ss.ssNps220UnitType.set(nps220WorkFieldsInner.wsUnitTypeN);
					wsUpsmuiflRecInner.wsUpsmuiflSvcUnNo.set("DEFAULT");
					wsUpsmuiflRecInner.wsUpsmuiflRecType.set("U");
					wsUpsmuiflRecInner.wsUpsmuiflSeqNo.set(nps220WorkFieldsInner.wsUnitTypeN);
					nps220WorkFieldsInner.csmtVsamName.set("UPSMUIFL");
					/* CT-20 */
					cicsCallNumber.set("2");
					ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
					read.setDataset(UpsmuiflKsdsVsam.class);
					read.setInto(wsUpsmuiflRecInner.wsUpsmuiflRec);
					read.setLength(wsUpsmuiflRecInner.wsUpsmuiflRec.getLength());
					read.setRecordIdField(wsUpsmuiflRecInner.wsUpsmuiflKey);
					read.setKeylength(wsUpsmuiflRecInner.wsUpsmuiflKey.getLength());
					read.execute();
					if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
							if (isEQ(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
								nps220FillerRecordInner.nps220UnitTypeLength
								    .set(apsScreenAttributesInner.tpPositionCursor);
								nps220CursorFlag.set("T");
								nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrUbfft);
								nps220WorkFieldsInner.wsMessageKey.set("0011");
							} else {
								nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							}
							/* ##* Ending: IF WS-MESSAGE-KEY = SPACES ... */
						} else {
							if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
								nps220WorkFieldsInner.wsMessageKey.set("3009");
								nps220WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
								writeCsmtMsg();
							} else {
								if (apsEibfnEibrcodeInner.notopen.isTrue()) {
									nps220WorkFieldsInner.wsMessageKey.set("3010");
									nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
									writeCsmtMsg();
								} else {
									if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
										nps220WorkFieldsInner.wsMessageKey.set("3011");
										nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
										writeCsmtMsg();
									} else {
										nps220WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
										writeCsmtMsg();
										/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
										clErrorflag = "C";
										accessError();
									}
									/* ##* Ending: IF NOTALLOC ... */
								}
								/* ##* Ending: IF NOTOPEN ... */
							}
							/* ##* Ending: IF IOERR ... */
						}
						/* ##* Ending: IF NOTFND... */
						/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
					} else {
						if (isEQ(ps220ss.ssNps220SuNo, ps220ss.ssNps220HostNo)
						        && isEQ(wsUpsmuiflRecInner.wsUpsmuiflSeqNo, 11)) {
							nps220FillerRecordInner.nps220UnitTypeLength.set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							if (isEQ(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
								nps220WorkFieldsInner.wsMessageKey.set("3210");
							}
							/* ##* Ending: IF WS-MESSAGE-KEY = SPACES ... */
						} else {
							ps220ss.ssNps220UnitType.set(wsUpsmuiflRecInner.wsUpsmuiflSeqNo);
							ps220ss.ssNps220UnitDesc.set(wsUpsmuiflRecInner.wsUpsmuiflUnitDesc);
							paFieldsInner.paUnitType.set(wsUpsmuiflRecInner.wsUpsmuiflUnitType);
						}
						/* ##* Ending: IF SS-NPS220-SU-NO = SS-NPS220-HOST-NO AND ... */
					}
					/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS220-UNIT-TYPE > SPACES... */
		}
		/* ##* Ending: IF (SS-NPS220-UNIT-TYPE = SPACES... */
	}

	/**
	 * Method generated from paragraph 1271-EDIT-ACS-DCK-UN-NO.
	 */
	private void editAcsDckUnNo() {
		if (isGT(ps220ss.ssNps220AcsDckUnNo, SPACES)) {
			npsInput.set(ps220ss.ssNps220AcsDckUnNo);
			z100RightJustify();
			nps220WorkFieldsInner.wsAcsDckUnNo.set(npsOutput);
			if (npsRightJustifyError.isTrue()) {
				if (isEQ(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
					nps220FillerRecordInner.nps220AcsDckUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220AcsDckUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("2035");
				} else {
					nps220FillerRecordInner.nps220AcsDckUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				}
				/* ##* Ending: IF WS-MESSAGE-KEY = SPACES... */
			} else {
				if (isEQ(ps220ss.ssNps220UnitType, "77") || isEQ(ps220ss.ssNps220UnitType, "75")) {
					sqlerrorflag = false;
					try {
						sqlstmt = " SELECT  UN_NO, UN_TYP_CD" + " FROM   "
						        + getAppVars().getTableNameOverriden("NPSXTBU") + " " + " WHERE UN_NO = ?";
						sqlinto = new BaseData[] { npsxtbu.unNo, npsxtbu.unTypCd };
						sqlparams = new BaseData[] { nps220WorkFieldsInner.wsAcsDckUnNoX };
						getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
					} catch (SQLException ex) {
						sqlerrorflag = true;
						getAppVars().setSqlErrorCode(ex);
					}
					if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
						if (isEQ(npsxtbu.unTypCd, "RET")) {
							nps220FillerRecordInner.nps220AcsDckUnNoLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220AcsDckUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("2642");
						} else {
							ps220ss.ssNps220AcsDckUnNo.set(nps220WorkFieldsInner.wsAcsDckUnNo);
						}
						/* ##* Ending: IF UN-TYP-CD OF DCLNPSXTBU = 'RET' ... */
					} else {
						if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
							nps220FillerRecordInner.nps220AcsDckUnNoLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220AcsDckUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0022");
						} else {
							sqCallNumber.set("8");
							z991SqlError();
						}
						/* ##* Ending: IF SQLCODE = +100 ... */
					}
					/* ##* Ending: IF SQLCODE = 0... */
				} else {
					nps220FillerRecordInner.nps220AcsDckUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220AcsDckUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("2643");
				}
				/* ##* Ending: IF SS-NPS220-UNIT-TYPE = '77' OR '75'... */
			}
			/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
		}
		/* ##* Ending: IF SS-NPS220-ACS-DCK-UN-NO > SPACES... */
	}

	/**
	 * Method generated from paragraph 1275-EDIT-INQ-CMY-CD.
	 */
	private void editInqCmyCd() {
		if (isGT(ps220ss.ssNps220InqCmyCd, SPACES)) {
			nps220WorkFieldsInner.wsInqCmyCd.set(ps220ss.ssNps220InqCmyCd);
			readIpsiqcfl();
			if (isEQ(nps220WorkFieldsInner.wsNotfndFl, "Y")) {
				nps220FillerRecordInner.nps220InqCmyCdLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220InqCmyCdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("4266");
			}
			/* ##* Ending: IF WS-NOTFND-FL = 'Y'... */
		} else {
			ps220ss.ssNps220InqCmyCd.set("?");
			nps220FillerRecordInner.nps220InqCmyCdLength.set(apsScreenAttributesInner.tpPositionCursor);
			nps220CursorFlag.set("T");
			nps220FillerRecordInner.nps220InqCmyCdAttr.set(apsScreenAttributesInner.tpAttrUbfft);
			nps220WorkFieldsInner.wsMessageKey.set("0009");
		}
		/* ##* Ending: IF SS-NPS220-INQ-CMY-CD > SPACES... */
	}

	/**
	 * Method generated from paragraph 1276-READ-IPSIQCFL.
	 */
	private void readIpsiqcfl() {
		nps220WorkFieldsInner.wsValidInqCmyCdFl.set("N");
		nps220WorkFieldsInner.wsNotfndFl.set("N");
		ipsiqcflInqCmyCd.set(nps220WorkFieldsInner.wsInqCmyCd);
		nps220WorkFieldsInner.csmtVsamName.set("IPSIQCFL");
		cicsCallNumber.set("3");
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setDataset(IpsiqcflKsdsVsam.class);
		read.setInto(ipsiqcflRecord);
		read.setRecordIdField(ipsiqcflKey);
		read.setLength(ipsiqcflRecord.getLength());
		read.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				nps220WorkFieldsInner.wsNotfndFl.set("Y");
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps220WorkFieldsInner.csmtVsamInfo.set("IOERROR READING FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATED");
							writeCsmtMsg();
						} else {
							nps220WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC... */
					}
					/* ##* Ending: IF NOTOPEN... */
				}
				/* ##* Ending: IF IOERR... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps220WorkFieldsInner.wsValidInqCmyCdFl.set("Y");
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1278-EDIT-MSG-CMY-LST.
	 */
	private void editMsgCmyLst() {
		if (isGT(ps220ss.ssNps220MsgCmyLst, SPACES)) {
			nps220WorkFieldsInner.wsMessageEdit.set(ps220ss.ssNps220MsgCmyLst);
			nps220WorkFieldsInner.wsMessageList.set(SPACES);
			nps220WorkFieldsInner.wsUFoundFlag.set("N");
			nps220WorkFieldsInner.wsLastCharSub.set(ZERO);
			nps220WorkFieldsInner.wsSub.set(ZERO);
			nps220WorkFieldsInner.wsSubR.set(ZERO);
			nps220WorkFieldsInner.wsFnlSub.set(ZERO);
			while (!(isGTE(nps220WorkFieldsInner.wsSubR, 16))) {
				compute(nps220WorkFieldsInner.wsSubR, 0).set(add(nps220WorkFieldsInner.wsSubR, 1));
				nps220WorkFieldsInner.wsChar.set(nps220WorkFieldsInner.wsEditCmyLst[nps220WorkFieldsInner.wsSubR
				    .toInt()]);
				if (isEQ(nps220WorkFieldsInner.wsChar, ALPHABETIC) && isGT(nps220WorkFieldsInner.wsChar, SPACES)) {
					nps220WorkFieldsInner.wsInqCmyCd
					    .set(nps220WorkFieldsInner.wsEditCmyLst[nps220WorkFieldsInner.wsSubR.toInt()]);
					readIpsiqcfl();
					if (isEQ(nps220WorkFieldsInner.wsValidInqCmyCdFl, "Y")) {
						if (isEQ(ipsiqcflValidTargetFl, "Y")) {
							compute(nps220WorkFieldsInner.wsSub, 0).set(add(nps220WorkFieldsInner.wsSub, 1));
							nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsSub.toInt()]
							    .set(ipsiqcflInqCmyCd);
							if (isEQ(ipsiqcflInqCmyCd, "U")) {
								nps220WorkFieldsInner.wsUFoundFlag.set("Y");
							}
							/* ##* Ending: IF IPSIQCFL-INQ-CMY-CD = 'U' ... */
							compute(nps220WorkFieldsInner.wsFnlSub, 0).set(add(nps220WorkFieldsInner.wsFnlSub, 1));
							nps220WorkFieldsInner.wsFnlCmyLst[nps220WorkFieldsInner.wsFnlSub.toInt()]
							    .set(ipsiqcflInqCmyCd);
							compute(nps220WorkFieldsInner.wsSub, 0).set(add(nps220WorkFieldsInner.wsSub, 1));
							nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsSub.toInt()]
							    .set(nps220WorkFieldsInner.wsComma);
							nps220WorkFieldsInner.wsLastCharSub.set(nps220WorkFieldsInner.wsSub);
						} else {
							nps220FillerRecordInner.nps220MsgCmyLstLength
							    .set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220MsgCmyLstAttr.set(apsScreenAttributesInner.tpAttrUnfff);
							nps220WorkFieldsInner.wsMessageKey.set("4265");
						}
						/* ##* Ending: IF IPSIQCFL-VALID-TARGET-FL = 'Y' ... */
					} else {
						nps220FillerRecordInner.nps220MsgCmyLstLength.set(apsScreenAttributesInner.tpPositionCursor);
						nps220CursorFlag.set("T");
						nps220FillerRecordInner.nps220MsgCmyLstAttr.set(apsScreenAttributesInner.tpAttrUnfff);
						nps220WorkFieldsInner.wsMessageKey.set("4265");
					}
					/* ##* Ending: IF WS-VALID-INQ-CMY-CD-FL = 'Y' ... */
				}
				/* ##* Ending: IF WS-CHAR IS ALPHABETIC AND... */
			}

			if (isEQ(nps220WorkFieldsInner.wsUFoundFlag, "Y")) {
				nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsLastCharSub.toInt()].set(SPACES);
			} else {
				nps220WorkFieldsInner.wsMsgCmyLst[add(nps220WorkFieldsInner.wsLastCharSub, 1).toInt()].set("U");
				compute(nps220WorkFieldsInner.wsFnlSub, 0).set(add(nps220WorkFieldsInner.wsFnlSub, 1));
				nps220WorkFieldsInner.wsFnlCmyLst[nps220WorkFieldsInner.wsFnlSub.toInt()].set("U");
			}
			/* ##* Ending: IF WS-U-FOUND-FLAG = 'Y'... */
			ps220ss.ssNps220MsgCmyLst.set(nps220WorkFieldsInner.wsMessageList);
		} else {
			ps220ss.ssNps220MsgCmyLst.set("U");
			nps220WorkFieldsInner.wsFnlCmyLst[1].set("U");
		}
		/* ##* Ending: IF SS-NPS220-MSG-CMY-LST > SPACES... */
	}

	/**
	 * Method generated from paragraph 1279-EDIT-RTE-UN-NO.
	 */
	private void editRteUnNo() {
		if (isEQ(paFieldsInner.paUnitType, "DS")) {
			if (isEQ(ps220ss.ssNps220RteUnNo, SPACES) || isEQ(ps220ss.ssNps220RteUnNo, LOVALUES)
			        || isEQ(ps220ss.ssNps220RteUnNo, "?")) {
				ps220ss.ssNps220RteUnNo.set("?");
				nps220FillerRecordInner.nps220RteUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
				nps220CursorFlag.set("T");
				nps220FillerRecordInner.nps220RteUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
				nps220WorkFieldsInner.wsMessageKey.set("0009");
			} else {
				npsInput.set(ps220ss.ssNps220RteUnNo);
				z100RightJustify();
				nps220WorkFieldsInner.wsRteUnNum.set(npsOutput);
				if (npsRightJustifyError.isTrue()) {
					nps220FillerRecordInner.nps220RteUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
					nps220CursorFlag.set("T");
					nps220FillerRecordInner.nps220RteUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
					nps220WorkFieldsInner.wsMessageKey.set("2035");
				} else {
					sqlerrorflag = false;
					try {
						sqlstmt = " SELECT  'A'" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU")
						        + "  BU,  " + getAppVars().getTableNameOverriden("NPSXTSU") + "  SU"
						        + " WHERE BU.UN_NO = SU.SVC_UN_NO" + " AND BU.UN_NO = ?" + " AND BU.UN_TYP_CD = 'RRC'"
						        + " AND BU.RGN_NO = ?" + " AND SU.SVC_UN_CLO_DT = '1111-11-11'";
						sqlinto = new BaseData[] { nps220WorkFieldsInner.wsDummy };
						sqlparams = new BaseData[] { nps220WorkFieldsInner.wsRteUnNo, nps220WorkFieldsInner.wsRegionNo };
						getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
					} catch (SQLException ex) {
						sqlerrorflag = true;
						getAppVars().setSqlErrorCode(ex);
					}
					if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
						ps220ss.ssNps220RteUnNo.set(nps220WorkFieldsInner.wsRteUnNo);
					} else {
						if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
							nps220FillerRecordInner.nps220RteUnNoLength.set(apsScreenAttributesInner.tpPositionCursor);
							nps220CursorFlag.set("T");
							nps220FillerRecordInner.nps220RteUnNoAttr.set(apsScreenAttributesInner.tpAttrUbfft);
							nps220WorkFieldsInner.wsMessageKey.set("0022");
						} else {
							sqCallNumber.set("9");
							z991SqlError();
						}
						/* ##* Ending: IF SQLCODE = +100 ... */
					}
					/* ##* Ending: IF SQLCODE = 0... */
				}
				/* ##* Ending: IF NPS-RIGHT-JUSTIFY-ERROR... */
			}
			/* ##* Ending: IF SS-NPS220-RTE-UN-NO = SPACES... */
		} else {
			ps220ss.ssNps220RteUnNo.set(SPACES);
		}
		/* ##* Ending: IF PA-UNIT-TYPE = 'DS'... */
	}

	/**
	 * Method generated from paragraph 1280-CHECK-ADD-UPD.
	 */
	private void checkAddUpd() {
		checkSsFields();
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
			        + " WHERE UN_NO = ?";
			sqlinto = new BaseData[] { npsxtbu.unNo };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			updateTables();
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				addToTables();
			} else {
				sqCallNumber.set("10");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 1282-CHECK-SS-FIELDS.
	 */
	private void checkSsFields() {
		if (isGT(ps220ss.ssNps220AddrLine1, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220AddrLine1.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-ADDR-LINE1 > SPACES... */
		if (isGT(ps220ss.ssNps220AddrLine2, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220AddrLine2.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-ADDR-LINE2 > SPACES... */
		if (isGT(ps220ss.ssNps220City, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220City.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CITY > SPACES... */
		if (isGT(ps220ss.ssNps220State, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220State.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-STATE > SPACES... */
		if (isGT(ps220ss.ssNps220Zip5, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220Zip5.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-ZIP-5 > SPACES... */
		if (isGT(ps220ss.ssNps220Zip4, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220Zip4.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-ZIP-4 > SPACES... */
		if (isGT(ps220ss.ssNps220UnitType, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220UnitType.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-UNIT-TYPE > SPACES... */
		if (isGT(ps220ss.ssNps220UnitDesc, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220UnitDesc.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-UNIT-DESC > SPACES... */
		if (isGT(ps220ss.ssNps220RegionNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220RegionNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-REGION-NO > SPACES... */
		if (isGT(ps220ss.ssNps220SvcPvdFl, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220SvcPvdFl.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-SVC-PVD-FL > SPACES... */
		if (isGT(ps220ss.ssNps220CentralNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CentralNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CENTRAL-NO > SPACES... */
		if (isGT(ps220ss.ssNps220MktAtvFl, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220MktAtvFl.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-MKT-ATV-FL > SPACES... */
		if (isGT(ps220ss.ssNps220HostNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220HostNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-HOST-NO > SPACES... */
		if (isGT(ps220ss.ssNps220UnitConverted, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220UnitConverted.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-UNIT-CONVERTED > SPACES... */
		if (isGT(ps220ss.ssNps220PosUnNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220PosUnNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-POS-UN-NO > SPACES... */
		/* ##* ##KG-23S */
		if (isGT(ps220ss.ssNps220RfsAcctNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220RfsAcctNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-RFS-ACCT-NO > SPACES... */
		/* ##* ##KG-23E */
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* IF SS-NPS220-JV-UN-NO > SPACES */
		/* ##* ELSE */
		/* ##* SS-NPS220-JV-UN-NO = SPACES */
		/* ##* ##PB-19E */
		/* ##* ##RK-18E */
		if (isGT(ps220ss.ssNps220PrtInvCryFl, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220PrtInvCryFl.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-PRT-INV-CRY-FL > SPACES... */
		/* ##* ##JA-16S */
		if (isGT(ps220ss.ssNps220CrtDrcOrdFl, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CrtDrcOrdFl.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CRT-DRC-ORD-FL > SPACES... */
		/* ##* ##JA-16E */
		if (isGT(ps220ss.ssNps220UnOpnDtMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220UnOpnDtMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-UN-OPN-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220UnOpnDtDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220UnOpnDtDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-UN-OPN-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220UnOpnDtYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220UnOpnDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-UN-OPN-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220CnvSpdeDtMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvSpdeDtMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220CnvSpdeDtDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvSpdeDtDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220CnvSpdeDtYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvSpdeDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220SvcUnCloDtMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220SvcUnCloDtMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220SvcUnCloDtDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220SvcUnCloDtDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220SvcUnCloDtYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220SvcUnCloDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220CnvNpnDtMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvNpnDtMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220CnvNpnDtDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvNpnDtDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220CnvNpnDtYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvNpnDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220PosStaDtMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220PosStaDtMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220PosStaDtDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220PosStaDtDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220PosStaDtYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220PosStaDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220CnvCarsDtMm, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvCarsDtMm.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220CnvCarsDtDd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvCarsDtDd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220CnvCarsDtYy, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CnvCarsDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-YY > SPACES... */
		/* JAH-15-S */
		if (isGT(ps220ss.ssNps220CpuAidRte, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220CpuAidRte.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CPU-AID-RTE > SPACES... */
		/* JAH-15-E */
		if (isGT(ps220ss.ssNps220StateRegNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220StateRegNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-STATE-REG-NO > SPACES... */
		if (isGT(ps220ss.ssNps220FgnStrPrtMku, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220FgnStrPrtMku.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-FGN-STR-PRT-MKU > SPACES... */
		/* TSA-13-S */
		if (isGT(ps220ss.ssNps220InhomePrtMku, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220InhomePrtMku.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-INHOME-PRT-MKU > SPACES... */
		/* ##* IF SS-NPS220-SHOP-PRT-MKU > SPACES */
		/* ##* ELSE */
		/* ##* SS-NPS220-SHOP-PRT-MKU = SPACES */
		/* TSA-13-E */
		if (isGT(ps220ss.ssNps220ShipDest, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220ShipDest.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-SHIP-DEST > SPACES... */
		/* ##* ##JA-16S */
		if (isGT(ps220ss.ssNps220AcsDckUnNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220AcsDckUnNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-ACS-DCK-UN-NO > SPACES... */
		/* ##* ##JA-16E */
		/* ##* ##CT-20S */
		if (isGT(ps220ss.ssNps220InqCmyCd, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220InqCmyCd.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-INQ-CMY-CD > SPACES... */
		if (isGT(ps220ss.ssNps220RteUnNo, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220RteUnNo.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-RTE-UN-NO > SPACES... */
		if (isGT(ps220ss.ssNps220MsgCmyLst, SPACES)) {
			/* CONTINUE_STMT */
		} else {
			ps220ss.ssNps220MsgCmyLst.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-MSG-CMY-LST > SPACES... */
	}

	/**
	 * Method generated from paragraph 1285-UPDATE-TABLES.
	 */
	private void updateTables() {
		trcConvrConversationalInner.trcConvrFunctionCode.set("U001");
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(DateValidator.class);
		link.setCommarea(trcConvrConversationalInner.trcConvrConversational);
		link.setLength(1000);
		link.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
			/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps220WorkFieldsInner.wsTempDate.set(trcConvrConversationalInner.trcConvrStdoutDateX);
			nps220WorkFieldsInner.wsTodaysDtCc.set(nps220WorkFieldsInner.wsTempDtCc);
			nps220WorkFieldsInner.wsTodaysDtYy.set(nps220WorkFieldsInner.wsTempDtYy);
			nps220WorkFieldsInner.wsTodaysDtMm.set(nps220WorkFieldsInner.wsTempDtMm);
			nps220WorkFieldsInner.wsTodaysDtDd.set(nps220WorkFieldsInner.wsTempDtDd);
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* ##* UPDATE NPSXTBU TABLE WITH CHANGED INFORMATION */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  UN_NM, RGN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " "
			        + " WHERE UN_NO = ?";
			sqlinto = new BaseData[] { npsxtbu.unNm, npsxtbu.rgnNo };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			if (isNE(npsxtbu.unNm, ps220ss.ssNps220SuName)) {
				nps220WorkFieldsInner.wsUnNmChangedFl.set("Y");
			}
			/* ##* Ending: IF UN-NM OF DCLNPSXTBU NOT = SS-NPS220-SU-NAME... */
			if (isNE(npsxtbu.rgnNo, ps220ss.ssNps220RegionNo)) {
				nps220WorkFieldsInner.wsRgNoChangedFl.set("Y");
			}
			/* ##* Ending: IF RGN-NO OF DCLNPSXTBU NOT = SS-NPS220-REGION-NO... */
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				/* CONTINUE_STMT */
			} else {
				sqCallNumber.set("11");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* TSA-14-E */
		npsxtbu.unTypCd.set(wsUpsmuiflRecInner.wsUpsmuiflUnitType);
		npsxtbu.unNm.set(ps220ss.ssNps220SuName);
		npsxtbu.unLn1Ad.set(ps220ss.ssNps220AddrLine1);
		npsxtbu.unLn2Ad.set(ps220ss.ssNps220AddrLine2);
		npsxtbu.unCtyNm.set(ps220ss.ssNps220City);
		npsxtbu.unSteCd.set(ps220ss.ssNps220State);
		npsxtbu.zipCd.set(ps220ss.ssNps220Zip5);
		npsxtbu.zipSufCd.set(ps220ss.ssNps220Zip4);
		npsxtbu.inqCmyCd.set(ps220ss.ssNps220InqCmyCd);
		npsxtbu.rteUnNo.set(ps220ss.ssNps220RteUnNo);
		sqlerrorflag = false;
		try {
			sqlstmt = " UPDATE  "
			        + getAppVars().getTableNameOverriden("NPSXTBU")
			        + " "
			        + " SET UN_TYP_CD = ?, UN_NM = ?, UN_LN1_AD = ?, UN_LN2_AD = ?, UN_CTY_NM = ?, UN_STE_CD = ?, ZIP_CD = ?, ZIP_SUF_CD = ?, RGN_NO = ?, CTR_SVC_UN_NO = ?, INQ_CMY_CD = ?, RTE_UN_NO = ?"
			        + " WHERE UN_NO = ?";
			sqlparams = new BaseData[] { npsxtbu.unTypCd, npsxtbu.unNm, npsxtbu.unLn1Ad, npsxtbu.unLn2Ad,
			        npsxtbu.unCtyNm, npsxtbu.unSteCd, npsxtbu.zipCd, npsxtbu.zipSufCd,
			        nps220WorkFieldsInner.wsRegionNo, nps220WorkFieldsInner.wsCentralNo, npsxtbu.inqCmyCd,
			        npsxtbu.rteUnNo, tpCommareaInner.caSvcUnNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220WorkFieldsInner.wsMessageKey.set("0025");
			/* TSA-14-S */
			if (isEQ(nps220WorkFieldsInner.wsUnNmChangedFl, "Y") || isEQ(nps220WorkFieldsInner.wsRgNoChangedFl, "Y")) {
				writeToUpjtsrp();
			}
			/* ##* Ending: IF WS-UN-NM-CHANGED-FL = 'Y'... */
			/** TSA-14-E */
		} else {
			sqCallNumber.set("12");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
		updateMsgCmyLst();
		/* CT-20 */
		/* ##* UPDATE NPSXTSC TABLE WITH CHANGED INFORMATION */
		initialize(npsxtsc.dclnpsxtsc);
		npsxtsc.svcUnNo.set(ps220ss.ssNps220SuNo);
		/* ##* COMMENT UPDATE STATEMENT */
		sqlerrorflag = false;
		try {
			sqlstmt = " UPDATE  " + getAppVars().getTableNameOverriden("NPSXTSC") + " " + " SET SVC_UN_NO = ?"
			        + " WHERE SVC_UN_NO = ?";
			sqlparams = new BaseData[] { npsxtsc.svcUnNo, tpCommareaInner.caSvcUnNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				/* ##* COMMENT INSERT STATEMENT */
				sqlerrorflag = false;
				try {
					// Start - Manual fix for INSERT
/*					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSC") + " " + "(SVC_UN_NO)"
					        + " VALUES ('" + npsxtsc.svcUnNo + "')";
					sqlparams = null;
*/
					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTSC") + " " + "(SVC_UN_NO)"
					        + " VALUES (?)";
					sqlparams = new BaseData[]{npsxtsc.svcUnNo};
					// End - Manual fix for INSERT
					getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					nps220WorkFieldsInner.wsMessageKey.set("0025");
				} else {
					sqCallNumber.set("13");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 0... */
			} else {
				sqCallNumber.set("14");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* ##* UPDATE NPSXTSU TABLE WITH CHANGED INFORMATION */
		npsxtsu.svcUnNo.set(ps220ss.ssNps220SuNo);
		npsxtsu.svcPvdFl.set(ps220ss.ssNps220SvcPvdFl);
		npsxtsu.mktAtvFl.set(ps220ss.ssNps220MktAtvFl);
		npsxtsu.prtInvCryFl.set(ps220ss.ssNps220PrtInvCryFl);
		nps220WorkFieldsInner.wsUnOpnDtMm.set(ps220ss.ssNps220UnOpnDtMm);
		nps220WorkFieldsInner.wsUnOpnDtDd.set(ps220ss.ssNps220UnOpnDtDd);
		nps220WorkFieldsInner.wsUnOpnDtYy.set(ps220ss.ssNps220UnOpnDtYy);
		if (isGT(nps220WorkFieldsInner.wsUnOpnDtYy, 40)) {
			nps220WorkFieldsInner.wsUnOpnDtCc.set(19);
		} else {
			nps220WorkFieldsInner.wsUnOpnDtCc.set(20);
		}
		/* ##* Ending: IF WS-UN-OPN-DT-YY > 40... */
		npsxtsu.unOpnDt.set(nps220WorkFieldsInner.wsUnOpnDt);
		if (isGT(ps220ss.ssNps220SvcUnCloDtMm, SPACES) || isGT(ps220ss.ssNps220SvcUnCloDtDd, SPACES)
		        || isGT(ps220ss.ssNps220SvcUnCloDtYy, SPACES)) {
			nps220WorkFieldsInner.wsSvcUnCloDtMm.set(ps220ss.ssNps220SvcUnCloDtMm);
			nps220WorkFieldsInner.wsSvcUnCloDtDd.set(ps220ss.ssNps220SvcUnCloDtDd);
			nps220WorkFieldsInner.wsSvcUnCloDtYy.set(ps220ss.ssNps220SvcUnCloDtYy);
			if (isGT(nps220WorkFieldsInner.wsSvcUnCloDtYy, 40)) {
				nps220WorkFieldsInner.wsSvcUnCloDtCc.set(19);
			} else {
				nps220WorkFieldsInner.wsSvcUnCloDtCc.set(20);
			}
			/* ##* Ending: IF WS-SVC-UN-CLO-DT-YY > 40... */
			npsxtsu.svcUnCloDt.set(nps220WorkFieldsInner.wsSvcUnCloDt);
		} else {
			npsxtsu.svcUnCloDt.set("1111-11-11");
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-MM > SPACES OR... */
		if (isGT(ps220ss.ssNps220CnvNpnDtMm, SPACES) || isGT(ps220ss.ssNps220CnvNpnDtDd, SPACES)
		        || isGT(ps220ss.ssNps220CnvNpnDtYy, SPACES)) {
			nps220WorkFieldsInner.wsCnvNpnDtMm.set(ps220ss.ssNps220CnvNpnDtMm);
			nps220WorkFieldsInner.wsCnvNpnDtDd.set(ps220ss.ssNps220CnvNpnDtDd);
			nps220WorkFieldsInner.wsCnvNpnDtYy.set(ps220ss.ssNps220CnvNpnDtYy);
			if (isGT(nps220WorkFieldsInner.wsCnvNpnDtYy, 40)) {
				nps220WorkFieldsInner.wsCnvNpnDtCc.set(19);
			} else {
				nps220WorkFieldsInner.wsCnvNpnDtCc.set(20);
			}
			/* ##* Ending: IF WS-CNV-NPN-DT-YY > 40... */
			npsxtsu.cnvNpnDt.set(nps220WorkFieldsInner.wsCnvNpnDt);
		} else {
			npsxtsu.cnvNpnDt.set("1111-11-11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-MM > SPACES OR... */
		if (isGT(ps220ss.ssNps220CnvSpdeDtMm, SPACES) || isGT(ps220ss.ssNps220CnvSpdeDtDd, SPACES)
		        || isGT(ps220ss.ssNps220CnvSpdeDtYy, SPACES)) {
			nps220WorkFieldsInner.wsCnvSpdeDtMm.set(ps220ss.ssNps220CnvSpdeDtMm);
			nps220WorkFieldsInner.wsCnvSpdeDtDd.set(ps220ss.ssNps220CnvSpdeDtDd);
			nps220WorkFieldsInner.wsCnvSpdeDtYy.set(ps220ss.ssNps220CnvSpdeDtYy);
			if (isGT(ps220ss.ssNps220CnvSpdeDtYy, 40)) {
				nps220WorkFieldsInner.wsCnvSpdeDtCc.set(19);
			} else {
				nps220WorkFieldsInner.wsCnvSpdeDtCc.set(20);
			}
			/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-YY > 40... */
			npsxtsu.cnvSpdeDt.set(nps220WorkFieldsInner.wsCnvSpdeDt);
			if (isGT(nps220WorkFieldsInner.wsCnvSpdeDt, nps220WorkFieldsInner.wsTodaysDate)) {
				npsxtsu.spdeSvcUnFl.set("N");
			} else {
				npsxtsu.spdeSvcUnFl.set("Y");
			}
			/* ##* Ending: IF WS-CNV-SPDE-DT > WS-TODAYS-DATE... */
		} else {
			npsxtsu.cnvSpdeDt.set("1111-11-11");
			npsxtsu.spdeSvcUnFl.set("N");
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-MM > SPACES OR... */
		if (isGT(ps220ss.ssNps220CnvCarsDtMm, SPACES) || isGT(ps220ss.ssNps220CnvCarsDtDd, SPACES)
		        || isGT(ps220ss.ssNps220CnvCarsDtYy, SPACES)) {
			nps220WorkFieldsInner.wsCnvCarsDtMm.set(ps220ss.ssNps220CnvCarsDtMm);
			nps220WorkFieldsInner.wsCnvCarsDtDd.set(ps220ss.ssNps220CnvCarsDtDd);
			nps220WorkFieldsInner.wsCnvCarsDtYy.set(ps220ss.ssNps220CnvCarsDtYy);
			if (isGT(nps220WorkFieldsInner.wsCnvCarsDtYy, 40)) {
				nps220WorkFieldsInner.wsCnvCarsDtCc.set(19);
			} else {
				nps220WorkFieldsInner.wsCnvCarsDtCc.set(20);
			}
			/* ##* Ending: IF WS-CNV-CARS-DT-YY > 40... */
			npsxtsu.cnvCarsDt.set(nps220WorkFieldsInner.wsCnvCarsDt);
		} else {
			npsxtsu.cnvCarsDt.set("1111-11-11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-MM > SPACES OR... */
		if (isGT(ps220ss.ssNps220CpuAidRte, SPACES)) {
			npsxtsu.cpuAidRteFl.set(ps220ss.ssNps220CpuAidRte);
		} else {
			npsxtsu.cpuAidRteFl.set("N");
		}
		/* ##* Ending: IF SS-NPS220-CPU-AID-RTE > SPACES... */
		if (isGT(ps220ss.ssNps220PosStaDtMm, SPACES) || isGT(ps220ss.ssNps220PosStaDtDd, SPACES)
		        || isGT(ps220ss.ssNps220PosStaDtYy, SPACES)) {
			nps220WorkFieldsInner.wsPosStaDtMm.set(ps220ss.ssNps220PosStaDtMm);
			nps220WorkFieldsInner.wsPosStaDtDd.set(ps220ss.ssNps220PosStaDtDd);
			nps220WorkFieldsInner.wsPosStaDtYy.set(ps220ss.ssNps220PosStaDtYy);
			if (isGT(nps220WorkFieldsInner.wsPosStaDtYy, 40)) {
				nps220WorkFieldsInner.wsPosStaDtCc.set(19);
			} else {
				nps220WorkFieldsInner.wsPosStaDtCc.set(20);
			}
			/* ##* Ending: IF WS-POS-STA-DT-YY > 40... */
			npsxtsu.posStaDt.set(nps220WorkFieldsInner.wsPosStaDt);
		} else {
			npsxtsu.posStaDt.set("1111-11-11");
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-MM > SPACES OR... */
		npsxtsu.posUnNo.set(ps220ss.ssNps220PosUnNo);
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* JV-SVC-UN-NO OF DCLNPSXTSU = SS-NPS220-JV-UN-NO */
		/* ##* ##PB-19E */
		/* ##* ##RK-18E */
		nps220WorkFieldsInner.wsPrtMku.set(ps220ss.ssNps220FgnStrPrtMku);
		npsxtsu.fgnStrPrtMkuPc.set(nps220WorkFieldsInner.wsPrtMku);
		/* TSA-13-S */
		nps220WorkFieldsInner.wsInhomeMku.set(ps220ss.ssNps220InhomePrtMku);
		npsxtsu.prmSitPrtMkuPc.set(nps220WorkFieldsInner.wsInhomeMku);
		/* ##* WS-SHOP-MKU = SS-NPS220-SHOP-PRT-MKU */
		nps220WorkFieldsInner.wsShopMku.set(ZERO);
		npsxtsu.prmShpPrtMkuPc.set(nps220WorkFieldsInner.wsShopMku);
		/* TSA-13-E */
		npsxtsu.steRegNo.set(ps220ss.ssNps220StateRegNo);
		npsxtsu.prtShCd.set(ps220ss.ssNps220ShipDest);
		nps220WorkFieldsInner.wsUnitConverted.set(ps220ss.ssNps220UnitConverted);
		sqlerrorflag = false;
		try {
			sqlstmt = " UPDATE  "
			        + getAppVars().getTableNameOverriden("NPSXTSU")
			        + " "
			        + " SET SVC_UN_NO = ?, SVC_PVD_FL = ?, MKT_ATV_FL = ?, PRT_INV_CRY_FL = ?, UN_OPN_DT = ?, SVC_UN_CLO_DT = ?, CNV_NPN_DT = ?, CNV_SPDE_DT = ?, SPDE_SVC_UN_FL = ?, CNV_CARS_DT = ?, CPU_AID_RTE_FL = ?, POS_STA_DT = ?, POS_UN_NO = ?, FGN_STR_PRT_MKU_PC = ?, STE_REG_NO = ?, HOS_SVC_UN_NO = ?, PRT_SH_CD = ?, SVC_UN_CNV_FL = ?, PRM_SHP_PRT_MKU_PC = ?, PRM_SIT_PRT_MKU_PC = ?"
			        + " WHERE SVC_UN_NO = ?";
			sqlparams = new BaseData[] { npsxtsu.svcUnNo, npsxtsu.svcPvdFl, npsxtsu.mktAtvFl, npsxtsu.prtInvCryFl,
			        npsxtsu.unOpnDt, npsxtsu.svcUnCloDt, npsxtsu.cnvNpnDt, npsxtsu.cnvSpdeDt, npsxtsu.spdeSvcUnFl,
			        npsxtsu.cnvCarsDt, npsxtsu.cpuAidRteFl, npsxtsu.posStaDt, npsxtsu.posUnNo, npsxtsu.fgnStrPrtMkuPc,
			        npsxtsu.steRegNo, nps220WorkFieldsInner.wsHostNo, npsxtsu.prtShCd,
			        nps220WorkFieldsInner.wsUnitConverted, npsxtsu.prmShpPrtMkuPc, npsxtsu.prmSitPrtMkuPc,
			        tpCommareaInner.caSvcUnNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		/* ##* ##TC-17S */
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220WorkFieldsInner.wsMessageKey.set("0025");
		} else if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
			insertSu();
		} else {
			sqCallNumber.set("15");
			z991SqlError();
		}
		/* ##* ##TC-17E */
		/* ##* UPDATE NPJXTXU TABLE WITH CHANGED INFORMATION */
		npjxtxu.xuSuName.set(ps220ss.ssNps220SuName);
		npjxtxu.xuSuAddrL1.set(ps220ss.ssNps220AddrLine1);
		npjxtxu.xuSuAddrL2.set(ps220ss.ssNps220AddrLine2);
		npjxtxu.xuSuCity.set(ps220ss.ssNps220City);
		npjxtxu.xuSuStateProv.set(ps220ss.ssNps220State);
		npjxtxu.xuSuZipPc.set(ps220ss.ssNps220Zip5);
		npjxtxu.xuSuZip8.set(ps220ss.ssNps220Zip4);
		npjxtxu.xuStRegisterNo.set(ps220ss.ssNps220StateRegNo);
		/* ##* COMMENT UPDATE STATEMENT */
		sqlerrorflag = false;
		try {
			sqlstmt = " UPDATE  "
			        + getAppVars().getTableNameOverriden("NPJXTXU")
			        + " "
			        + " SET XU_SU_NAME = ?, XU_SU_ADDR_L1 = ?, XU_SU_ADDR_L2 = ?, XU_SU_CITY = ?, XU_SU_STATE_PROV = ?, XU_SU_ZIP_PC = ?, XU_SU_ZIP_8 = ?, XU_REGION_NO = ?, XU_ST_REGISTER_NO = ?"
			        + " WHERE XU_SU_NO = ?";
			sqlparams = new BaseData[] { npjxtxu.xuSuName, npjxtxu.xuSuAddrL1, npjxtxu.xuSuAddrL2, npjxtxu.xuSuCity,
			        npjxtxu.xuSuStateProv, npjxtxu.xuSuZipPc, npjxtxu.xuSuZip8, nps220WorkFieldsInner.wsRegionNo,
			        npjxtxu.xuStRegisterNo, tpCommareaInner.caSvcUnNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		/* ##* ##TC-17S */
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220WorkFieldsInner.wsMessageKey.set("0025");
		} else if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
			insertXu();
		} else {
			sqCallNumber.set("16");
			z991SqlError();
		}
		/* ##* ##TC-17E */
		/* ##* ##JA-16S */
		updateRuTable();
		updateDrcFile();
		/* ##* ##JA-16E */
		tpCommareaInner.caCustInd[1].set("O");
	}

	/**
	 * Method generated from paragraph 1286-UPDATE-RU-TABLE.
	 */
	private void updateRuTable() {
		sqlerrorflag = false;
		try {
			sqlstmt = " DELETE FROM  " + getAppVars().getTableNameOverriden("NPSXTRU") + " "
			        + " WHERE SVC_RTL_UN_NO = ?";
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0) || isEQ(getAppVars().getSqlErrorCode(), 100)) {
			if (isNE(ps220ss.ssNps220AcsDckUnNo, SPACES)) {
				sqlerrorflag = false;
				try {
					// Start - Manual fix for INSERT
/*					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTRU") + " "
					        + "(ACS_DCK_UN_NO, SVC_RTL_UN_NO)" + " VALUES ('" + nps220WorkFieldsInner.wsAcsDckUnNoX
					        + "', '" + tpCommareaInner.caSvcUnNo + "')";
					sqlparams = null;
*/
					sqlstmt = " INSERT INTO   " + getAppVars().getTableNameOverriden("NPSXTRU") + " "
					        + "(ACS_DCK_UN_NO, SVC_RTL_UN_NO)" + " VALUES (?, ?)";
					sqlparams = new BaseData[]{nps220WorkFieldsInner.wsAcsDckUnNoX, tpCommareaInner.caSvcUnNo};
					// End - Manual fix for INSERT
					getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
				} catch (SQLException ex) {
					sqlerrorflag = true;
					getAppVars().setSqlErrorCode(ex);
				}
				if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
					nps220WorkFieldsInner.wsMessageKey.set("0025");
				} else {
					sqCallNumber.set("17");
					z991SqlError();
				}
				/* ##* Ending: IF SQLCODE = 0... */
			}
			/* ##* Ending: IF SS-NPS220-ACS-DCK-UN-NO NOT = SPACES... */
		} else {
			sqCallNumber.set("18");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0 OR SQLCODE = +100... */
	}

	/**
	 * Method generated from paragraph 1287-UPDATE-DRC-FILE.
	 */
	private void updateDrcFile() {
		ipsdrcflRec.set(SPACES);
		ipsdrcflKey.set(tpCommareaInner.caSvcUnNo);
		if (isEQ(ps220ss.ssNps220CrtDrcOrdFl, "Y")) {
			cicsCallNumber.set("4");
			WriteRecord write = CICSCommandFactory.getWriteRecord(getCICSContext());
			write.setFrom(ipsdrcflRec);
			write.setDataset(IpsdrcflKsdsVsam.class);
			write.setLength(ipsdrcflRec.getLength());
			write.setRecordIdField(ipsdrcflKey);
			write.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
				if (apsEibfnEibrcodeInner.duprec.isTrue() || apsEibfnEibrcodeInner.dupkey.isTrue()) {
					/* CONTINUE_STMT */
				} else {
					/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
					clErrorflag = "C";
					accessError();
				}
				/* ##* Ending: IF DUPREC OR DUPKEY... */
			}
			/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			cicsCallNumber.set("5");
			DeleteRecord delete = CICSCommandFactory.getDeleteRecord(getCICSContext());
			delete.setDataset(IpsdrcflKsdsVsam.class);
			delete.setRecordIdField(ipsdrcflKey);
			delete.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
				if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
					/* CONTINUE_STMT */
				} else {
					/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
					clErrorflag = "C";
					accessError();
				}
				/* ##* Ending: IF NOTFND... */
			}
			/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		}
		/* ##* Ending: IF SS-NPS220-CRT-DRC-ORD-FL = 'Y'... */
	}

	/**
	 * Method generated from paragraph 1290-ADD-TO-TABLES.
	 */
	private void addToTables() {
		paFieldsInner.paSuNo.set(ps220ss.ssNps220SuNo);
		paFieldsInner.paSuName.set(ps220ss.ssNps220SuName);
		paFieldsInner.paAddrLine1.set(ps220ss.ssNps220AddrLine1);
		paFieldsInner.paAddrLine2.set(ps220ss.ssNps220AddrLine2);
		paFieldsInner.paCity.set(ps220ss.ssNps220City);
		paFieldsInner.paState.set(ps220ss.ssNps220State);
		paFieldsInner.paZip5.set(ps220ss.ssNps220Zip5);
		paFieldsInner.paZip4.set(ps220ss.ssNps220Zip4);
		/* ##* PA-UNIT-TYPE = SS-NPS220-UNIT-TYPE */
		paFieldsInner.paUnitDesc.set(ps220ss.ssNps220UnitDesc);
		paFieldsInner.paRegionNo.set(ps220ss.ssNps220RegionNo);
		paFieldsInner.paCentralNo.set(ps220ss.ssNps220CentralNo);
		paFieldsInner.paHostNo.set(ps220ss.ssNps220HostNo);
		paFieldsInner.paSvcPvdFl.set(ps220ss.ssNps220SvcPvdFl);
		paFieldsInner.paMktAtvFl.set(ps220ss.ssNps220MktAtvFl);
		paFieldsInner.paUnitConverted.set(ps220ss.ssNps220UnitConverted);
		paFieldsInner.paPrtInvCryFl.set(ps220ss.ssNps220PrtInvCryFl);
		/* ##* ##JA-16S */
		paFieldsInner.paCrtDrcOrdFl.set(ps220ss.ssNps220CrtDrcOrdFl);
		/* ##* ##JA-16E */
		paFieldsInner.paUnOpnDtMm.set(ps220ss.ssNps220UnOpnDtMm);
		paFieldsInner.paUnOpnDtDd.set(ps220ss.ssNps220UnOpnDtDd);
		paFieldsInner.paUnOpnDtYy.set(ps220ss.ssNps220UnOpnDtYy);
		if (isGT(ps220ss.ssNps220SvcUnCloDtMm, SPACES)) {
			paFieldsInner.paSvcUnCloDtMm.set(ps220ss.ssNps220SvcUnCloDtMm);
		} else {
			paFieldsInner.paSvcUnCloDtMm.set("11");
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220SvcUnCloDtDd, SPACES)) {
			paFieldsInner.paSvcUnCloDtDd.set(ps220ss.ssNps220SvcUnCloDtDd);
		} else {
			paFieldsInner.paSvcUnCloDtDd.set("11");
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220SvcUnCloDtYy, SPACES)) {
			paFieldsInner.paSvcUnCloDtYy.set(ps220ss.ssNps220SvcUnCloDtYy);
		} else {
			paFieldsInner.paSvcUnCloDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-SVC-UN-CLO-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220PosStaDtMm, SPACES)) {
			paFieldsInner.paPosStaDtMm.set(ps220ss.ssNps220PosStaDtMm);
		} else {
			paFieldsInner.paPosStaDtMm.set("11");
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220PosStaDtDd, SPACES)) {
			paFieldsInner.paPosStaDtDd.set(ps220ss.ssNps220PosStaDtDd);
		} else {
			paFieldsInner.paPosStaDtDd.set("11");
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220PosStaDtYy, SPACES)) {
			paFieldsInner.paPosStaDtYy.set(ps220ss.ssNps220PosStaDtYy);
		} else {
			paFieldsInner.paPosStaDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-POS-STA-DT-YY > SPACES... */
		paFieldsInner.paPosUnNo.set(ps220ss.ssNps220PosUnNo);
		/* ##* ##KG-23S */
		paFieldsInner.paRfsAcctNo.set(ps220ss.ssNps220RfsAcctNo);
		/* ##* ##KG-23E */
		if (isGT(ps220ss.ssNps220CnvSpdeDtMm, SPACES)) {
			paFieldsInner.paCnvSpdeDtMm.set(ps220ss.ssNps220CnvSpdeDtMm);
		} else {
			paFieldsInner.paCnvSpdeDtMm.set("11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220CnvSpdeDtDd, SPACES)) {
			paFieldsInner.paCnvSpdeDtDd.set(ps220ss.ssNps220CnvSpdeDtDd);
		} else {
			paFieldsInner.paCnvSpdeDtDd.set("11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220CnvSpdeDtYy, SPACES)) {
			paFieldsInner.paCnvSpdeDtYy.set(ps220ss.ssNps220CnvSpdeDtYy);
		} else {
			paFieldsInner.paCnvSpdeDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-SPDE-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220CnvNpnDtMm, SPACES)) {
			paFieldsInner.paCnvNpnDtMm.set(ps220ss.ssNps220CnvNpnDtMm);
		} else {
			paFieldsInner.paCnvNpnDtMm.set("11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220CnvNpnDtDd, SPACES)) {
			paFieldsInner.paCnvNpnDtDd.set(ps220ss.ssNps220CnvNpnDtDd);
		} else {
			paFieldsInner.paCnvNpnDtDd.set("11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220CnvNpnDtYy, SPACES)) {
			paFieldsInner.paCnvNpnDtYy.set(ps220ss.ssNps220CnvNpnDtYy);
		} else {
			paFieldsInner.paCnvNpnDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-NPN-DT-YY > SPACES... */
		if (isGT(ps220ss.ssNps220CnvCarsDtMm, SPACES)) {
			paFieldsInner.paCnvCarsDtMm.set(ps220ss.ssNps220CnvCarsDtMm);
		} else {
			paFieldsInner.paCnvCarsDtMm.set("11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-MM > SPACES... */
		if (isGT(ps220ss.ssNps220CnvCarsDtDd, SPACES)) {
			paFieldsInner.paCnvCarsDtDd.set(ps220ss.ssNps220CnvCarsDtDd);
		} else {
			paFieldsInner.paCnvCarsDtDd.set("11");
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-DD > SPACES... */
		if (isGT(ps220ss.ssNps220CnvCarsDtYy, SPACES)) {
			paFieldsInner.paCnvCarsDtYy.set(ps220ss.ssNps220CnvCarsDtYy);
		} else {
			paFieldsInner.paCnvCarsDtYy.set(SPACES);
		}
		/* ##* Ending: IF SS-NPS220-CNV-CARS-DT-YY > SPACES... */
		paFieldsInner.paCpuAidRte.set(ps220ss.ssNps220CpuAidRte);
		paFieldsInner.paStateRegNo.set(ps220ss.ssNps220StateRegNo);
		paFieldsInner.paFgnStrPrtMku.set(ps220ss.ssNps220FgnStrPrtMku);
		/* TSA-13-S */
		paFieldsInner.paInhomePrtMku.set(ps220ss.ssNps220InhomePrtMku);
		/* ##* PA-SHOP-PRT-MKU = SS-NPS220-SHOP-PRT-MKU */
		paFieldsInner.paShopPrtMku.set(ZERO);
		/* TSA-13-E */
		paFieldsInner.paShipDest.set(ps220ss.ssNps220ShipDest);
		/* ##* ##GS-21S */
		paFieldsInner.paInqCmyCd.set(ps220ss.ssNps220InqCmyCd);
		paFieldsInner.paRteUnNo.set(ps220ss.ssNps220RteUnNo);
		paFieldsInner.paMsgCmyLst.set(ps220ss.ssNps220MsgCmyLst);
		/* ##* ##GS-21E */
		/* ##* ##JA-16S */
		paFieldsInner.paAcsDckUnNo.set(ps220ss.ssNps220AcsDckUnNo);
		/* ##* ##JA-16E */
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* PA-JV-UN-NO = SS-NPS220-JV-UN-NO */
		/* ##* ##PB-19E */
		/* ##* ##RK-18E */
		paFieldsInner.unitFl.set("N");
		tpCommareaInner.caCustInd[1].set("N");
		tpCommareaInner.caRemainig1.set(paFieldsInner.paFields);
		nps220WorkFieldsInner.wsXctlPgm.set("NPS221");
		xctl();
	}

	/**
	 * Method generated from paragraph 1292-INSERT-SU.
	 */
	private void insertSu() {
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTSU")
			        + " "
			        + "(SVC_UN_NO, SVC_UN_CLO_DT, SVC_UN_CNV_FL, STE_REG_NO, CPU_AID_RTE_FL, SPDE_SVC_UN_FL, HOS_SVC_UN_NO, POS_STA_DT, POS_UN_NO, PRT_SH_CD, SVC_PVD_FL, MKT_ATV_FL, UN_OPN_DT, CNV_SPDE_DT, CNV_NPN_DT, CNV_CARS_DT, FGN_STR_PRT_MKU_PC, PRT_INV_CRY_FL, PRM_SHP_PRT_MKU_PC, PRM_SIT_PRT_MKU_PC)"
			        + " VALUES ('" + npsxtsu.svcUnNo + "', '" + npsxtsu.svcUnCloDt + "', '"
			        + nps220WorkFieldsInner.wsUnitConverted + "', '" + npsxtsu.steRegNo + "', '" + npsxtsu.cpuAidRteFl
			        + "', '" + npsxtsu.spdeSvcUnFl + "', '" + nps220WorkFieldsInner.wsHostNo + "', '"
			        + npsxtsu.posStaDt + "', '" + npsxtsu.posUnNo + "', '" + npsxtsu.prtShCd + "', '"
			        + npsxtsu.svcPvdFl + "', '" + npsxtsu.mktAtvFl + "', '" + npsxtsu.unOpnDt + "', '"
			        + npsxtsu.cnvSpdeDt + "', '" + npsxtsu.cnvNpnDt + "', '" + npsxtsu.cnvCarsDt + "', '"
			        + npsxtsu.fgnStrPrtMkuPc + "', '" + npsxtsu.prtInvCryFl + "', '" + npsxtsu.prmShpPrtMkuPc + "', '"
			        + npsxtsu.prmSitPrtMkuPc + "')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPSXTSU")
			        + " "
			        + "(SVC_UN_NO, SVC_UN_CLO_DT, SVC_UN_CNV_FL, STE_REG_NO, CPU_AID_RTE_FL, SPDE_SVC_UN_FL, HOS_SVC_UN_NO, POS_STA_DT, POS_UN_NO, PRT_SH_CD, SVC_PVD_FL, MKT_ATV_FL, UN_OPN_DT, CNV_SPDE_DT, CNV_NPN_DT, CNV_CARS_DT, FGN_STR_PRT_MKU_PC, PRT_INV_CRY_FL, PRM_SHP_PRT_MKU_PC, PRM_SIT_PRT_MKU_PC)"
			        + " VALUES (?, ?, "
			        +"?, ?, ?," 
			        +"?, ?, "
			        +"?, ?, ?, "
			        +"?, ?, ?, "
			        +"?, ?, ?, "
			        +"?, ?, ?, "
			        +"?)";
			sqlparams = new BaseData[]{npsxtsu.svcUnNo, npsxtsu.svcUnCloDt,
					nps220WorkFieldsInner.wsUnitConverted, npsxtsu.steRegNo, npsxtsu.cpuAidRteFl, 
					npsxtsu.spdeSvcUnFl, nps220WorkFieldsInner.wsHostNo, 
					npsxtsu.posStaDt, npsxtsu.posUnNo, npsxtsu.prtShCd,
					npsxtsu.svcPvdFl, npsxtsu.mktAtvFl, npsxtsu.unOpnDt,
					npsxtsu.cnvSpdeDt, npsxtsu.cnvNpnDt, npsxtsu.cnvCarsDt,
					npsxtsu.fgnStrPrtMkuPc, npsxtsu.prtInvCryFl, npsxtsu.prmShpPrtMkuPc,
					npsxtsu.prmSitPrtMkuPc};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("19");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 1294-INSERT-XU.
	 */
	private void insertXu() {
		sqlerrorflag = false;
		try {
			// Start - Manual fix for INSERT
/*			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPJXTXU")
			        + " "
			        + "(XU_SU_NO, XU_SU_NAME, XU_SU_ADDR_L1, XU_SU_ADDR_L2, XU_SU_CITY, XU_SU_STATE_PROV, XU_SU_ZIP_PC, XU_SU_ZIP_8, XU_REGION_NO)"
			        + " VALUES ('" + tpCommareaInner.caSvcUnNo + "', '" + npjxtxu.xuSuName + "', '"
			        + npjxtxu.xuSuAddrL1 + "', '" + npjxtxu.xuSuAddrL2 + "', '" + npjxtxu.xuSuCity + "', '"
			        + npjxtxu.xuSuStateProv + "', '" + npjxtxu.xuSuZipPc + "', '" + npjxtxu.xuSuZip8 + "', '"
			        + nps220WorkFieldsInner.wsRegionNo + "')";
			sqlparams = null;
*/
			sqlstmt = " INSERT INTO   "
			        + getAppVars().getTableNameOverriden("NPJXTXU")
			        + "(XU_SU_NO, XU_SU_NAME, XU_SU_ADDR_L1, XU_SU_ADDR_L2, XU_SU_CITY, XU_SU_STATE_PROV, XU_SU_ZIP_PC, XU_SU_ZIP_8, XU_REGION_NO)"
			        + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
			sqlparams = new BaseData[]{tpCommareaInner.caSvcUnNo, npjxtxu.xuSuName,
					npjxtxu.xuSuAddrL1, npjxtxu.xuSuAddrL2, npjxtxu.xuSuCity,
					npjxtxu.xuSuStateProv, npjxtxu.xuSuZipPc, npjxtxu.xuSuZip8, 
					nps220WorkFieldsInner.wsRegionNo};
			// End - Manual fix for INSERT
			getAppVars().executeSimpleUpdate(sqlstmt, sqlparams, getAppVars().isImmediateCommit());
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220WorkFieldsInner.wsMessageKey.set("0025");
		} else {
			sqCallNumber.set("20");
			z991SqlError();
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 1315-WRITE-TO-UPJTSRP.
	 */
	private void writeToUpjtsrp() {
		if (isEQ(paFieldsInner.paUnitType, "RG")) {
			tsrOrgDesc.set("RGN");
			tsrOrgId.set("10");
		} else {
			tsrOrgDesc.set("UNIT");
			tsrOrgId.set("11");
		}
		/* ##* Ending: IF PA-UNIT-TYPE = 'RG'... */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT DISTINCT (CURRENT_TIMESTAMP)" + " FROM   "
			        + getAppVars().getTableNameOverriden("NPSXTD1") + " ";
			sqlinto = new BaseData[] { nps220WorkFieldsInner.wsTimestamp };
			sqlparams = null;
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			tsrOrgTstamp.set(nps220WorkFieldsInner.wsTimestamp);
		} else {
			sqCallNumber.set("21");
			z991SqlError();
		}
		tsrOrgNumber.set(tpCommareaInner.caSvcUnNo);
		cicsCallNumber.set("6");
		WriteRecord write = CICSCommandFactory.getWriteRecord(getCICSContext());
		write.setFrom(tsrOrgActivity);
		write.setDataset(UpjtsrpKsdsVsam.class);
		write.setLength(tsrOrgActivity.getLength());
		write.setRecordIdField(tsrOrgKey);
		write.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1320-UPDATE-MSG-CMY-LST.
	 */
	private void updateMsgCmyLst() {
		/* ##* DELETE COMMUNITY CODE */
		tpCommareaInner.caEndOfDataFlag.set("N");
		browseIpsumgfl();
		while (!(tpCommareaInner.caEndOfData.isTrue() || isNE(ipsumgflUnNo, tpCommareaInner.caSvcUnNo))) {
			readNextIpsumgfl();
			if (tpCommareaInner.caEndOfData.isTrue() || isNE(ipsumgflUnNo, tpCommareaInner.caSvcUnNo)) {
				/* CONTINUE_STMT */
			} else {
				nps220WorkFieldsInner.wsValidInqCmyCdFl.set("N");
				nps220WorkFieldsInner.wsInqCmyCd.set(ipsumgflInqCmyCd);
				searchlabel1: {
					for (; isLT(wsFinalSub, nps220WorkFieldsInner.wsFinalMessageList.length); wsFinalSub.add(1)) {
						if (isEQ(nps220WorkFieldsInner.wsInqCmyCd,
						    nps220WorkFieldsInner.wsFnlCmyLst[wsFinalSub.toInt()])) {
							nps220WorkFieldsInner.wsValidInqCmyCdFl.set("Y");
							break searchlabel1;
						}
					}
					/* CONTINUE_STMT */
				}
				if (isEQ(nps220WorkFieldsInner.wsValidInqCmyCdFl, "N")) {
					deleteIpsumgfl();
				}
				/* ##* Ending: IF WS-VALID-INQ-CMY-CD-FL = 'N'... */
			}
			/* ##* Ending: IF CA-END-OF-DATA OR... */
		}

		endbrowseIpsumgfl();
		/* ##* ADD COMMUNITY CODE */
		nps220WorkFieldsInner.wsMessageList.set(ps220ss.ssNps220MsgCmyLst);
		nps220WorkFieldsInner.wsSub.set(ZERO);
		while (!(isGTE(nps220WorkFieldsInner.wsSub, 16))) {
			compute(nps220WorkFieldsInner.wsSub, 0).set(add(nps220WorkFieldsInner.wsSub, 1));
			nps220WorkFieldsInner.wsChar.set(nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsSub.toInt()]);
			if (isEQ(nps220WorkFieldsInner.wsChar, ALPHABETIC) && isGT(nps220WorkFieldsInner.wsChar, SPACES)) {
				updateIpsumgfl();
			}
			/* ##* Ending: IF WS-CHAR IS ALPHABETIC AND... */
		}

	}

	/**
	 * Method generated from paragraph 1325-DELETE-IPSUMGFL.
	 */
	private void deleteIpsumgfl() {
		ipsumgflUnNo.set(tpCommareaInner.caSvcUnNo);
		ipsumgflInqCmyCd.set(nps220WorkFieldsInner.wsInqCmyCd);
		nps220WorkFieldsInner.csmtVsamName.set("IPSUMGFL");
		cicsCallNumber.set("7");
		DeleteRecord delete = CICSCommandFactory.getDeleteRecord(getCICSContext());
		delete.setDataset(IpsumgflKsdsVsam.class);
		delete.setRecordIdField(ipsumgflKey);
		delete.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				/* CONTINUE_STMT */
			} else {
				/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
				clErrorflag = "C";
				accessError();
			}
			/* ##* Ending: IF NOTFND... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1330-UPDATE-IPSUMGFL.
	 */
	private void updateIpsumgfl() {
		ipsumgflRecord.set(SPACES);
		ipsumgflUnNo.set(tpCommareaInner.caSvcUnNo);
		ipsumgflInqCmyCd.set(nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsSub.toInt()]);
		nps220WorkFieldsInner.csmtVsamName.set("IPSUMGFL");
		cicsCallNumber.set("8");
		WriteRecord write = CICSCommandFactory.getWriteRecord(getCICSContext());
		write.setFrom(ipsumgflRecord);
		write.setDataset(IpsumgflKsdsVsam.class);
		write.setLength(ipsumgflRecord.getLength());
		write.setRecordIdField(ipsumgflKey);
		write.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			if (apsEibfnEibrcodeInner.duprec.isTrue() || apsEibfnEibrcodeInner.dupkey.isTrue()) {
				/* CONTINUE_STMT */
			} else {
				/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
				clErrorflag = "C";
				accessError();
			}
			/* ##* Ending: IF DUPREC OR DUPKEY... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1540-WRITE-CSMT-MSG.
	 */
	private void writeCsmtMsg() {
		/* ##* CSMT-VSAM-NAME = 'UPSMUIFL' ##CT-20 */
		nps220WorkFieldsInner.csmtEibrcode.set(getCICSContext().getEIB().getResponseCode());
		nps220WorkFieldsInner.csmtEibfn.set(getCICSContext().getEIB().getLastCommand());
		cicsCallNumber.set("9");
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(nps220WorkFieldsInner.wsNps220VsamMsg);
		writeqTd.setLength(nps220WorkFieldsInner.wsNps220VsamMsg.getLength());
		writeqTd.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 1541-WRITE-CSMT-2.
	 */
	private void writeCsmt2() {
		nps220WorkFieldsInner.csmtVsamName.set("IPSDRCFL");
		nps220WorkFieldsInner.csmtEibrcode.set(getCICSContext().getEIB().getResponseCode());
		nps220WorkFieldsInner.csmtEibfn.set(getCICSContext().getEIB().getLastCommand());
		cicsCallNumber.set("10");
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(nps220WorkFieldsInner.wsNps220VsamMsg);
		writeqTd.setLength(nps220WorkFieldsInner.wsNps220VsamMsg.getLength());
		writeqTd.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2000-PROGRAM-INV-PROCESSING.
	 */
	private void programInvProcessing() {
		if (isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS050")) {
			tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set(SPACES);
			compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
			tpCommareaInner.caCurrPageNo.set(1);
			paFieldsInner.paFields.set(tpCommareaInner.caRemainig1);
			/* : === BEGIN CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
			ssPageNumber.set(tpCommareaInner.caCurrPageNo);
			ssArea2.set(SPACES);
			ssProgName.set("NPS220");
			StringUtil stringVariable1 = new StringUtil();
			stringVariable1.addExpression(ssProgNameSfx);
			stringVariable1.addExpression("0");
			stringVariable1.setStringInto(ssArea1);
			z100RestoreScreen();
			nps220FillerRecordInner.nps220Record.set(ssTsRecord);
			/* : === END CODE GENERATED BY $NPS-RESTORE-SCREEN === : */
			if (isEQ(nps220FillerRecordInner.nps220SuNameLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220AddrLine1Length, -1)
			        || isEQ(nps220FillerRecordInner.nps220AddrLine2Length, -1)
			        || isEQ(nps220FillerRecordInner.nps220CityLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220StateLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220Zip5Length, -1)
			        || isEQ(nps220FillerRecordInner.nps220Zip4Length, -1)
			        || isEQ(nps220FillerRecordInner.nps220UnitTypeLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220MktAtvFlLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220UnitConvertedLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220PrtInvCryFlLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CrtDrcOrdFlLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220RegionNoLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CentralNoLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220HostNoLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220SvcPvdFlLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220UnOpnDtMmLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220UnOpnDtDdLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220UnOpnDtYyLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220SvcUnCloDtMmLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220SvcUnCloDtDdLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220SvcUnCloDtYyLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvNpnDtDdLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvNpnDtMmLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvNpnDtYyLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220PosUnNoLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220RfsAcctNoLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvSpdeDtDdLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvSpdeDtMmLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvSpdeDtYyLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvCarsDtDdLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvCarsDtMmLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CnvCarsDtYyLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CpuAidRteLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220PosStaDtDdLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220PosStaDtMmLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220PosStaDtYyLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220StateRegNoLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220ShipDestLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220FgnStrPrtMkuLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220RteUnNo, -1)
			        || isEQ(nps220FillerRecordInner.nps220InqCmyCd, -1)
			        || isEQ(nps220FillerRecordInner.nps220MsgCmyLst, -1)
			        || isEQ(nps220FillerRecordInner.nps220InhomePrtMkuLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220AcsDckUnNoLength, -1)
			        || isEQ(nps220FillerRecordInner.nps220CommandLength, -1)) {
				/* ##* ##PB-19E */
				/* ##* ##RK-18E */
				nps220CursorFlag.set("T");
			}
			/* ##* Ending: IF NPS220-SU-NAME-LENGTH = -1 OR... */
			ps220ss.ssNps220Record.set(nps220FillerRecordInner.nps220Record);
			sendScreen();
		} else {
			if (isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS231")
			        || isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS302")
			        || isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS671")
			        || isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS221")) {
				if (isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS231")
				        || isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS302")) {
					compute(tpCommareaInner.caCurrPgmIndex, 0).set(add(tpCommareaInner.caCurrPgmIndex, 1));
					tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set("NPS220");
					tpCommareaInner.caCustInd[1].set(" ");
					firstTimeThru();
				} else {
					if (isEQ(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS221")) {
						tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set(SPACES);
						compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
						if (isEQ(tpCommareaInner.caCustInd[1], "N")) {
							backFromNps221();
							nps220WorkFieldsInner.wsMessageKey.set("2497");
						} else {
							firstTimeThru();
						}
						/* ##* Ending: IF CA-CUST-IND(1) = 'N'... */
					} else {
						tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()].set(SPACES);
						compute(tpCommareaInner.caCurrPgmIndex, 0).set(sub(tpCommareaInner.caCurrPgmIndex, 1));
						firstTimeThru();
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) =... */
				}
				/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) = ... */
				sendScreen();
			} else {
				tpCommareaInner.caErrorKey.set("0007");
				cicsCallNumber.set("11");
				apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
				tpCommareaInner.tpInvocationMode.set("L");
				tpCommareaInner.tpAddrTable.set(LOVALUES);
				tpCommareaInner.tpAddrCount.set(0);
				LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
				link.setProgram(NPSErrorMessageHandler.class);
				link.setCommarea(tpCommareaInner.tpCommarea);
				link.setLength(5620);
				link.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
				wsMessageLine1.set(tpCommareaInner.caErrorMsg);
				wsMessagePgmId.set("NPS220");
				tpCommareaInner.caErrorKey.set("I007");
				cicsCallNumber.set("12");
				apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
				tpCommareaInner.tpInvocationMode.set("L");
				tpCommareaInner.tpAddrTable.set(LOVALUES);
				tpCommareaInner.tpAddrCount.set(0);
				LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
				link2.setProgram(NPSErrorMessageHandler.class);
				link2.setCommarea(tpCommareaInner.tpCommarea);
				link2.setLength(5620);
				link2.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
				wsMessageLine2.set(tpCommareaInner.caErrorMsg);
				cicsCallNumber.set("13");
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(wsMessageArea);
				sendText.setLength(158);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
					/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
					clErrorflag = "C";
					accessError();
				}
				/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
				/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar.execute();
			}
			/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) = ... */
		}
		/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX) = ... */
	}

	/**
	 * Method generated from paragraph 2100-FIRST-TIME-THRU.
	 */
	private void firstTimeThru() {
		nps220FillerRecordInner.nps220Record.set(LOVALUES);
		nps220FillerRecordInner.nps220PgmLevel.set(stampLevelNumber);
		nps220FillerRecordInner.nps220TdScreenDate.set(tpCommareaInner.caTdScreenDate);
		tpCommareaInner.caCurrPageNo.set(1);
		tpCommareaInner.caErrorFlag.set("N");
		tpCommareaInner.caEndOfDataFlag.set("N");
		initialize(paFieldsInner.paFields);
		ps220ss.ssNps220Record.set(SPACES);
		nps220FillerRecordInner.nps220Msg.set(SPACES);
		nps220FillerRecordInner.nps220Msg2.set(SPACES);
		nps220FillerRecordInner.nps220Command.set(SPACES);
		/* ##* SELECT DATA FROM NPSXTBU TABLE */
		/* ##* ADDED INQ-CMY-CD, RTE-UN-NO ##CT-20 */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  UN_NO, UN_NM, UN_TYP_CD, UN_LN1_AD, UN_LN2_AD, UN_CTY_NM, UN_STE_CD, ZIP_CD, ZIP_SUF_CD, RGN_NO, ALT_RPR_UN_NO, CTR_SVC_UN_NO, INQ_CMY_CD, RTE_UN_NO, RFS_UN_NO"
			        + " FROM   " + getAppVars().getTableNameOverriden("NPSXTBU") + " " + " WHERE UN_NO = ?";
			sqlinto = new BaseData[] { npsxtbu.unNo, npsxtbu.unNm, npsxtbu.unTypCd, npsxtbu.unLn1Ad, npsxtbu.unLn2Ad,
			        npsxtbu.unCtyNm, npsxtbu.unSteCd, npsxtbu.zipCd, npsxtbu.zipSufCd, npsxtbu.rgnNo,
			        npsxtbu.altRprUnNo, npsxtbu.ctrSvcUnNo, npsxtbu.inqCmyCd, npsxtbu.rteUnNo, npsxtbu.rfsUnNo };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220FillerRecordInner.nps220SuNo.set(npsxtbu.unNo);
			nps220FillerRecordInner.nps220SuName.set(npsxtbu.unNm);
			nps220FillerRecordInner.nps220AddrLine1.set(npsxtbu.unLn1Ad);
			nps220FillerRecordInner.nps220AddrLine2.set(npsxtbu.unLn2Ad);
			nps220FillerRecordInner.nps220City.set(npsxtbu.unCtyNm);
			nps220FillerRecordInner.nps220State.set(npsxtbu.unSteCd);
			nps220FillerRecordInner.nps220Zip5.set(npsxtbu.zipCd);
			nps220FillerRecordInner.nps220Zip4.set(npsxtbu.zipSufCd);
			nps220FillerRecordInner.nps220RegionNo.set(npsxtbu.rgnNo);
			nps220FillerRecordInner.nps220CentralNo.set(npsxtbu.ctrSvcUnNo);
			nps220FillerRecordInner.nps220InqCmyCd.set(npsxtbu.inqCmyCd);
			/* CT-20 */
			nps220FillerRecordInner.nps220RteUnNo.set(npsxtbu.rteUnNo);
			/* CT-20 */
			nps220FillerRecordInner.nps220RfsAcctNo.set(npsxtbu.rfsUnNo);
			/* KG-23 */
			paFieldsInner.unitFl.set("O");
			selectOtherTables();
			startBrowseUpsmuifl();
			/* ##* ##JA-16S */
			readDrcFile();
			/* ##* ##JA-16E */
			/* ##* ##CT-20S */
			getMsgCmyLst();
			/* ##* ##CT-20E */
			tpCommareaInner.caCustInd[1].set("O");
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100) && tpCommareaInner.userFromSco.isTrue()) {
				nps220FillerRecordInner.nps220SuNo.set(tpCommareaInner.caSvcUnNo);
				nps220FillerRecordInner.nps220HostNo.set(tpCommareaInner.caSvcUnNo);
				tpCommareaInner.caCustInd[1].set("N");
			} else {
				sqCallNumber.set("22");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* ##* ##PD-24S */
		halConvCheck();
		/* ##* ##PD-24E */
		if (tpCommareaInner.userFromSco.isTrue()) {
			resetScreenAttr();
		} else {
			protScreen();
			nps220WorkFieldsInner.wsMessageKey.set("3081");
		}
		/* ##* Ending: IF USER-FROM-SCO... */
		ps220ss.ssNps220Record.set(nps220FillerRecordInner.nps220Record);
	}

	/**
	 * Method generated from paragraph 2110-SELECT-OTHER-TABLES.
	 */
	private void selectOtherTables() {
		/* ##* SELECT DATA FROM NPSXTSU TABLE */
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  SVC_UN_NO, SVC_UN_CLO_DT, SVC_UN_CNV_FL, STE_REG_NO, HOS_SVC_UN_NO, POS_STA_DT, POS_UN_NO, PRT_SH_CD, SVC_PVD_FL, MKT_ATV_FL, PRT_INV_CRY_FL, UN_OPN_DT, CNV_SPDE_DT, CNV_NPN_DT, CNV_CARS_DT, CPU_AID_RTE_FL, FGN_STR_PRT_MKU_PC, PRM_SHP_PRT_MKU_PC, PRM_SIT_PRT_MKU_PC"
			        + " FROM   " + getAppVars().getTableNameOverriden("NPSXTSU") + " " + " WHERE SVC_UN_NO = ?";
			sqlinto = new BaseData[] { npsxtsu.svcUnNo, npsxtsu.svcUnCloDt, npsxtsu.svcUnCnvFl, npsxtsu.steRegNo,
			        npsxtsu.hosSvcUnNo, npsxtsu.posStaDt, npsxtsu.posUnNo, npsxtsu.prtShCd, npsxtsu.svcPvdFl,
			        npsxtsu.mktAtvFl, npsxtsu.prtInvCryFl, npsxtsu.unOpnDt, npsxtsu.cnvSpdeDt, npsxtsu.cnvNpnDt,
			        npsxtsu.cnvCarsDt, nps220WorkFieldsInner.wsCpuAidRte, npsxtsu.fgnStrPrtMkuPc,
			        npsxtsu.prmShpPrtMkuPc, npsxtsu.prmSitPrtMkuPc };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220FillerRecordInner.nps220SuNo.set(npsxtsu.svcUnNo);
			nps220FillerRecordInner.nps220StateRegNo.set(npsxtsu.steRegNo);
			nps220FillerRecordInner.nps220HostNo.set(npsxtsu.hosSvcUnNo);
			nps220FillerRecordInner.nps220ShipDest.set(npsxtsu.prtShCd);
			nps220FillerRecordInner.nps220SvcPvdFl.set(npsxtsu.svcPvdFl);
			nps220FillerRecordInner.nps220MktAtvFl.set(npsxtsu.mktAtvFl);
			nps220FillerRecordInner.nps220PrtInvCryFl.set(npsxtsu.prtInvCryFl);
			nps220WorkFieldsInner.wsUnOpnDt.set(npsxtsu.unOpnDt);
			nps220FillerRecordInner.nps220UnOpnDtMm.set(nps220WorkFieldsInner.wsUnOpnDtMm);
			nps220FillerRecordInner.nps220UnOpnDtDd.set(nps220WorkFieldsInner.wsUnOpnDtDd);
			nps220FillerRecordInner.nps220UnOpnDtYy.set(nps220WorkFieldsInner.wsUnOpnDtYy);
			if (isEQ(npsxtsu.svcUnCloDt, "1111-11-11")) {
				nps220WorkFieldsInner.wsSvcUnCloDt.set(SPACES);
			} else {
				nps220WorkFieldsInner.wsSvcUnCloDt.set(npsxtsu.svcUnCloDt);
			}
			/* ##* Ending: IF SVC-UN-CLO-DT = '1111-11-11'... */
			nps220FillerRecordInner.nps220SvcUnCloDtMm.set(nps220WorkFieldsInner.wsSvcUnCloDtMm);
			nps220FillerRecordInner.nps220SvcUnCloDtDd.set(nps220WorkFieldsInner.wsSvcUnCloDtDd);
			nps220FillerRecordInner.nps220SvcUnCloDtYy.set(nps220WorkFieldsInner.wsSvcUnCloDtYy);
			if (isEQ(npsxtsu.cnvNpnDt, "1111-11-11")) {
				nps220WorkFieldsInner.wsCnvNpnDt.set(SPACES);
			} else {
				nps220WorkFieldsInner.wsCnvNpnDt.set(npsxtsu.cnvNpnDt);
			}
			/* ##* Ending: IF CNV-NPN-DT = '1111-11-11'... */
			nps220FillerRecordInner.nps220CnvNpnDtMm.set(nps220WorkFieldsInner.wsCnvNpnDtMm);
			nps220FillerRecordInner.nps220CnvNpnDtDd.set(nps220WorkFieldsInner.wsCnvNpnDtDd);
			nps220FillerRecordInner.nps220CnvNpnDtYy.set(nps220WorkFieldsInner.wsCnvNpnDtYy);
			if (isEQ(npsxtsu.cnvSpdeDt, "1111-11-11")) {
				nps220WorkFieldsInner.wsCnvSpdeDt.set(SPACES);
			} else {
				nps220WorkFieldsInner.wsCnvSpdeDt.set(npsxtsu.cnvSpdeDt);
			}
			/* ##* Ending: IF CNV-SPDE-DT = '1111-11-11'... */
			nps220FillerRecordInner.nps220CnvSpdeDtMm.set(nps220WorkFieldsInner.wsCnvSpdeDtMm);
			nps220FillerRecordInner.nps220CnvSpdeDtDd.set(nps220WorkFieldsInner.wsCnvSpdeDtDd);
			nps220FillerRecordInner.nps220CnvSpdeDtYy.set(nps220WorkFieldsInner.wsCnvSpdeDtYy);
			if (isEQ(npsxtsu.cnvCarsDt, "1111-11-11")) {
				nps220WorkFieldsInner.wsCnvCarsDt.set(SPACES);
			} else {
				nps220WorkFieldsInner.wsCnvCarsDt.set(npsxtsu.cnvCarsDt);
			}
			/* ##* Ending: IF CNV-CARS-DT = '1111-11-11'... */
			nps220FillerRecordInner.nps220CnvCarsDtMm.set(nps220WorkFieldsInner.wsCnvCarsDtMm);
			nps220FillerRecordInner.nps220CnvCarsDtDd.set(nps220WorkFieldsInner.wsCnvCarsDtDd);
			nps220FillerRecordInner.nps220CnvCarsDtYy.set(nps220WorkFieldsInner.wsCnvCarsDtYy);
			nps220FillerRecordInner.nps220CnvCarsDtYy.set(nps220WorkFieldsInner.wsCnvCarsDtYy);
			nps220FillerRecordInner.nps220CpuAidRte.set(nps220WorkFieldsInner.wsCpuAidRte);
			if (isEQ(npsxtsu.posStaDt, "1111-11-11")) {
				nps220WorkFieldsInner.wsPosStaDt.set(SPACES);
			} else {
				nps220WorkFieldsInner.wsPosStaDt.set(npsxtsu.posStaDt);
			}
			/* ##* Ending: IF POS-STA-DT = '1111-11-11'... */
			nps220FillerRecordInner.nps220PosStaDtMm.set(nps220WorkFieldsInner.wsPosStaDtMm);
			nps220FillerRecordInner.nps220PosStaDtDd.set(nps220WorkFieldsInner.wsPosStaDtDd);
			nps220FillerRecordInner.nps220PosStaDtYy.set(nps220WorkFieldsInner.wsPosStaDtYy);
			nps220FillerRecordInner.nps220PosUnNo.set(npsxtsu.posUnNo);
			/* ##* ##RK-18S */
			/* ##* ##PB-19S */
			/* ##* NPS220-JV-UN-NO = JV-SVC-UN-NO */
			/* ##* PA-JV-UN-NO = JV-SVC-UN-NO */
			/* ##* ##PB-19E */
			/* ##* ##RK-18E */
			nps220WorkFieldsInner.wsPrtMku.set(npsxtsu.fgnStrPrtMkuPc);
			nps220FillerRecordInner.nps220FgnStrPrtMku.set(nps220WorkFieldsInner.wsPrtMku);
			/* TSA-13-S */
			nps220WorkFieldsInner.wsShopMku.set(npsxtsu.prmShpPrtMkuPc);
			/* ##* NPS220-SHOP-PRT-MKU = WS-SHOP-MKU */
			nps220WorkFieldsInner.wsInhomeMku.set(npsxtsu.prmSitPrtMkuPc);
			nps220FillerRecordInner.nps220InhomePrtMku.set(nps220WorkFieldsInner.wsInhomeMku);
			/* TSA-13-E */
			if (isEQ(npsxtsu.svcUnCnvFl, SPACES)) {
				nps220FillerRecordInner.nps220UnitConverted.set("N");
			} else {
				nps220FillerRecordInner.nps220UnitConverted.set(npsxtsu.svcUnCnvFl);
			}
			/* ##* Ending: IF SVC-UN-CNV-FL = SPACE... */
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				/* CONTINUE_STMT */
			} else {
				sqCallNumber.set("23");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
		/* ##* ##JA-16S */
		if (isEQ(npsxtbu.unTypCd, "RET")) {
			readRuTable();
		}
		/* ##* Ending: IF UN-TYP-CD OF DCLNPSXTBU = 'RET'... */
	}

	/**
	 * Method generated from paragraph 2115-START-BROWSE-UPSMUIFL.
	 */
	private void startBrowseUpsmuifl() {
		wsUpsmuiflRecInner.wsUpsmuiflSvcUnNo.set("DEFAULT");
		wsUpsmuiflRecInner.wsUpsmuiflRecType.set("U");
		nps220WorkFieldsInner.csmtVsamName.set("UPSMUIFL");
		/* CT-20 */
		cicsCallNumber.set("14");
		StartFileBrowse startBr = CICSCommandFactory.getStartFileBrowse(getCICSContext());
		startBr.setDataset(UpsmuiflKsdsVsam.class);
		startBr.setRecordIdField(wsUpsmuiflRecInner.wsUpsmuiflKey);
		startBr.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				tpCommareaInner.caEndOfDataFlag.set("Y");
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps220WorkFieldsInner.wsMessageKey.set("3009");
					nps220WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps220WorkFieldsInner.wsMessageKey.set("3010");
						nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps220WorkFieldsInner.wsMessageKey.set("3011");
							nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps220WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC ... */
					}
					/* ##* Ending: IF NOTOPEN ... */
				}
				/* ##* Ending: IF IOERR ... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			while (!(tpCommareaInner.caEndOfData.isTrue() || isEQ(wsUpsmuiflRecInner.wsUpsmuiflUnitType,
			    npsxtbu.unTypCd))) {
				readNextUpsmuifl();
			}

			if (tpCommareaInner.caEndOfData.isTrue()) {
				if (tpCommareaInner.userFromSco.isTrue()) {
					nps220FillerRecordInner.nps220UnitType.set("?");
				} else {
					nps220FillerRecordInner.nps220UnitType.set(SPACES);
				}
				/* ##* Ending: IF USER-FROM-SCO... */
				nps220FillerRecordInner.nps220UnitDesc.set(SPACES);
			} else {
				nps220FillerRecordInner.nps220UnitType.set(wsUpsmuiflRecInner.wsUpsmuiflSeqNo);
				nps220FillerRecordInner.nps220UnitDesc.set(wsUpsmuiflRecInner.wsUpsmuiflUnitDesc);
			}
			/* ##* Ending: IF CA-END-OF-DATA... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		EndFileBrowse endBr = CICSCommandFactory.getEndFileBrowse(getCICSContext());
		endBr.setDataset(UpsmuiflKsdsVsam.class);
		endBr.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2116-READ-NEXT-UPSMUIFL.
	 */
	private void readNextUpsmuifl() {
		nps220WorkFieldsInner.csmtVsamName.set("UPSMUIFL");
		cicsCallNumber.set("15");
		ReadForwards readnext = CICSCommandFactory.getReadForwards(getCICSContext());
		readnext.setDataset(UpsmuiflKsdsVsam.class);
		readnext.setInto(wsUpsmuiflRecInner.wsUpsmuiflRec);
		readnext.setLength(wsUpsmuiflRecInner.wsUpsmuiflRec.getLength());
		readnext.setRecordIdField(wsUpsmuiflRecInner.wsUpsmuiflKey);
		readnext.setKeylength(wsUpsmuiflRecInner.wsUpsmuiflKey.getLength());
		readnext.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.endfile.isTrue()) {
				tpCommareaInner.caEndOfDataFlag.set("Y");
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps220WorkFieldsInner.wsMessageKey.set("3009");
					nps220WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps220WorkFieldsInner.wsMessageKey.set("3010");
						nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps220WorkFieldsInner.wsMessageKey.set("3011");
							nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps220WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC ... */
					}
					/* ##* Ending: IF NOTOPEN ... */
				}
				/* ##* Ending: IF IOERR ... */
			}
			/* ##* Ending: IF ENDFILE... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2117-READ-RU-TABLE.
	 */
	private void readRuTable() {
		sqlerrorflag = false;
		try {
			sqlstmt = " SELECT  ACS_DCK_UN_NO" + " FROM   " + getAppVars().getTableNameOverriden("NPSXTRU") + " "
			        + " WHERE SVC_RTL_UN_NO = ?";
			sqlinto = new BaseData[] { npsxtru.acsDckUnNo };
			sqlparams = new BaseData[] { tpCommareaInner.caSvcUnNo };
			getAppVars().executeSingleRowQuery(sqlstmt, sqlparams, sqlinto);
		} catch (SQLException ex) {
			sqlerrorflag = true;
			getAppVars().setSqlErrorCode(ex);
		}
		if (isEQ(getAppVars().getSqlErrorCode(), 0)) {
			nps220FillerRecordInner.nps220AcsDckUnNo.set(npsxtru.acsDckUnNo);
		} else {
			if (isEQ(getAppVars().getSqlErrorCode(), 100)) {
				nps220FillerRecordInner.nps220AcsDckUnNo.set(SPACES);
			} else {
				sqCallNumber.set("24");
				z991SqlError();
			}
			/* ##* Ending: IF SQLCODE = +100... */
		}
		/* ##* Ending: IF SQLCODE = 0... */
	}

	/**
	 * Method generated from paragraph 2118-READ-DRC-FILE.
	 */
	private void readDrcFile() {
		ipsdrcflKey.set(tpCommareaInner.caSvcUnNo);
		cicsCallNumber.set("16");
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setDataset(IpsdrcflKsdsVsam.class);
		read.setInto(ipsdrcflRec);
		read.setRecordIdField(ipsdrcflKey);
		read.setLength(ipsdrcflRec.getLength());
		read.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				nps220FillerRecordInner.nps220CrtDrcOrdFl.set("N");
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps220WorkFieldsInner.csmtVsamInfo.set("IOERROR READING FILE");
					writeCsmt2();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmt2();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATED");
							writeCsmt2();
						} else {
							nps220WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmt2();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC... */
					}
					/* ##* Ending: IF NOTOPEN... */
				}
				/* ##* Ending: IF IOERR... */
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			nps220FillerRecordInner.nps220CrtDrcOrdFl.set("Y");
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2120-PROT-SCREEN.
	 */
	private void protScreen() {
		nps220FillerRecordInner.nps220PgmLevelAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220TdScreenDateAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220SuNameAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220AddrLine1Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220AddrLine2Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CityAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220StateAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220Zip5Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220Zip4Attr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220UnitTypeAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220UnitDescAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220RegionNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CentralNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220HostNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220SvcPvdFlAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220MktAtvFlAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220UnitConvertedAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220PrtInvCryFlAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* ##JA-16S */
		nps220FillerRecordInner.nps220CrtDrcOrdFlAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* ##JA-16E */
		nps220FillerRecordInner.nps220UnOpnDtMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220UnOpnDtDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220UnOpnDtYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220SvcUnCloDtMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220SvcUnCloDtDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220SvcUnCloDtYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220PosStaDtMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220PosStaDtDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220PosStaDtYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220PosUnNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* ##KG-23S */
		nps220FillerRecordInner.nps220RfsAcctNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* ##KG-23E */
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* TP-ATTR NPS220 PROT JV-UN-NO */
		/* ##* ##PB-19E */
		/* ##* ##RK-18E */
		nps220FillerRecordInner.nps220CnvSpdeDtMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvSpdeDtDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvSpdeDtYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvNpnDtMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvNpnDtDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvNpnDtYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CpuAidRteAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvCarsDtMmAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvCarsDtDdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CnvCarsDtYyAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220StateRegNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220FgnStrPrtMkuAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* TSA-13-S */
		nps220FillerRecordInner.nps220InhomePrtMkuAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* TP-ATTR NPS220 PROT SHOP-PRT-MKU */
		/* TSA-13-E */
		/* ##* ##JA-16S */
		nps220FillerRecordInner.nps220AcsDckUnNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* ##JA-16E */
		/* ##* ##CT-20S */
		nps220FillerRecordInner.nps220InqCmyCdAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220RteUnNoAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220MsgCmyLstAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		/* ##* ##CT-20E */
		nps220FillerRecordInner.nps220ShipDestAttr.set(apsScreenAttributesInner.tpAttrPnfff);
		nps220FillerRecordInner.nps220CommandLength.set(apsScreenAttributesInner.tpPositionCursor);
		nps220CursorFlag.set("T");
		nps220CursorFlag.set("T");
	}

	/**
	 * Method generated from paragraph 2125-GET-MSG-CMY-LST.
	 */
	private void getMsgCmyLst() {
		nps220WorkFieldsInner.wsMessageList.set(SPACES);
		nps220WorkFieldsInner.wsSub.set(ZERO);
		browseIpsumgfl();
		while (!(tpCommareaInner.caEndOfData.isTrue() || isNE(ipsumgflUnNo, tpCommareaInner.caSvcUnNo) || isGTE(
		    nps220WorkFieldsInner.wsSub, 16))) {
			readNextIpsumgfl();
			if (tpCommareaInner.caEndOfData.isTrue() || isNE(ipsumgflUnNo, tpCommareaInner.caSvcUnNo)) {
				nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsSub.toInt()].set(SPACES);
				nps220FillerRecordInner.nps220MsgCmyLst.set(nps220WorkFieldsInner.wsMessageList);
			} else {
				compute(nps220WorkFieldsInner.wsSub, 0).set(add(nps220WorkFieldsInner.wsSub, 1));
				nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsSub.toInt()].set(ipsumgflInqCmyCd);
				compute(nps220WorkFieldsInner.wsSub, 0).set(add(nps220WorkFieldsInner.wsSub, 1));
				nps220WorkFieldsInner.wsMsgCmyLst[nps220WorkFieldsInner.wsSub.toInt()]
				    .set(nps220WorkFieldsInner.wsComma);
			}
			/* ##* Ending: IF CA-END-OF-DATA OR... */
		}

		endbrowseIpsumgfl();
		paFieldsInner.paMsgCmyLst.set(nps220WorkFieldsInner.wsMessageList);
	}

	/**
	 * Method generated from paragraph 2130-BROWSE-IPSUMGFL.
	 */
	private void browseIpsumgfl() {
		ipsumgflUnNo.set(tpCommareaInner.caSvcUnNo);
		ipsumgflInqCmyCd.set(LOVALUES);
		nps220WorkFieldsInner.csmtVsamName.set("IPSUMGFL");
		cicsCallNumber.set("17");
		StartFileBrowse startBr = CICSCommandFactory.getStartFileBrowse(getCICSContext());
		startBr.setDataset(IpsumgflKsdsVsam.class);
		startBr.setRecordIdField(ipsumgflKey);
		startBr.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				tpCommareaInner.caEndOfDataFlag.set("Y");
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps220WorkFieldsInner.wsMessageKey.set("3009");
					nps220WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps220WorkFieldsInner.wsMessageKey.set("3010");
						nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps220WorkFieldsInner.wsMessageKey.set("3011");
							nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps220WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC ... */
					}
					/* ##* Ending: IF NOTOPEN ... */
				}
				/* ##* Ending: IF IOERR ... */
			}
			/* ##* Ending: IF NOTFND... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2135-READ-NEXT-IPSUMGFL.
	 */
	private void readNextIpsumgfl() {
		nps220WorkFieldsInner.csmtVsamName.set("IPSUMGFL");
		cicsCallNumber.set("18");
		ReadForwards readnext = CICSCommandFactory.getReadForwards(getCICSContext());
		readnext.setDataset(IpsumgflKsdsVsam.class);
		readnext.setInto(ipsumgflRecord);
		readnext.setLength(ipsumgflRecord.getLength());
		readnext.setRecordIdField(ipsumgflKey);
		readnext.setKeylength(ipsumgflKey.getLength());
		readnext.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (apsEibfnEibrcodeInner.endfile.isTrue()) {
				tpCommareaInner.caEndOfDataFlag.set("Y");
			} else {
				if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
					nps220WorkFieldsInner.wsMessageKey.set("3009");
					nps220WorkFieldsInner.csmtVsamInfo.set("IOERR READING VSAM FILE");
					writeCsmtMsg();
				} else {
					if (apsEibfnEibrcodeInner.notopen.isTrue()) {
						nps220WorkFieldsInner.wsMessageKey.set("3010");
						nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT OPEN");
						writeCsmtMsg();
					} else {
						if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
							nps220WorkFieldsInner.wsMessageKey.set("3011");
							nps220WorkFieldsInner.csmtVsamInfo.set("FILE NOT ALLOCATE");
							writeCsmtMsg();
						} else {
							nps220WorkFieldsInner.csmtVsamInfo.set("ERROR READING FILE");
							writeCsmtMsg();
							/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
							clErrorflag = "C";
							accessError();
						}
						/* ##* Ending: IF NOTALLOC ... */
					}
					/* ##* Ending: IF NOTOPEN ... */
				}
				/* ##* Ending: IF IOERR ... */
			}
			/* ##* Ending: IF ENDFILE... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2140-ENDBROWSE-IPSUMGFL.
	 */
	private void endbrowseIpsumgfl() {
		nps220WorkFieldsInner.csmtVsamName.set("IPSUMGFL");
		cicsCallNumber.set("19");
		EndFileBrowse endBr = CICSCommandFactory.getEndFileBrowse(getCICSContext());
		endBr.setDataset(IpsumgflKsdsVsam.class);
		endBr.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2145-HAL-CONV-CHECK.
	 */
	private void halConvCheck() {
		ipspltflLogonUnNo.set(tpCommareaInner.caSvcUnNo);
		ipspltflSvcUnNo.set(tpCommareaInner.caSvcUnNo);
		ipspltflFunction.set("CAMS");
		cicsCallNumber.set("20");
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setDataset(IpspltflKsdsVsam.class);
		read.setInto(ipspltflRec);
		read.setRecordIdField(ipspltflKey);
		read.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
				nps220WorkFieldsInner.halConvFl.set("N");
			} else {
				/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
				clErrorflag = "C";
				accessError();
			}
			/* ##* Ending: IF NOTFND... */
			/** : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		} else {
			if (isEQ(ipspltflFl, "H")) {
				nps220WorkFieldsInner.halConvFl.set("Y");
			} else {
				nps220WorkFieldsInner.halConvFl.set("N");
			}
			/* ##* Ending: IF IPSPLTFL-FL = 'H'... */
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
	}

	/**
	 * Method generated from paragraph 2200-BACK-FROM-NPS221.
	 */
	private void backFromNps221() {
		nps220FillerRecordInner.nps220Record.set(LOVALUES);
		nps220FillerRecordInner.nps220PgmLevel.set(stampLevelNumber);
		nps220FillerRecordInner.nps220TdScreenDate.set(tpCommareaInner.caTdScreenDate);
		tpCommareaInner.caCurrPageNo.set(1);
		tpCommareaInner.caErrorFlag.set("N");
		paFieldsInner.paFields.set(tpCommareaInner.caRemainig1);
		ps220ss.ssNps220Record.set(SPACES);
		nps220FillerRecordInner.nps220Msg.set(SPACES);
		nps220FillerRecordInner.nps220Msg2.set(SPACES);
		nps220FillerRecordInner.nps220SuNo.set(paFieldsInner.paSuNo);
		nps220FillerRecordInner.nps220SuName.set(paFieldsInner.paSuName);
		nps220FillerRecordInner.nps220AddrLine1.set(paFieldsInner.paAddrLine1);
		nps220FillerRecordInner.nps220AddrLine2.set(paFieldsInner.paAddrLine2);
		nps220FillerRecordInner.nps220City.set(paFieldsInner.paCity);
		nps220FillerRecordInner.nps220State.set(paFieldsInner.paState);
		nps220FillerRecordInner.nps220Zip5.set(paFieldsInner.paZip5);
		nps220FillerRecordInner.nps220Zip4.set(paFieldsInner.paZip4);
		npsxtbu.unTypCd.set(paFieldsInner.paUnitType);
		startBrowseUpsmuifl();
		nps220FillerRecordInner.nps220RegionNo.set(paFieldsInner.paRegionNo);
		nps220FillerRecordInner.nps220CentralNo.set(paFieldsInner.paCentralNo);
		nps220FillerRecordInner.nps220HostNo.set(paFieldsInner.paHostNo);
		nps220FillerRecordInner.nps220SvcPvdFl.set(paFieldsInner.paSvcPvdFl);
		nps220FillerRecordInner.nps220MktAtvFl.set(paFieldsInner.paMktAtvFl);
		nps220FillerRecordInner.nps220UnitConverted.set(paFieldsInner.paUnitConverted);
		nps220FillerRecordInner.nps220PrtInvCryFl.set(paFieldsInner.paPrtInvCryFl);
		/* ##* ##JA-16S */
		nps220FillerRecordInner.nps220CrtDrcOrdFl.set(paFieldsInner.paCrtDrcOrdFl);
		/* ##* ##JA-16E */
		if (isEQ(paFieldsInner.paUnOpnDt, "11111111") || isEQ(paFieldsInner.paUnOpnDt, "1111    ")) {
			nps220FillerRecordInner.nps220UnOpnDtMm.set(SPACES);
			nps220FillerRecordInner.nps220UnOpnDtDd.set(SPACES);
			nps220FillerRecordInner.nps220UnOpnDtYy.set(SPACES);
		} else {
			nps220FillerRecordInner.nps220UnOpnDtMm.set(paFieldsInner.paUnOpnDtMm);
			nps220FillerRecordInner.nps220UnOpnDtDd.set(paFieldsInner.paUnOpnDtDd);
			nps220FillerRecordInner.nps220UnOpnDtYy.set(paFieldsInner.paUnOpnDtYy);
		}
		/* ##* Ending: IF PA-UN-OPN-DT = '11111111' OR '1111 '... */
		if (isEQ(paFieldsInner.paSvcUnCloDt, "11111111") || isEQ(paFieldsInner.paSvcUnCloDt, "1111    ")) {
			nps220FillerRecordInner.nps220SvcUnCloDtMm.set(SPACES);
			nps220FillerRecordInner.nps220SvcUnCloDtDd.set(SPACES);
			nps220FillerRecordInner.nps220SvcUnCloDtYy.set(SPACES);
		} else {
			nps220FillerRecordInner.nps220SvcUnCloDtMm.set(paFieldsInner.paSvcUnCloDtMm);
			nps220FillerRecordInner.nps220SvcUnCloDtDd.set(paFieldsInner.paSvcUnCloDtDd);
			nps220FillerRecordInner.nps220SvcUnCloDtYy.set(paFieldsInner.paSvcUnCloDtYy);
		}
		/* ##* Ending: IF PA-SVC-UN-CLO-DT = '11111111' OR '1111 '... */
		if (isEQ(paFieldsInner.paPosStaDt, "11111111") || isEQ(paFieldsInner.paPosStaDt, "1111    ")) {
			nps220FillerRecordInner.nps220PosStaDtMm.set(SPACES);
			nps220FillerRecordInner.nps220PosStaDtDd.set(SPACES);
			nps220FillerRecordInner.nps220PosStaDtYy.set(SPACES);
		} else {
			nps220FillerRecordInner.nps220PosStaDtMm.set(paFieldsInner.paPosStaDtMm);
			nps220FillerRecordInner.nps220PosStaDtDd.set(paFieldsInner.paPosStaDtDd);
			nps220FillerRecordInner.nps220PosStaDtYy.set(paFieldsInner.paPosStaDtYy);
		}
		/* ##* Ending: IF PA-POS-STA-DT = '11111111' OR '1111 '... */
		nps220FillerRecordInner.nps220PosUnNo.set(paFieldsInner.paPosUnNo);
		/* ##* ##RK-18S */
		/* ##* ##PB-19S */
		/* ##* NPS220-JV-UN-NO = PA-JV-UN-NO */
		/* ##* ##PB-19E */
		nps220FillerRecordInner.nps220CpuAidRte.set(paFieldsInner.paCpuAidRte);
		/* ##* ##RK-18E */
		if (isEQ(paFieldsInner.paCnvSpdeDt, "11111111") || isEQ(paFieldsInner.paCnvSpdeDt, "1111    ")) {
			nps220FillerRecordInner.nps220CnvSpdeDtMm.set(SPACES);
			nps220FillerRecordInner.nps220CnvSpdeDtDd.set(SPACES);
			nps220FillerRecordInner.nps220CnvSpdeDtYy.set(SPACES);
		} else {
			nps220FillerRecordInner.nps220CnvSpdeDtMm.set(paFieldsInner.paCnvSpdeDtMm);
			nps220FillerRecordInner.nps220CnvSpdeDtDd.set(paFieldsInner.paCnvSpdeDtDd);
			nps220FillerRecordInner.nps220CnvSpdeDtYy.set(paFieldsInner.paCnvSpdeDtYy);
		}
		/* ##* Ending: IF PA-CNV-SPDE-DT = '11111111' OR '1111 '... */
		if (isEQ(paFieldsInner.paCnvNpnDt, "11111111") || isEQ(paFieldsInner.paCnvNpnDt, "1111    ")) {
			nps220FillerRecordInner.nps220CnvNpnDtMm.set(SPACES);
			nps220FillerRecordInner.nps220CnvNpnDtDd.set(SPACES);
			nps220FillerRecordInner.nps220CnvNpnDtYy.set(SPACES);
		} else {
			nps220FillerRecordInner.nps220CnvNpnDtMm.set(paFieldsInner.paCnvNpnDtMm);
			nps220FillerRecordInner.nps220CnvNpnDtDd.set(paFieldsInner.paCnvNpnDtDd);
			nps220FillerRecordInner.nps220CnvNpnDtYy.set(paFieldsInner.paCnvNpnDtYy);
		}
		/* ##* Ending: IF PA-CNV-NPN-DT = '11111111' OR '1111 '... */
		if (isEQ(paFieldsInner.paCnvCarsDt, "11111111") || isEQ(paFieldsInner.paCnvCarsDt, "1111     ")) {
			nps220FillerRecordInner.nps220CnvCarsDtMm.set(SPACES);
			nps220FillerRecordInner.nps220CnvCarsDtDd.set(SPACES);
			nps220FillerRecordInner.nps220CnvCarsDtYy.set(SPACES);
		} else {
			nps220FillerRecordInner.nps220CnvCarsDtMm.set(paFieldsInner.paCnvCarsDtMm);
			nps220FillerRecordInner.nps220CnvCarsDtDd.set(paFieldsInner.paCnvCarsDtDd);
			nps220FillerRecordInner.nps220CnvCarsDtYy.set(paFieldsInner.paCnvCarsDtYy);
		}
		/* ##* Ending: IF PA-CNV-CARS-DT = '11111111' OR '1111 '... */
		nps220FillerRecordInner.nps220StateRegNo.set(paFieldsInner.paStateRegNo);
		nps220FillerRecordInner.nps220FgnStrPrtMku.set(paFieldsInner.paFgnStrPrtMku);
		/* TSA-13-S */
		nps220FillerRecordInner.nps220InhomePrtMku.set(paFieldsInner.paInhomePrtMku);
		/* ##* NPS220-SHOP-PRT-MKU = PA-SHOP-PRT-MKU */
		/* TSA-13-E */
		/* ##* ##JA-16S */
		nps220FillerRecordInner.nps220AcsDckUnNo.set(paFieldsInner.paAcsDckUnNo);
		/* ##* ##JA-16E */
		nps220FillerRecordInner.nps220ShipDest.set(paFieldsInner.paShipDest);
		nps220FillerRecordInner.nps220InqCmyCd.set(paFieldsInner.paInqCmyCd);
		/* CT-20 */
		nps220FillerRecordInner.nps220RteUnNo.set(paFieldsInner.paRteUnNo);
		/* CT-20 */
		nps220FillerRecordInner.nps220MsgCmyLst.set(paFieldsInner.paMsgCmyLst);
		/* CT-20 */
		if (tpCommareaInner.userFromSco.isTrue()) {
			resetScreenAttr();
		} else {
			protScreen();
			nps220WorkFieldsInner.wsMessageKey.set("3081");
		}
		/* ##* Ending: IF USER-FROM-SCO... */
		ps220ss.ssNps220Record.set(nps220FillerRecordInner.nps220Record);
	}

	/**
	 * Method generated from paragraph 3000-TRANSID-INV-PROCESSING.
	 */
	private void transidInvProcessing() {
		tpCommareaInner.caErrorKey.set("I005");
		cicsCallNumber.set("21");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		wsMessageArea.set(tpCommareaInner.caErrorMsg);
		cicsCallNumber.set("22");
		ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
		sendText.setFrom(wsMessageArea);
		sendText.setLength(79);
		sendText.setErase(true);
		sendText.setFreekb(true);
		sendText.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 9000-SEND-SCREEN.
	 */
	private void sendScreen() {
		if (isGT(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
			tpCommareaInner.caErrorKey.set(nps220WorkFieldsInner.wsMessageKey);
			cicsCallNumber.set("23");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
			link.setProgram(NPSErrorMessageHandler.class);
			link.setCommarea(tpCommareaInner.tpCommarea);
			link.setLength(5620);
			link.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			nps220FillerRecordInner.nps220Msg.set(tpCommareaInner.caErrorMsg);
			tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
			ps220ss.ssNps220Msg.set(nps220FillerRecordInner.nps220Msg);
			nps220FillerRecordInner.nps220MsgAttr.set(apsScreenAttributesInner.tpAttrPbfft);
			ps220ss.scaSsNps220Msg.set(nps220FillerRecordInner.scaNps220Msg);
		}
		/* ##* Ending: IF WS-MESSAGE-KEY > SPACES... */
		tpCommareaInner.caRemainig1.set(paFieldsInner.paFields);
		/* : === CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		ssPageNumber.set(tpCommareaInner.caCurrPageNo);
		ssArea2.set(SPACES);
		ssProgName.set("NPS220");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		ssTsRecord.set(ps220ss.ssNps220Record);
		z100SaveScreen();
		/* : === END OF CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		cicsCallNumber.set("24");
		tpCommareaInner.tpInvocationMode.set("S");
		tpCommareaInner.tpCallingProgramId.set("NPS220");
		if (!nps220CursorPos.isTrue()) {
			nps220FillerRecordInner.nps220SuNameLength.set(apsScreenAttributesInner.tpPositionCursor);
		}
		/* ##* Ending: IF NOT NPS220-CURSOR-POS... */
		ScreenSendMap sendMap = CICSCommandFactory.getScreenSendMap(getCICSContext());
		sendMap.setScreen(Nps220ScreenVars.class);
		sendMap.setFrom(nps220FillerRecordInner.nps220Record);
		sendMap.setCursor(true);
		sendMap.setErase(true);
		sendMap.setFreekb(true);
		sendMap.execute();
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.setTransid("PS3M");
		returnVar.setCommarea(tpCommareaInner.tpCommarea);
		returnVar.setLength(5620);
		returnVar.execute();
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph 9100-SEND-SCREEN-DATAONLY.
	 */
	private void sendScreenDataonly() {
		if (isGT(nps220WorkFieldsInner.wsMessageKey, SPACES)) {
			tpCommareaInner.caErrorKey.set(nps220WorkFieldsInner.wsMessageKey);
			cicsCallNumber.set("25");
			apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
			tpCommareaInner.tpInvocationMode.set("L");
			tpCommareaInner.tpAddrTable.set(LOVALUES);
			tpCommareaInner.tpAddrCount.set(0);
			LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
			link.setProgram(NPSErrorMessageHandler.class);
			link.setCommarea(tpCommareaInner.tpCommarea);
			link.setLength(5620);
			link.execute();
			apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
			apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
			tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
			nps220FillerRecordInner.nps220Msg.set(tpCommareaInner.caErrorMsg);
			tpCommareaInner.caMsg.set(tpCommareaInner.caErrorMsg);
			ps220ss.ssNps220Msg.set(nps220FillerRecordInner.nps220Msg);
			nps220FillerRecordInner.nps220MsgAttr.set(apsScreenAttributesInner.tpAttrPbfft);
			ps220ss.scaSsNps220Msg.set(nps220FillerRecordInner.scaNps220Msg);
		}
		/* ##* Ending: IF WS-MESSAGE-KEY > SPACES... */
		/* ##* ELSE ##TSA-13-S */
		/* ##* SS-NPS220-MSG = SPACES */
		/* ##* NPS220-MSG = SPACES ##TSA-13-E */
		tpCommareaInner.caRemainig1.set(paFieldsInner.paFields);
		/* : === CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		ssPageNumber.set(tpCommareaInner.caCurrPageNo);
		ssArea2.set(SPACES);
		ssProgName.set("NPS220");
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(ssProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(ssArea1);
		ssTsRecord.set(ps220ss.ssNps220Record);
		z100SaveScreen();
		/* : === END OF CODE GENERATED BY $NPS-SAVE-SCREEN === : */
		cicsCallNumber.set("26");
		tpCommareaInner.tpInvocationMode.set("S");
		tpCommareaInner.tpCallingProgramId.set("NPS220");
		if (!nps220CursorPos.isTrue()) {
			nps220FillerRecordInner.nps220SuNameLength.set(apsScreenAttributesInner.tpPositionCursor);
		}
		/* ##* Ending: IF NOT NPS220-CURSOR-POS... */
		ScreenSendMap sendMap = CICSCommandFactory.getScreenSendMap(getCICSContext());
		sendMap.setScreen(Nps220ScreenVars.class);
		sendMap.setFrom(nps220FillerRecordInner.nps220Record);
		sendMap.setCursor(true);
		sendMap.setDataonly(true);
		sendMap.setFreekb(true);
		sendMap.execute();
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.setTransid("PS3M");
		returnVar.setCommarea(tpCommareaInner.tpCommarea);
		returnVar.setLength(5620);
		returnVar.execute();
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph 9200-XCTL.
	 */
	private void xctl() {
		if (isEQ(nps220WorkFieldsInner.wsXctlPgm, "NPS050") || isEQ(nps220WorkFieldsInner.wsXctlPgm, "NPS221")) {
			tpCommareaInner.caRemainig1.set(paFieldsInner.paFields);
		} else {
			/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
			dqProgName.set("NPS220");
			z100DeleteQueues();
		}
		/* ##* Ending: IF WS-XCTL-PGM = 'NPS050' OR 'NPS221'... */
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		cicsCallNumber.set("27");
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.execute();
		if (isGT(getCICSContext().getEIB().getResponseCode(), LOVALUES)) {
			/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
			clErrorflag = "C";
			accessError();
		}
		/* ##* Ending: IF EIBRCODE > LOW-VALUES... */
		/* : === END OF CODE GENERATED BY $NPS-ACCESS-ERROR : */
		cicsCallNumber.set("28");
		tpCommareaInner.tpInvocationMode.set("P");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
		xctl.setProgram(nps220WorkFieldsInner.wsXctlPgm);
		xctl.setCommarea(tpCommareaInner.tpCommarea);
		xctl.setLength(5620);
		xctl.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		/* : === BEGIN CODE GENERATED BY $NPS-ACCESS-ERROR === */
		clErrorflag = "C";
		accessError();
	}

	/**
	 * Method generated from paragraph Z100-DELETE-QUEUES.
	 */
	private void z100DeleteQueues() {
		/* : PARAGRAPH TO DELETE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-DELETE-QUEUES) : */
		/* DELETE QUEUE */
		dqProgQueueSysid.set(dqProgNameSysid);
		dqProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(dqProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("29");
		ReleaseTemporaryStorage deleteqTs = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs.setQueue(dqProgQueue);
		deleteqTs.setNoHandle(true);
		deleteqTs.execute();
		StringUtil stringVariable2 = new StringUtil();
		stringVariable2.addExpression(dqProgNameSfx);
		stringVariable2.addExpression("1");
		stringVariable2.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("30");
		ReleaseTemporaryStorage deleteqTs2 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs2.setQueue(dqProgQueue);
		deleteqTs2.setNoHandle(true);
		deleteqTs2.execute();
		StringUtil stringVariable3 = new StringUtil();
		stringVariable3.addExpression(dqProgNameSfx);
		stringVariable3.addExpression("2");
		stringVariable3.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("31");
		ReleaseTemporaryStorage deleteqTs3 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs3.setQueue(dqProgQueue);
		deleteqTs3.setNoHandle(true);
		deleteqTs3.execute();
		StringUtil stringVariable4 = new StringUtil();
		stringVariable4.addExpression(dqProgNameSfx);
		stringVariable4.addExpression("3");
		stringVariable4.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("32");
		ReleaseTemporaryStorage deleteqTs4 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs4.setQueue(dqProgQueue);
		deleteqTs4.setNoHandle(true);
		deleteqTs4.execute();
	}

	/**
	 * Method generated from paragraph 99700-ACCESS-ERROR.
	 */
	private void accessError() {
		/* : PARAGRAPH TO PROCESS CICS ERRORS : */
		/* : (GENERATED BY $NPS-ACCESS-ERROR) : */
		/* WRITE A MESSAGE TO THE CSMT */
		clCsmtMsg1Inner.clPgmId1.set("NPS220");
		clCsmtMsg1Inner.clEibrcode.set(getCICSContext().getEIB().getResponseCode());
		msg2Eibfn.set(getCICSContext().getEIB().getLastCommand());
		clCsmtMsg1Inner.clTermid.set(getCICSContext().getEIB().getTerminalId());
		clCsmtMsg1Inner.clUserid.set(tpCommareaInner.caUserid);
		if (isEQ(clErrorflag, "V")) {
			clCsmtMsg1Inner.clErrortype.set(" ** VSAM ERROR ** ");
		} else {
			if (isEQ(clErrorflag, "C")) {
				clCsmtMsg1Inner.clCallNumber.set(cicsCallNumber);
				clCsmtMsg1Inner.clCallLiteral.set("CICS-CALL-NUMBER=");
				clCsmtMsg1Inner.clErrortype.set(" ** CICS ERROR ** ");
			} else {
				if (isEQ(clErrorflag, "M")) {
					clCsmtMsg1Inner.clErrortype.set(" ** COMM ERROR ** ");
				} else {
					if (isEQ(clErrorflag, "T")) {
						clCsmtMsg1Inner.clErrortype.set(" ** TABLE ERROR ** ");
					}
					/* ##* Ending: IF CL-ERRORFLAG = 'T'... */
				}
				/* ##* Ending: IF CL-ERRORFLAG = 'M'... */
			}
			/* ##* Ending: IF CL-ERRORFLAG = 'C'... */
		}
		/* ##* Ending: IF CL-ERRORFLAG = 'V'... */
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		clCsmtMsg1Inner.clTime.set(foTimeScreen);
		/* : === END OF CODE GENERATED BY $NPS-FORMAT-TIME == : */
		/* % SET WRITE-CONTROL */
		/* % BEGIN */
		/* % IF NOT &DEFINED(&WS-DEFINED) */
		/* % &WS-DEFINED = 1 */
		/* $NPS-MORE-MESSAGES-WS */
		/* % SET WORKING-STORAGE */
		/* $Z100-MORE-MSG */
		/* % BEGIN */
		/* MSG2-DATE = CA-TD-SCREEN-DATE */
		msg2Date.set(tpCommareaInner.caTdScreenDate);
		/* MSG2-SVC-UN-NO = CA-SVC-UN-NO */
		msg2SvcUnNo.set(tpCommareaInner.caSvcUnNo);
		/* % SET NOWRITE-CONTROL */
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(clCsmtBlanks);
		writeqTd.setLength(clCsmtBlanksLength);
		writeqTd.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd2 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd2.setQueue("CSMT");
		writeqTd2.setFrom(clCsmtBorder);
		writeqTd2.setLength(clCsmtBorderLength);
		writeqTd2.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd3 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd3.setQueue("CSMT");
		writeqTd3.setFrom(clCsmtMsg1Inner.clCsmtMsg1);
		writeqTd3.setLength(clCsmtMsg1Length);
		writeqTd3.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd4 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd4.setQueue("CSMT");
		writeqTd4.setFrom(csmtMsg2);
		writeqTd4.setLength(csmtMsg2Length);
		writeqTd4.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd5 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd5.setQueue("CSMT");
		writeqTd5.setFrom(clCsmtBorder);
		writeqTd5.setLength(clCsmtBorderLength);
		writeqTd5.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		WriteTransientStorage writeqTd6 = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd6.setQueue("CSMT");
		writeqTd6.setFrom(clCsmtBlanks);
		writeqTd6.setLength(clCsmtBlanksLength);
		writeqTd6.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.caErrorKey.set("9000");
		cicsCallNumber.set("33");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS220");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(6);
			tpCommareaInner.caEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(haMessageArea);
				sendText.setLength(79);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph 99400-FORMAT-TIME.
	 */
	private void formatTime() {
		/* : (GENERATED BY $NPS-FORMAT-TIME) : */
		foTimeNum.set(getCICSContext().getEIB().getTaskTime());
		foScrnHours.set(foHours);
		foScrnMinutes.set(foMinutes);
		foScrnSeconds.set(foSeconds);
	}

	/**
	 * Method generated from paragraph Z100-CHECK-DATE.
	 */
	private void z100CheckDate() {
		/* : PARAGRAPH TO VALIDATE THE DATE BY CARRYING OUT : */
		/* : THE FOLLOWING EDITS: : */
		/* : 1) YEAR IS NUMERIC (FORMAT 1 AND 2) : */
		/* : 2) MONTH IS 01 TO 12 (FORMAT 1, 2 AND 3) : */
		/* : 3) DAY IS 01 TO 28,29,30,31 DEPENDING ON : */
		/* : MONTH AND YEAR (FORMAT 1 AND 3) : */
		if (isLT(npsFormatMm, 1) || isGT(npsFormatMm, 12)) {
			npsDateErr.set("Y");
		}
		/* ##* Ending: IF NPS-FORMAT-MM < 01... */
		if (isEQ(npsDateErr, "N") && (isEQ(npsFormatNo, 1) || isEQ(npsFormatNo, 3))) {
			if (isLT(npsFormatDd, 1)) {
				npsDateErr.set("Y");
			} else {
				if (isEQ(npsFormatNo, 1)) {
					compute(npsDummy, 0).setDivide(npsFormatYy, (4));
					npsRemainder.setRemainder(npsDummy);
					if (isNE(npsRemainder, 0)) {
						npsDaysInMonth[2].set(28);
					}
					/* ##* Ending: IF NPS-REMAINDER NOT = 0... */
				}
				/* ##* Ending: IF NPS-FORMAT-NO = 1... */
				if (isGT(npsFormatDd, npsDaysInMonth[npsFormatMm.toInt()])) {
					npsDateErr.set("Y");
				}
				/* ##* Ending: IF NPS-FORMAT-DD >... */
			}
			/* ##* Ending: IF NPS-FORMAT-DD < 01... */
		}
		/* ##* Ending: IF NPS-DATE-ERR = 'N'... */
	}

	/**
	 * Method generated from paragraph Z991-SQL-ERROR.
	 */
	private void z991SqlError() {
		/* : PARAGRAPH TO PROCESS SQL ERRORS : */
		/* : (GENERATED BY $NPS-SQL-ERROR) : */
		/* ROLLBACK THE TRANSACTION */
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* DELETE ANY EXISTING QUEUES */
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS220");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		/* SAVE THE SQLCODE IN THE COMMAREA */
		tpCommareaInner.caSqlcode.set(getAppVars().getSqlErrorCode());
		/* WRITE A MESSAGE TO THE CSMT */
		slSqlca.set(getAppVars().getSqlca());
		slProgId.set("NPS220");
		slCallNumber.set(sqCallNumber);
		tpCommareaInner.caProgramWorkArea.set(slWorkArea);
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(GetSqlErrorMessage.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		tpCommareaInner.caErrorKey.set("9001");
		cicsCallNumber.set("34");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link2 = CICSCommandFactory.getLinkProgram(getCICSContext());
		link2.setProgram(NPSErrorMessageHandler.class);
		link2.setCommarea(tpCommareaInner.tpCommarea);
		link2.setLength(5620);
		link2.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(2);
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				if (isGT(getCICSContext().getEIB().getTerminalId(), SPACES)) {
					ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
					sendText.setFrom(haMessageArea);
					sendText.setLength(79);
					sendText.setErase(true);
					sendText.setFreekb(true);
					sendText.execute();
					apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
					apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				}
				/* ##* Ending: IF EIBTRMID > SPACES... */
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph Z100-RIGHT-JUSTIFY.
	 */
	private void z100RightJustify() {
		/* : THIS PARAGRAPH RIGHT JUSTIFYS THE INPUT FIELD : */
		/* : AND ADDS LEADING ZEROS. : */
		/* : THE FIELD IS ALSO VALIDATED TO ENSURE THERE ARE : */
		/* : NO ALPHA CHARACTERS OR EMBEDDED SPACES IN THE : */
		/* : INPUT. : */
		npsRightJustifyErr.set("N");
		npsOutputSub.set(16);
		npsOutput.set(ZERO);
		for (npsInputSub.set(16); !(isEQ(npsInputSub, 0) || isGT(npsInputChar[npsInputSub.toInt()], SPACES)); npsInputSub
		    .add(-1)) {
			/* No processing required. */
		}
		if (isEQ(npsInputSub, 0)) {
			npsRightJustifyErr.set("Y");
		}
		/* ##* Ending: IF NPS-INPUT-SUB = 0... */
		for (npsInputSub.set(npsInputSub); !(isEQ(npsRightJustifyErr, "Y") || isEQ(npsOutputSub, 0)
		        || isEQ(npsInputSub, 0) || isLTE(npsInputChar[npsInputSub.toInt()], SPACES)); npsInputSub.add(-1)) {
			if (isNE(npsInputChar[npsInputSub.toInt()], NUMERIC)) {
				npsRightJustifyErr.set("Y");
			} else {
				npsOutputChar[npsOutputSub.toInt()].set(npsInputChar[npsInputSub.toInt()]);
				compute(npsOutputSub, 0).set(sub(npsOutputSub, 1));
			}
			/* ##* Ending: IF NPS-INPUT-CHAR (NPS-INPUT-SUB) NOT NUMERIC... */
		}
		for (npsInputSub.set(npsInputSub); !(isEQ(npsRightJustifyErr, "Y") || isEQ(npsInputSub, 0)); npsInputSub
		    .add(-1)) {
			if (isGT(npsInputChar[npsInputSub.toInt()], SPACES)) {
				npsRightJustifyErr.set("Y");
			}
			/* ##* Ending: IF NPS-INPUT-CHAR (NPS-INPUT-SUB) > SPACE... */
		}
	}

	/**
	 * Method generated from paragraph Z100-LEFT-JUSTIFY.
	 */
	private void z100LeftJustify() {
		/* : THIS PARAGRAPH LEFT JUSTIFIES THE INPUT FIELD : */
		/* : AND ADDS TRAILING SPACES. : */
		npsLjNonSpaceFlag.set("N");
		npsLjOutputSub.set(1);
		npsLjOutput.set(SPACES);
		for (npsLjInputSub.set(1); !(!(isLT(npsLjInputSub, 67) && isEQ(npsLjInputChar[1], SPACES))); npsLjInputSub
		    .add(1)) {
			if (nonSpaceCharFound.isTrue()) {
				npsLjOutputChar[npsLjOutputSub.toInt()].set(npsLjInputChar[npsLjInputSub.toInt()]);
				compute(npsLjOutputSub, 0).set(add(npsLjOutputSub, 1));
			} else {
				if (isNE(npsLjInputChar[npsLjInputSub.toInt()], SPACES)) {
					npsLjNonSpaceFlag.set("Y");
					npsLjOutputChar[npsLjOutputSub.toInt()].set(npsLjInputChar[npsLjInputSub.toInt()]);
					compute(npsLjOutputSub, 0).set(add(npsLjOutputSub, 1));
				}
				/* ##* Ending: IF NPS-LJ-INPUT-CHAR(NPS-LJ-INPUT-SUB)... */
			}
			/* ##* Ending: IF NON-SPACE-CHAR-FOUND... */
		}
		if (isNE(npsLjInputChar[1], SPACES)) {
			npsLjOutput.set(npsLjInput);
		}
		/* ##* Ending: IF NPS-LJ-INPUT-CHAR(1) NOT = SPACE... */
	}

	/**
	 * Method generated from paragraph Z200-DELETE-SCREEN-QUEUE.
	 */
	private void z200DeleteScreenQueue() {
		/* : PARAGRAPH TO DELETE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* DELETE QUEUE */
		cicsCallNumber.set("35");
		ReleaseTemporaryStorage deleteqTs = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs.setQueue(ssProgQueue);
		deleteqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		/* Z200-DELETE-SCREEN-QUEUE--EXIT */
	}

	/**
	 * Method generated from paragraph Z200-REWRITE-SCREEN-ERROR.
	 */
	private void z200RewriteScreenError() {
		/* : PARAGRAPH TO OVERWRITE TS QUEUE RECORD : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* OVERWRITE RECORD */
		cicsCallNumber.set("36");
		WriteTemporaryStorage writeqTs = CICSCommandFactory.getWriteTemporaryStorage(getCICSContext());
		writeqTs.setQueue(ssProgQueue);
		writeqTs.setFrom(ssTsRecord);
		writeqTs.setLength(ssTsRecord.getLength());
		writeqTs.setItem(ssPageNumber);
		writeqTs.execute();
	}

	/**
	 * Method generated from paragraph Z100-SAVE-SCREEN.
	 */
	private void z100SaveScreen() {
		/* : PARAGRAPH TO SAVE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-SAVE-SCREEN) : */
		/* BUILD QUEUE NAME */
		if (isEQ(ssArea2, SPACES)) {
			ssProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
			ssProgQueueSysid.set(ssProgNameSysid);
			ssProgQueueId.set(ssArea1Num);
		} else {
			ssProgQueue.set(ssArea2);
		}
		/* ##* Ending: IF SS-AREA-2 IS EQUAL TO SPACES... */
		cicsCallNumber.set("37");
		WriteTemporaryStorage writeqTs = CICSCommandFactory.getWriteTemporaryStorage(getCICSContext());
		writeqTs.setQueue(ssProgQueue);
		writeqTs.setFrom(ssTsRecord);
		writeqTs.setLength(ssTsRecord.getLength());
		writeqTs.setItem(ssPageNumber);
		writeqTs.setRewrite(true);
		writeqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (apsEibfnEibrcodeInner.qiderr.isTrue() || apsEibfnEibrcodeInner.itemerr.isTrue()) {
			z200RewriteScreenError();
		}
		/* ##* Ending: IF QIDERR OR ITEMERR... */
	}

	/**
	 * Method generated from paragraph Z100-RESTORE-SCREEN.
	 */
	private void z100RestoreScreen() {
		/* : PARAGRAPH TO RESTORE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-RESTORE-SCREEN) : */
		/* BUILD QUEUE NAME */
		if (isEQ(ssArea2, SPACES)) {
			ssProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
			ssProgQueueSysid.set(ssProgNameSysid);
			ssProgQueueId.set(ssArea1Num);
		} else {
			ssProgQueue.set(ssArea2);
		}
		/* ##* Ending: IF SS-AREA-2 IS EQUAL TO SPACES... */
		cicsCallNumber.set("38");
		ReadTemporaryStorage readqTs = CICSCommandFactory.getReadTemporaryStorage(getCICSContext());
		readqTs.setQueue(ssProgQueue);
		readqTs.setInto(ssTsRecord);
		readqTs.setLength(ssTsRecord.getLength());
		readqTs.setItem(ssPageNumber);
		readqTs.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
	}

	/**
	 * Method generated from paragraph Z100-HANDLE-ABEND.
	 */
	private void z100HandleAbend() {
		/* : PARAGRAPH TO CREATE A DUMP : */
		/* : (GENERATED BY $NPS-HANDLE-ABEND) : */
		/* ROLLBACK THE TRANSACTION */
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* DELETE ANY EXISTING QUEUES */
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS220");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		/* WRITE A MESSAGE TO THE CSMT */
		haCsmtMsgInner.haMsgPgm.set("NPS220");
		AssignTransactionDetails assign = CICSCommandFactory.getAssignTransactionDetails(getCICSContext());
		assign.setAbcode(haCsmtMsgInner.haMsgAbendCode);
		assign.execute();
		haCsmtMsgInner.haMsgTermid.set(getCICSContext().getEIB().getTerminalId());
		haCsmtMsgInner.haMsgUserid.set(tpCommareaInner.caUserid);
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		haCsmtMsgInner.haMsgTime.set(foTimeScreen);
		/* : === END OF CODE GENERATED BY $NPS-FORMAT-TIME == : */
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(haCsmtMsgInner.haCsmtMsg);
		writeqTd.setLength(haCsmtMsgInner.haCsmtMsg.getLength());
		writeqTd.execute();
		if (isNE(haCsmtMsgInner.haMsgAbendCode, "AAL1") && isNE(haCsmtMsgInner.haMsgAbendCode, "ABM3")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AEY9") && isNE(haCsmtMsgInner.haMsgAbendCode, "AKCS")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "ATND") && isNE(haCsmtMsgInner.haMsgAbendCode, "ATNI")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AXFX") && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI4")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI6") && isNE(haCsmtMsgInner.haMsgAbendCode, "TX03")) {
			DumpApplication dump = CICSCommandFactory.getDumpApplication(getCICSContext());
			dump.setDumpcode(haCsmtMsgInner.haMsgAbendCode);
			dump.setComplete(true);
			dump.execute();
		}
		/* ##* Ending: IF HA-MSG-ABEND-CODE NOT = 'AAL1' AND... */
		tpCommareaInner.caErrorKey.set("9000");
		cicsCallNumber.set("39");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(4);
			tpCommareaInner.caEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(haMessageArea);
				sendText.setLength(79);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/*
	 * Class transformed from Data Structure TP-COMMAREA_INNER
	 */
	private static final class TpCommareaInner {

		private FixedLengthStringData tpCommarea = new FixedLengthStringData(5620);
		private FixedLengthStringData tpHeader = new FixedLengthStringData(40).isAPartOf(tpCommarea, 0);
		private FixedLengthStringData tpInvocationMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 0);
		private Validator tpTransidInvoked = new Validator(tpInvocationMode, "T");
		private Validator tpProgramInvoked = new Validator(tpInvocationMode, "P");
		private Validator tpScreenInvoked = new Validator(tpInvocationMode, "S");
		private Validator tpLinkInvoked = new Validator(tpInvocationMode, "L");
		private FixedLengthStringData tpPsbScheduledMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 1);
		private Validator tpPsbScheduled = new Validator(tpPsbScheduledMode, "P");
		private BinaryData tpAddrCount = new BinaryData(4, 0).isAPartOf(tpHeader, 2);
		private FixedLengthStringData tpCallingProgramId = new FixedLengthStringData(8).isAPartOf(tpHeader, 4);
		private FixedLengthStringData tpAddrTable = new FixedLengthStringData(80).isAPartOf(tpCommarea, 5540);
		private PointerData[] tpAddr = PtrArrayPartOfStructure(20, tpAddrTable, 0);

		private FixedLengthStringData filler2 = new FixedLengthStringData(5540).isAPartOf(tpCommarea, 0,
		    FILLER_REDEFINE);
		private FixedLengthStringData tpUserarea = new FixedLengthStringData(5500).isAPartOf(filler2, 40);
		private FixedLengthStringData commArea = new FixedLengthStringData(5500).isAPartOf(tpUserarea, 0, REDEFINE);
		/*
		 * NPS CICS COMMAREA FOR APS PROGRAMS * SYSTEM AREA = 120 * APPL COMMAREA = 2400* * TOTAL LENGTH = 2520* * TOTAL
		 * NPJ/NPS COMM-AREA = 5500 * MODIFICATION HISTORY * DATE CHANGED BY DESCRIPTION * 09/07/89 HANSON NG NEW FIELDS
		 * FOR SCT * 09/11/89 LANDOLT ATTACHED NPS (US) COMM-AREA * 10/09/89 HANSON NG ADD TIME & SERVICE LOCATION * -
		 * CA-LOGON-TIME * - CA-ITEM-SVCE-LOCN * 11/15/89 JOHN JEREB - CA-PREV-PGM-INDEX * 12/01/89 JOHN JEREB -
		 * CA-XE-SUP-GROUP * 03/28/90 ANDY SECORD ADDED CA-SO-NO * 03/29/90 SERGEI VARBANOV ADDED EXTRA 2000 BYTES *
		 * 07/23/92 BRECK KUHNKE ADDED CA-SPDE-SVC-UN-FL * 08/29/92 ALKA PATEL ADDED CA-BR-UN-NO * 08/27/02 IDA DOLINSKY
		 * ADDED CA-SVC-OGP-CD * LEVEL 03 07/02/93 ANNETTE STEPHENSON ADDED CA-SAVE-DATA-CNT * 09/22/93 SHEILA BRYANT
		 * ADDED CA-MENU-350-OPTION * 10/12/93 SHEILA BRYANT ADDED CA-BCH-NO (CA-SECTION8)* 09/29/94 SHEILA BRYANT ADDED
		 * CA-CUST-ALT-PHONE & * CA-CUST-CROSS-STREETS & * CA-CUST-APT-NO & * CA-CUST-ADDR-REC-TYPE TO * CA-SECTION9. 69
		 * BYTES TOTAL * FILLER WAS 700 BYTES NOW 630 * 04/28/94 B. ROBERTS ADDED CA-LAST-UNIT-NO * FIX NPS143
		 * PRODUCTION PROB. * 08/17/94 STEVEN GODEE ADDED POINTERS TO COMMON * STORAGE TABLES: CA-NPJ551-PTR* 11/29/94
		 * JOHN COLLINS ADDED CA-PRN-ID TO * CA-FILLER-SEC * 12/15/94 MOIRA CHASELEY ADDED CA-NPS020-OPTION * 01/10/95
		 * R. DYNAKO ADDED CA-AGR-ADJ-CNC-NO * 02/28/95 S. GODEE ADDED CA-MENU-285-OPTION * 04/28/95 M. YAU ADDED
		 * CA-TERMS-FLAG * 05/05/95 J. HUPPERT ADDED CA-CUST-SOURCE * 05/08/95 R. DYNAKO ADDED CA-RESTRICTED-ACCESS *
		 * 09/29/95 J. CORTEZ ADDED CA-CPU-AID-RTE-FL * CA-CPU-AID-RTE-PGM * 10/03/95 I. MARGULIS ADDED CA-SAVE-MU-NO *
		 * 06/20/96 J. CORTEZ ADDED CA-BUSINESS-CD * 07/03/96 M. WELTZER ADDED CA-HOMELIFE-UNIT * IN CA-FILLER-SEC *
		 * 07/30/96 M. SMITH ADDED CA-CUST-STREET-WOUT-APT* 11/05/96 M. YAU ADDED CA-WENT-TO-NPS471 * 01/07/97 J. CASEY
		 * ADDED CA-HOME-SERVICE-FL * 02/14/97 J. CASEY ADDED SECURITY-1-TO-7 * 10/08/97 J. VOGEL ADDED
		 * CA-FRH-RETURN-CODE, * CA-FRH-DIAG-CODE1, AND * VALUE '10' FOR CA-RETURN-CODE* 10/20/97 ALKA PATEL ADDED
		 * CA-MENU-602-OPTION * 10/30/97 ALKA PATEL ADDED CA-SYSID-604 * 04/22/99 T.R. GANESHA ADDED CA-INQUIRY-PA TO *
		 * CA-FILLER-SEC * 05/28/99 J. CASEY ADDED CA-SHOPBLOCK-FL * (REDEFINES CA-WENT-TO-NPS471* WHICH IS SOLELY USED
		 * BY * NPJ4701) * 07/13/99 A.PATEL/K.GILL 150 BYES FOR THIRD PARTY. * 12/21/99 M. HOWELL 30 BYES FOR TELESERV.
		 * * 02/25/99 P. NGUYEN ADDED CA-CRT-SO * 10/23/00 G. Hueneman ADDED CA-ath-py-dt. * 03/13/01 M.K.BALA ADDED
		 * THD-PTY-FLAG FOR GLBA * 06/02/01 J. JSARSFI ADDED 88 LEVEL FOR CA-BR-UN-NO* 01/31/02 C. TORRES ADDED GEOCODE,
		 * COUNTY CODE, * 7 JURISDICTION GLAGS, 3 TAX * FLAGS AND TAX RATE AT THE END * 08/27/02 I. DOLINSKY ADDED
		 * SERVICING ORGANIZATION * 10/02/02 I. DOLINSKY ADDED RACF-ID-ENTERED * 11/22/02 J. SMORYNSKI ADDED CA-OPTION2
		 * * 12/06/02 J. SMORYNSKI ADDED CA-ORI-CD * G. SAVAGE ADDED COMMENT FOR CA-CUST-IND * AND CA-CUST-TYPE. *
		 * 01/14/03 c. torres ADDED CA-CAP-NEEDED FOR DCL * 05/19/03 S. BROWN ADDED CA-EMP-SSN FOR IBO * 06/20/03 C.
		 * TORRES ADDED CA-FORCE-RSN FOR DCL * ADDED CA-NPS114-UN-NO for dcl * 02/12/04 i.Dolinsky Added
		 * ca-nps145-orig-sch-dt * for AE Growth project * 04/13/04 C. TORRES ADDED CA-BUS-ORG-CD * 11/02/04 C. TORRES
		 * ADDED CA-INQ-CMY-CD * 08/03/06 Kasinath Gupta Added Repair location unit no * as part of Call Code 97
		 * changes* 11/22/06 SURESH KAMARAJ ADDED CA-FST-AVL-DT AS PART * OF PROJECT JUMP * 12/26/07 VISWA C ADDED
		 * CA-PM-CHK-CD and adjust * the filler from 423 to 422 as* part of Call Close Project. * SYSTEM WORK AREA * -
		 * COMMON WORKFIELDS * . MENU FUNCTION * . RACF INFO *
		 */
		private FixedLengthStringData caSection1 = new FixedLengthStringData(130).isAPartOf(commArea, 0);
		private FixedLengthStringData caSection1Overlay = new FixedLengthStringData(130).isAPartOf(caSection1, 0,
		    REDEFINE);
		private FixedLengthStringData caTdScreenDate = new FixedLengthStringData(8).isAPartOf(caSection1Overlay, 86);
		/*
		 * ERROR MESSAGES * - ERROR MESSAGE NUMBER TO BE DISPLAYED ON SCREEN * SET IN EACH PROGRAM. * - ERROR MESSAGE TO
		 * CARRY FROM ONE SCREEN TO ANOTHER *
		 */
		private FixedLengthStringData caSection3 = new FixedLengthStringData(100).isAPartOf(commArea, 150);
		private FixedLengthStringData caSection3Overlay = new FixedLengthStringData(100).isAPartOf(caSection3, 0,
		    REDEFINE);
		private BinaryData caReturnCode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 0);
		/*
		 * 0 - SUCCESSFUL 2 - SQL ERROR 4 - CICS ABEND 6 - CICS ERROR 8 - PRINT PROBLEM 10 - FUNCTION ROUTER ERROR
		 * (DATASTREAM ERROR)
		 */
		private FixedLengthStringData caEibrcode = new FixedLengthStringData(6).isAPartOf(caSection3Overlay, 2);
		private BinaryData caSqlcode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 8);
		/* P R O G R A M W O R K A R E A * */
		private FixedLengthStringData caSection4 = new FixedLengthStringData(40).isAPartOf(commArea, 250);
		private FixedLengthStringData caSection4Overlay = new FixedLengthStringData(40).isAPartOf(caSection4, 0,
		    REDEFINE);
		private FixedLengthStringData caCurrPgmName = new FixedLengthStringData(8).isAPartOf(caSection4Overlay, 0);
		/*
		 * P R O G R A M C O N T R O L * . CONTAINS THE LOCATION IN THE STACK OF THE CURRENT TASK 1 PGM. . CHANGED BY
		 * EACH PROGRAM PRIOR TO TRANSFERING TO ANOTHER PROGRAM AND BY PF3 AND PF12 STUBS. . KEEP TRACK OF PROGRAMS UP
		 * TO 13 LEVELS. PGM-INDEX - CURRENT INDEX (MUST BE INCREMENTED BY 1 ON XCTL) STACK LEVEL - SET BY TASK 1 OF
		 * EACH PROGRAM. USED TO DETERMINE WHERE PROGRAM WILL RETURN TO FOR PF3 OR PF12 'X' EXIT POINT - 'R' RETURN
		 * POINT - BY-PASSED BY PF3 OPT-SEL - SELECTION ENTERED BY USER ON SCREEN. USED BETWEEN TRANSACTIONS FOR
		 * PROCESSING WHICH DEPENDS ON OPTION ENTERED ON PREVIOUS SCREEN PGM-NAME - PROGRAM NAME FOR PF3/PF12 TRANSFER
		 * CONTROL UPDATED IN TASK 2 OF EACH TRANSACTION.
		 */
		private FixedLengthStringData caSection5 = new FixedLengthStringData(260).isAPartOf(commArea, 290);
		private FixedLengthStringData caSection5Overlay = new FixedLengthStringData(260).isAPartOf(caSection5, 0,
		    REDEFINE);
		private BinaryData caCurrPgmIndex = new BinaryData(4, 0).isAPartOf(caSection5Overlay, 0);
		private FixedLengthStringData[] caPgmStack = FLSArrayPartOfStructure(13, 19, caSection5Overlay, 2);
		private FixedLengthStringData[] caPgmStackLevel = FLSDArrayPartOfArrayStructure(1, caPgmStack, 0);
		private FixedLengthStringData[] caPgmStackPgmName = FLSDArrayPartOfArrayStructure(8, caPgmStack, 3);
		/* P R O G R A M P A G I N G * */
		private FixedLengthStringData caSection6 = new FixedLengthStringData(30).isAPartOf(commArea, 550);
		private FixedLengthStringData caSection6Overlay = new FixedLengthStringData(30).isAPartOf(caSection6, 0,
		    REDEFINE);
		private BinaryData caCurrPageNo = new BinaryData(4, 0).isAPartOf(caSection6Overlay, 13);
		/*
		 * APPLICATION PROGRAM WORK AREA * NOTE - THIS IS A PUBLIC AREA. * ## ADDED 1000 EXTRA BYTES *
		 */
		private FixedLengthStringData caSection7 = new FixedLengthStringData(2000).isAPartOf(commArea, 580);
		private FixedLengthStringData caSection7Overlay1 = new FixedLengthStringData(2000).isAPartOf(caSection7, 0,
		    REDEFINE);
		private FixedLengthStringData caProgramWorkArea = new FixedLengthStringData(2000).isAPartOf(caSection7Overlay1,
		    0);
		/* PROGRAM SPECIFIC WORK/SCRATCH PAD AREA */
		private FixedLengthStringData caSection7Overlay3 = new FixedLengthStringData(2000).isAPartOf(caSection7, 0,
		    REDEFINE);
		private FixedLengthStringData caRemainig1 = new FixedLengthStringData(1000).isAPartOf(caSection7Overlay3, 1000);
		/*
		 * C U S T O M E R I N F O R M A T I O N * ## ADDED 500 BYTES TO THE FILLER *
		 */
		private FixedLengthStringData caSection9 = new FixedLengthStringData(650).isAPartOf(commArea, 2725);
		private FixedLengthStringData caSection9Overlay = new FixedLengthStringData(650).isAPartOf(caSection9, 0,
		    REDEFINE);
		/*
		 * '1' - MAIN CUSTOMER - WHICH WILL ALWAY BE THE CURRENT CUSTOMER WE ARE WORKING WITH. WILL ALWAYS BE WHERE
		 * CUSTOMER LEAD DATA IS READ FROM. '2' - NEW/MOVED/OCCUPANT CUSTOMER
		 */
		private FixedLengthStringData[] caCustInfo = FLSArrayPartOfStructure(2, 312, caSection9Overlay, 2);
		private FixedLengthStringData[] caCustInd = FLSDArrayPartOfArrayStructure(1, caCustInfo, 0);
		/*
		 * EXTRA FILLER PER NPJ REQUEST ##*** COMMUNICATION AREA - NPS SERVICE FOUNDATION *** ##** LENGTH OF
		 * COMMUNICATION AREA = 925 BYTES. ** ##* MISC INFORMATION *
		 */
		private FixedLengthStringData caMiscSec = new FixedLengthStringData(284).isAPartOf(commArea, 4075);
		private FixedLengthStringData caMiscSecOverlay = new FixedLengthStringData(284).isAPartOf(caMiscSec, 0,
		    REDEFINE);
		/* MENU OPTION ATTRIBUTE BYTE 1 */
		private FixedLengthStringData caMsg = new FixedLengthStringData(79).isAPartOf(caMiscSecOverlay, 2);
		/* MESSAGE LINE 2 */
		private FixedLengthStringData caUserid = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 160);
		/* INDUSTRY CODE */
		private FixedLengthStringData caSvcUnNo = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 227);
		/*
		 * SERVICE ORDER TYPE - OTC, QUICK, ONSITE, HI-TECH, & SRS
		 */
		private FixedLengthStringData caActionCd = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 273);
		private Validator caAdd = new Validator(caActionCd, "A");
		private Validator caInquiry = new Validator(caActionCd, "I");
		private Validator caUpdate = new Validator(caActionCd, "U");
		private Validator caDelete = new Validator(caActionCd, "D");
		private Validator caReinstate = new Validator(caActionCd, "R");
		/* ACTION CODE */
		private FixedLengthStringData caQueryNo = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 274);
		private Validator caNameEmpidSsnEntered = new Validator(caQueryNo, "1");
		private Validator caNameEmpidEntered = new Validator(caQueryNo, "2");
		private Validator caNameSsnEntered = new Validator(caQueryNo, "3");
		private Validator caEmpidSsnEntered = new Validator(caQueryNo, "4");
		private Validator caNameEntered = new Validator(caQueryNo, "5");
		private Validator caEmpidEntered = new Validator(caQueryNo, "6");
		private Validator caSsnEntered = new Validator(caQueryNo, "7");
		private Validator caViewEmployees = new Validator(caQueryNo, "8");
		private Validator caRacfIdEntered = new Validator(caQueryNo, "9");
		/* ##* ERROR MESSAGE * */
		private FixedLengthStringData caErrorSec = new FixedLengthStringData(79).isAPartOf(commArea, 4359);
		private FixedLengthStringData caErrorSecOverlay = new FixedLengthStringData(79).isAPartOf(caErrorSec, 0,
		    REDEFINE);
		private FixedLengthStringData caErrorMsg = new FixedLengthStringData(79).isAPartOf(caErrorSecOverlay, 0);
		private FixedLengthStringData caErrorKey = new FixedLengthStringData(4).isAPartOf(caErrorMsg, 0);
		/* ERROR MESSAGE KEY */
		private FixedLengthStringData caErrorText = new FixedLengthStringData(75).isAPartOf(caErrorMsg, 4);
		/*
		 * HELP KEY FOR VSAM READING & UPDATES ##* NPS SYSTEM SECURITY LEVELS *
		 */
		private FixedLengthStringData caSecuritySec = new FixedLengthStringData(1).isAPartOf(commArea, 4515);
		private FixedLengthStringData caSecuritySecOverlay = new FixedLengthStringData(1).isAPartOf(caSecuritySec, 0,
		    REDEFINE);
		private FixedLengthStringData caSecurityLvl = new FixedLengthStringData(1).isAPartOf(caSecuritySecOverlay, 0);
		private Validator userFromUnit = new Validator(caSecurityLvl, "1", "2", "3");
		private Validator userFromUnit1 = new Validator(caSecurityLvl, "1");
		private Validator userFromUnit2 = new Validator(caSecurityLvl, "2");
		private Validator userFromUnit3 = new Validator(caSecurityLvl, "3");
		private Validator userFromRegion = new Validator(caSecurityLvl, "4", "5");
		private Validator userFromRegion1 = new Validator(caSecurityLvl, "4");
		private Validator userFromRegion2 = new Validator(caSecurityLvl, "5");
		private Validator userFromHq = new Validator(caSecurityLvl, "6");
		private Validator userFromSco = new Validator(caSecurityLvl, "7");
		private Validator security1To7 = new Validator(caSecurityLvl, new ValueRange("1", "7"));
		/* ##* SWITCHES AND FLAGS * */
		private FixedLengthStringData caSwFlagSec = new FixedLengthStringData(10).isAPartOf(commArea, 4547);
		private FixedLengthStringData caSwFlagOverlay = new FixedLengthStringData(10).isAPartOf(caSwFlagSec, 0,
		    REDEFINE);
		/* FLAGS */
		private FixedLengthStringData caWorkAreaPresentFlag = new FixedLengthStringData(1)
		    .isAPartOf(caSwFlagOverlay, 1);
		private Validator caWorkAreaInOtherTbl = new Validator(caWorkAreaPresentFlag, "Y");
		private FixedLengthStringData caErrorFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 2);
		private Validator outstandingError = new Validator(caErrorFlag, "Y");
		private FixedLengthStringData caEndOfDataFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 3);
		private Validator caEndOfData = new Validator(caEndOfDataFlag, "Y");
		private Validator endOfData = new Validator(caEndOfDataFlag, "Y");
		/* END-OF-DATA INDICATOR */
		private FixedLengthStringData caSaveFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 4);
		private Validator caSavedFromLastScreen = new Validator(caSaveFlag, "Y");
		/*
		 * ##* COMMUNICATION AREA FILLER * ##* ## ADDED 500 BYTES TO THE FILLER *
		 */
		private FixedLengthStringData caFillerSec = new FixedLengthStringData(943).isAPartOf(commArea, 4557);
		private FixedLengthStringData caFillerOverlay = new FixedLengthStringData(941).isAPartOf(caFillerSec, 0,
		    REDEFINE);
		private FixedLengthStringData caBrUnNo = new FixedLengthStringData(7).isAPartOf(caFillerOverlay, 12);
		private Validator validItronixUser = new Validator(caBrUnNo, "PD86   ");
		/* ADDED SPDE UNIT INDICATOR FLAG */
		private FixedLengthStringData caSpdeSvcUnFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 19);
		private Validator spdeUnit = new Validator(caSpdeSvcUnFl, "Y", "M");
		private Validator spdeMsgsWtg = new Validator(caSpdeSvcUnFl, "M");
		/* Used for EMP REF capture NPS100 */
		private FixedLengthStringData caThdPtyFlag = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 433);
		private Validator thdPty = new Validator(caThdPtyFlag, "Y", "F");
		private Validator notThdPty = new Validator(caThdPtyFlag, "N");
		/* ORIGINATION CODE */
		private FixedLengthStringData caCamsFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 474);
		private Validator camsParallel = new Validator(caCamsFl, "1");
		private Validator camsPilot = new Validator(caCamsFl, "2");
		private Validator nonCams = new Validator(caCamsFl, " ");
	}

	/*
	 * Class transformed from Data Structure TRC-CONVR-CONVERSATIONAL_INNER
	 */
	private static final class TrcConvrConversationalInner {

		/*
		 * UNUSED SPACE COPYRIGHT (C) 1993, 1995 TRANSCENTURY DATA SYSTEMS, SAN FRANCISCO CA TRANSCENTURY (TM) CALENDAR
		 * ROUTINES IS THE SUBJECT OF A PENDING UNITED STATES PATENT APPLICATION. ALL SOFTWARE FOR THE TRANSCENTURY (TM)
		 * CALENDAR ROUTINES PROGRAM IS PROTECTED BY THE COPYRIGHT LAWS OF THE UNITED STATES CUST-ID: SEA-110054 SEARS,
		 * ROEBUCK & COMPANY UNAUTHORIZED COPYING OF THIS DOCUMENT OR THE PROGRAM CONTAINED HEREIN, IN ORIGINAL OR
		 * MODIFIED FORM, IS A VIOLATION OF FEDERAL AND STATE LAW. TRCCONVR - CONVERSATIONAL AREA
		 */
		private FixedLengthStringData trcConvrConversational = new FixedLengthStringData(1000);
		private FixedLengthStringData trcConvrBusinessParameters = new FixedLengthStringData(89).isAPartOf(
		    trcConvrConversational, 0);
		private FixedLengthStringData trcConvrHolidayTbl = new FixedLengthStringData(2).isAPartOf(
		    trcConvrBusinessParameters, 0).init("01");
		private FixedLengthStringData trcConvrFiscyrStart = new FixedLengthStringData(2).isAPartOf(
		    trcConvrBusinessParameters, 2).init("01");
		private FixedLengthStringData trcConvrFiscmoStart = new FixedLengthStringData(2).isAPartOf(
		    trcConvrBusinessParameters, 4).init("01");
		private FixedLengthStringData trcConvrEndPntsDef = new FixedLengthStringData(1).isAPartOf(
		    trcConvrBusinessParameters, 6).init("T");
		private FixedLengthStringData trcConvrDowString = new FixedLengthStringData(7).isAPartOf(
		    trcConvrBusinessParameters, 7).init("0123456");
		private FixedLengthStringData trcConvrProcDayDef = new FixedLengthStringData(7).isAPartOf(
		    trcConvrBusinessParameters, 14).init("NEEEEEN");
		private FixedLengthStringData trcConvrCenturyBreak = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 21).init("19/20;40");
		private FixedLengthStringData trcConvrFromDateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 29).init("CCYYMMDD");
		private FixedLengthStringData trcConvrToDateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 37).init("CCYYMMDD");
		private FixedLengthStringData trcConvrOut1DateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 45).init("YYMMDD--");
		private FixedLengthStringData trcConvrOut2DateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 53).init("--YYMMDD");
		private FixedLengthStringData trcConvrOut3DateMask = new FixedLengthStringData(8).isAPartOf(
		    trcConvrBusinessParameters, 61).init("-CCYYDDD");
		private FixedLengthStringData filler = new FixedLengthStringData(20).isAPartOf(trcConvrBusinessParameters, 69,
		    FILLER).init(SPACES);
		private FixedLengthStringData trcConvrInputParameters = new FixedLengthStringData(56).isAPartOf(
		    trcConvrConversational, 89);
		private FixedLengthStringData trcConvrFunctionCode = new FixedLengthStringData(4).isAPartOf(
		    trcConvrInputParameters, 0);
		private FixedLengthStringData trcConvrFunctionType = new FixedLengthStringData(1).isAPartOf(
		    trcConvrFunctionCode, 0);
		private FixedLengthStringData trcConvrFunctionNumber = new FixedLengthStringData(3).isAPartOf(
		    trcConvrFunctionCode, 1);
		private FixedLengthStringData filler1 = new FixedLengthStringData(20).isAPartOf(trcConvrInputParameters, 36,
		    FILLER).init(SPACES);
		private FixedLengthStringData trcConvrOutputParameters = new FixedLengthStringData(144).isAPartOf(
		    trcConvrConversational, 145);
		private FixedLengthStringData trcConvrReturnCode = new FixedLengthStringData(83).isAPartOf(
		    trcConvrOutputParameters, 0);
		private ZonedDecimalData trcConvrReturnNum = new ZonedDecimalData(3, 0).isAPartOf(trcConvrReturnCode, 0)
		    .setUnsigned();
		private Validator trcConvrReturnGood = new Validator(trcConvrReturnNum, 0);
		private Validator trcConvrReturnBad = new Validator(trcConvrReturnNum, new ValueRange(001, 999));
		private FixedLengthStringData trcConvrStdoutDateX = new FixedLengthStringData(8).isAPartOf(
		    trcConvrOutputParameters, 83);
		private FixedLengthStringData filler2 = new FixedLengthStringData(20).isAPartOf(trcConvrOutputParameters, 124,
		    FILLER).init(SPACES);
		private FixedLengthStringData filler8 = new FixedLengthStringData(461).isAPartOf(trcConvrConversational, 539,
		    FILLER).init(SPACES);
	}

	/*
	 * Class transformed from Data Structure UPSMUIFL-REC_INNER
	 */
	private static final class UpsmuiflRecInner {

		/* UPSMUIFL-REC */
		private FixedLengthStringData upsmuiflKey = new FixedLengthStringData(10);
		private FixedLengthStringData upsmuiflRecType = new FixedLengthStringData(1).isAPartOf(upsmuiflKey, 7);
		private Validator upsmuiflRemarkRec = new Validator(upsmuiflRecType, "R");
		private Validator upsmuiflMkgZoneRec = new Validator(upsmuiflRecType, "M");
		private Validator upsmuiflUnitTypeRec = new Validator(upsmuiflRecType, "U");
	}

	/*
	 * Class transformed from Data Structure NPS220-WORK-FIELDS_INNER
	 */
	private static final class Nps220WorkFieldsInner {

		/* NPS220-WORK-FIELDS */
		private FixedLengthStringData wsXctlPgm = new FixedLengthStringData(8);
		private FixedLengthStringData wsXctlSysId = new FixedLengthStringData(3).isAPartOf(wsXctlPgm, 0);
		private FixedLengthStringData wsMessageKey = new FixedLengthStringData(4).init(SPACES);

		private FixedLengthStringData wsNps220VsamMsg = new FixedLengthStringData(96);
		private FixedLengthStringData csmtMsgPgrmid = new FixedLengthStringData(20).isAPartOf(wsNps220VsamMsg, 0).init(
		    "NPS220 E 0500 >>> ");
		private FixedLengthStringData csmtVsamName = new FixedLengthStringData(15).isAPartOf(wsNps220VsamMsg, 20);
		private FixedLengthStringData csmtVsamInfo = new FixedLengthStringData(28).isAPartOf(wsNps220VsamMsg, 35);
		private FixedLengthStringData eibrcodeText = new FixedLengthStringData(11).isAPartOf(wsNps220VsamMsg, 63).init(
		    "EIBRCODE = ");
		private FixedLengthStringData csmtEibrcode = new FixedLengthStringData(7).isAPartOf(wsNps220VsamMsg, 74);
		private FixedLengthStringData eibfnText = new FixedLengthStringData(8).isAPartOf(wsNps220VsamMsg, 81).init(
		    "EIBFN = ");
		private FixedLengthStringData csmtEibfn = new FixedLengthStringData(7).isAPartOf(wsNps220VsamMsg, 89);

		private FixedLengthStringData wsCurrSysid = new FixedLengthStringData(4).init(SPACES);
		private Validator wsHomelife = new Validator(wsCurrSysid, "021V", "0204", "CI56");
		private ZonedDecimalData wsSubR = new ZonedDecimalData(2, 0).setUnsigned();
		private ZonedDecimalData wsCentralNum = new ZonedDecimalData(7, 0).setUnsigned();
		private FixedLengthStringData wsCentralNo = new FixedLengthStringData(7);
		private ZonedDecimalData wsRegionNum = new ZonedDecimalData(7, 0).setUnsigned();
		private FixedLengthStringData wsRegionNo = new FixedLengthStringData(7);
		private ZonedDecimalData wsPrtMku = new ZonedDecimalData(2, 0).setUnsigned();
		/* ##TSA-13-S */
		private ZonedDecimalData wsInhomeMku = new ZonedDecimalData(2, 0).setUnsigned();
		private ZonedDecimalData wsShopMku = new ZonedDecimalData(2, 0).setUnsigned();
		/*
		 * ##TSA-13-E ##TSA-14-S
		 */
		private FixedLengthStringData wsUnNmChangedFl = new FixedLengthStringData(1);
		private FixedLengthStringData wsRgNoChangedFl = new FixedLengthStringData(1);
		/* ##PD-24S */
		private FixedLengthStringData halConvFl = new FixedLengthStringData(1);
		/* ##PD-24E */
		private FixedLengthStringData wsTimestamp = new FixedLengthStringData(26);
		/* ##TSA-14-E */
		private ZonedDecimalData wsHostNum = new ZonedDecimalData(7, 0).setUnsigned();
		private FixedLengthStringData wsHostNo = new FixedLengthStringData(7).isAPartOf(wsHostNum, 0, REDEFINE);
		private ZonedDecimalData wsPosUnNum = new ZonedDecimalData(7, 0).setUnsigned();
		private FixedLengthStringData wsPosUnNo = new FixedLengthStringData(7).isAPartOf(wsPosUnNum, 0, REDEFINE);
		/* ##KG-23S */
		private ZonedDecimalData wsRfsAcctNum = new ZonedDecimalData(7, 0).setUnsigned();
		private FixedLengthStringData wsRfsAcctNo = new FixedLengthStringData(7).isAPartOf(wsRfsAcctNum, 0, REDEFINE);
		/*
		 * ##KG-23E ##RK-18S ##PB-19S 05 WS-JV-UN-NO REDEFINES WS-JV-UN-NUM ##PB-19E ##RK-18E
		 */
		private FixedLengthStringData wsState = new FixedLengthStringData(2);
		private ZonedDecimalData wsUnitTypeN = new ZonedDecimalData(2, 0).setUnsigned();
		private ZonedDecimalData wsZip5 = new ZonedDecimalData(5, 0).setUnsigned();
		private ZonedDecimalData wsZip4 = new ZonedDecimalData(4, 0).setUnsigned();
		private FixedLengthStringData wsUnitConverted = new FixedLengthStringData(1);

		private FixedLengthStringData wsDataChangedFl = new FixedLengthStringData(1).init("N");
		private Validator dataChanged = new Validator(wsDataChangedFl, "Y");

		private FixedLengthStringData wsSvcFl = new FixedLengthStringData(1);
		private Validator aLlow = new Validator(wsSvcFl, "A");
		private Validator both = new Validator(wsSvcFl, "B");
		private Validator carry = new Validator(wsSvcFl, "C");
		private Validator nOne = new Validator(wsSvcFl, "N");
		private Validator onsite = new Validator(wsSvcFl, "O");
		private Validator shop = new Validator(wsSvcFl, "S");

		private FixedLengthStringData wsUnOpnDt = new FixedLengthStringData(10);
		private ZonedDecimalData wsUnOpnDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsUnOpnDt, 0).setUnsigned();
		private ZonedDecimalData wsUnOpnDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsUnOpnDt, 2).setUnsigned();
		private FixedLengthStringData filler1 = new FixedLengthStringData(1).isAPartOf(wsUnOpnDt, 4, FILLER).init("-");
		private ZonedDecimalData wsUnOpnDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsUnOpnDt, 5).setUnsigned();
		private FixedLengthStringData filler2 = new FixedLengthStringData(1).isAPartOf(wsUnOpnDt, 7, FILLER).init("-");
		private ZonedDecimalData wsUnOpnDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsUnOpnDt, 8).setUnsigned();

		private FixedLengthStringData wsSvcUnCloDt = new FixedLengthStringData(10);
		private ZonedDecimalData wsSvcUnCloDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsSvcUnCloDt, 0).setUnsigned();
		private ZonedDecimalData wsSvcUnCloDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsSvcUnCloDt, 2).setUnsigned();
		private FixedLengthStringData filler3 = new FixedLengthStringData(1).isAPartOf(wsSvcUnCloDt, 4, FILLER).init(
		    "-");
		private ZonedDecimalData wsSvcUnCloDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsSvcUnCloDt, 5).setUnsigned();
		private FixedLengthStringData filler4 = new FixedLengthStringData(1).isAPartOf(wsSvcUnCloDt, 7, FILLER).init(
		    "-");
		private ZonedDecimalData wsSvcUnCloDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsSvcUnCloDt, 8).setUnsigned();

		private FixedLengthStringData wsPosStaDt = new FixedLengthStringData(10);
		private ZonedDecimalData wsPosStaDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsPosStaDt, 0).setUnsigned();
		private ZonedDecimalData wsPosStaDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsPosStaDt, 2).setUnsigned();
		private FixedLengthStringData filler5 = new FixedLengthStringData(1).isAPartOf(wsPosStaDt, 4, FILLER).init("-");
		private ZonedDecimalData wsPosStaDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsPosStaDt, 5).setUnsigned();
		private FixedLengthStringData filler6 = new FixedLengthStringData(1).isAPartOf(wsPosStaDt, 7, FILLER).init("-");
		private ZonedDecimalData wsPosStaDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsPosStaDt, 8).setUnsigned();

		private FixedLengthStringData wsCnvSpdeDt = new FixedLengthStringData(10);
		private ZonedDecimalData wsCnvSpdeDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsCnvSpdeDt, 0).setUnsigned();
		private ZonedDecimalData wsCnvSpdeDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsCnvSpdeDt, 2).setUnsigned();
		private FixedLengthStringData filler7 = new FixedLengthStringData(1).isAPartOf(wsCnvSpdeDt, 4, FILLER)
		    .init("-");
		private ZonedDecimalData wsCnvSpdeDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsCnvSpdeDt, 5).setUnsigned();
		private FixedLengthStringData filler8 = new FixedLengthStringData(1).isAPartOf(wsCnvSpdeDt, 7, FILLER)
		    .init("-");
		private ZonedDecimalData wsCnvSpdeDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsCnvSpdeDt, 8).setUnsigned();

		private FixedLengthStringData wsCnvNpnDt = new FixedLengthStringData(10);
		private ZonedDecimalData wsCnvNpnDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsCnvNpnDt, 0).setUnsigned();
		private ZonedDecimalData wsCnvNpnDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsCnvNpnDt, 2).setUnsigned();
		private FixedLengthStringData filler9 = new FixedLengthStringData(1).isAPartOf(wsCnvNpnDt, 4, FILLER).init("-");
		private ZonedDecimalData wsCnvNpnDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsCnvNpnDt, 5).setUnsigned();
		private FixedLengthStringData filler10 = new FixedLengthStringData(1).isAPartOf(wsCnvNpnDt, 7, FILLER)
		    .init("-");
		private ZonedDecimalData wsCnvNpnDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsCnvNpnDt, 8).setUnsigned();
		private FixedLengthStringData wsCpuAidRte = new FixedLengthStringData(1);

		private FixedLengthStringData wsCnvCarsDt = new FixedLengthStringData(10);
		private ZonedDecimalData wsCnvCarsDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsCnvCarsDt, 0).setUnsigned();
		private ZonedDecimalData wsCnvCarsDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsCnvCarsDt, 2).setUnsigned();
		private FixedLengthStringData filler11 = new FixedLengthStringData(1).isAPartOf(wsCnvCarsDt, 4, FILLER).init(
		    "-");
		private ZonedDecimalData wsCnvCarsDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsCnvCarsDt, 5).setUnsigned();
		private FixedLengthStringData filler12 = new FixedLengthStringData(1).isAPartOf(wsCnvCarsDt, 7, FILLER).init(
		    "-");
		private ZonedDecimalData wsCnvCarsDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsCnvCarsDt, 8).setUnsigned();

		private FixedLengthStringData wsTempDate = new FixedLengthStringData(8);
		private ZonedDecimalData wsTempDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 0).setUnsigned();
		private ZonedDecimalData wsTempDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 2).setUnsigned();
		private ZonedDecimalData wsTempDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 4).setUnsigned();
		private ZonedDecimalData wsTempDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsTempDate, 6).setUnsigned();

		private FixedLengthStringData wsTodaysDate = new FixedLengthStringData(10);
		private ZonedDecimalData wsTodaysDtCc = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 0).setUnsigned();
		private ZonedDecimalData wsTodaysDtYy = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 2).setUnsigned();
		private FixedLengthStringData filler13 = new FixedLengthStringData(1).isAPartOf(wsTodaysDate, 4, FILLER).init(
		    "-");
		private ZonedDecimalData wsTodaysDtMm = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 5).setUnsigned();
		private FixedLengthStringData filler14 = new FixedLengthStringData(1).isAPartOf(wsTodaysDate, 7, FILLER).init(
		    "-");
		private ZonedDecimalData wsTodaysDtDd = new ZonedDecimalData(2, 0).isAPartOf(wsTodaysDate, 8).setUnsigned();
		/* ##JA-16S */
		private FixedLengthStringData wsAcsDckUnNoX = new FixedLengthStringData(7);
		private ZonedDecimalData wsAcsDckUnNo = new ZonedDecimalData(7, 0).isAPartOf(wsAcsDckUnNoX, 0, REDEFINE)
		    .setUnsigned();
		/*
		 * ##JA-16E ##CT-20S
		 */
		private ZonedDecimalData wsRteUnNum = new ZonedDecimalData(7, 0).setUnsigned();
		private FixedLengthStringData wsRteUnNo = new FixedLengthStringData(7).isAPartOf(wsRteUnNum, 0, REDEFINE);
		private FixedLengthStringData wsDummy = new FixedLengthStringData(1);
		private FixedLengthStringData wsInqCmyCd = new FixedLengthStringData(1);
		private FixedLengthStringData wsUFoundFlag = new FixedLengthStringData(1);
		private FixedLengthStringData wsValidInqCmyCdFl = new FixedLengthStringData(1);
		private FixedLengthStringData wsNotfndFl = new FixedLengthStringData(1);
		private FixedLengthStringData wsChar = new FixedLengthStringData(1);
		private ZonedDecimalData wsSub = new ZonedDecimalData(2, 0).setUnsigned();
		private ZonedDecimalData wsFnlSub = new ZonedDecimalData(2, 0).setUnsigned();
		private ZonedDecimalData wsLastCharSub = new ZonedDecimalData(2, 0).setUnsigned();
		private FixedLengthStringData wsComma = new FixedLengthStringData(1).init(",");

		private FixedLengthStringData wsMessageTable = new FixedLengthStringData(8);
		private FixedLengthStringData[] wsFinalMessageList = FLSArrayPartOfStructure(8, 1, wsMessageTable, 0);
		private FixedLengthStringData[] wsFnlCmyLst = FLSDArrayPartOfArrayStructure(1, wsFinalMessageList, 0);

		private FixedLengthStringData wsMessageList = new FixedLengthStringData(16);
		private FixedLengthStringData[] wsMsgCmyLst = FLSArrayPartOfStructure(16, 1, wsMessageList, 0);

		private FixedLengthStringData wsMessageEdit = new FixedLengthStringData(16);
		private FixedLengthStringData[] wsEditCmyLst = FLSArrayPartOfStructure(16, 1, wsMessageEdit, 0);
	}

	/*
	 * Class transformed from Data Structure WS-UPSMUIFL-REC_INNER
	 */
	private static final class WsUpsmuiflRecInner {

		/* ##CT-20E */
		private FixedLengthStringData wsUpsmuiflRec = new FixedLengthStringData(100);
		private FixedLengthStringData wsUpsmuiflKey = new FixedLengthStringData(10).isAPartOf(wsUpsmuiflRec, 0);
		private FixedLengthStringData wsUpsmuiflSvcUnNo = new FixedLengthStringData(7).isAPartOf(wsUpsmuiflKey, 0);
		private FixedLengthStringData wsUpsmuiflRecType = new FixedLengthStringData(1).isAPartOf(wsUpsmuiflKey, 7);
		private Validator wsUpsmuiflRemarkRec = new Validator(wsUpsmuiflRecType, "R");
		private Validator wsUpsmuiflMkgZoneRec = new Validator(wsUpsmuiflRecType, "M");
		private Validator wsUpsmuiflUnitTypeRec = new Validator(wsUpsmuiflRecType, "U");
		private ZonedDecimalData wsUpsmuiflSeqNo = new ZonedDecimalData(2, 0).isAPartOf(wsUpsmuiflKey, 8).setUnsigned();
		private FixedLengthStringData wsUpsmuiflFields = new FixedLengthStringData(90).isAPartOf(wsUpsmuiflRec, 10);
		private FixedLengthStringData wsUpsmuiflUnitLayout = new FixedLengthStringData(90).isAPartOf(wsUpsmuiflFields,
		    0, REDEFINE);
		private FixedLengthStringData wsUpsmuiflUnitType = new FixedLengthStringData(3).isAPartOf(wsUpsmuiflUnitLayout,
		    0);
		private FixedLengthStringData wsUpsmuiflUnitDesc = new FixedLengthStringData(60).isAPartOf(
		    wsUpsmuiflUnitLayout, 3);
	}

	/*
	 * Class transformed from Data Structure PA-FIELDS_INNER
	 */
	private static final class PaFieldsInner {

		private FixedLengthStringData paFields = new FixedLengthStringData(328);
		private FixedLengthStringData unitFl = new FixedLengthStringData(1).isAPartOf(paFields, 0);
		private Validator newUnit = new Validator(unitFl, "N");
		private Validator oldUnit = new Validator(unitFl, "O");
		private FixedLengthStringData paSuNo = new FixedLengthStringData(7).isAPartOf(paFields, 1);
		private FixedLengthStringData paSuName = new FixedLengthStringData(27).isAPartOf(paFields, 8);
		private FixedLengthStringData paAddrLine1 = new FixedLengthStringData(30).isAPartOf(paFields, 35);
		private FixedLengthStringData paAddrLine2 = new FixedLengthStringData(30).isAPartOf(paFields, 65);
		private FixedLengthStringData paCity = new FixedLengthStringData(20).isAPartOf(paFields, 95);
		private FixedLengthStringData paState = new FixedLengthStringData(2).isAPartOf(paFields, 115);
		private FixedLengthStringData paZip5 = new FixedLengthStringData(5).isAPartOf(paFields, 117);
		private FixedLengthStringData paZip4 = new FixedLengthStringData(4).isAPartOf(paFields, 122);
		private FixedLengthStringData paUnitType = new FixedLengthStringData(3).isAPartOf(paFields, 126);
		private FixedLengthStringData paUnitDesc = new FixedLengthStringData(60).isAPartOf(paFields, 129);
		private FixedLengthStringData paRegionNo = new FixedLengthStringData(7).isAPartOf(paFields, 189);
		private FixedLengthStringData paCentralNo = new FixedLengthStringData(7).isAPartOf(paFields, 196);
		private FixedLengthStringData paHostNo = new FixedLengthStringData(7).isAPartOf(paFields, 203);
		private FixedLengthStringData paSvcPvdFl = new FixedLengthStringData(1).isAPartOf(paFields, 210);
		private FixedLengthStringData paMktAtvFl = new FixedLengthStringData(1).isAPartOf(paFields, 211);
		private FixedLengthStringData paUnitConverted = new FixedLengthStringData(1).isAPartOf(paFields, 212);
		private FixedLengthStringData paPrtInvCryFl = new FixedLengthStringData(1).isAPartOf(paFields, 213);
		/* ##JA-16S */
		private FixedLengthStringData paCrtDrcOrdFl = new FixedLengthStringData(1).isAPartOf(paFields, 214);
		/* ##JA-16E */
		private FixedLengthStringData paUnOpnDt = new FixedLengthStringData(8).isAPartOf(paFields, 215);
		private FixedLengthStringData paUnOpnDtMm = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 0);
		private FixedLengthStringData paUnOpnDtDd = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 2);
		private FixedLengthStringData paUnOpnDtCc = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 4);
		private FixedLengthStringData paUnOpnDtYy = new FixedLengthStringData(2).isAPartOf(paUnOpnDt, 6);
		private FixedLengthStringData paSvcUnCloDt = new FixedLengthStringData(8).isAPartOf(paFields, 223);
		private FixedLengthStringData paSvcUnCloDtMm = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 0);
		private FixedLengthStringData paSvcUnCloDtDd = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 2);
		private FixedLengthStringData paSvcUnCloDtCc = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 4);
		private FixedLengthStringData paSvcUnCloDtYy = new FixedLengthStringData(2).isAPartOf(paSvcUnCloDt, 6);
		private FixedLengthStringData paPosStaDt = new FixedLengthStringData(8).isAPartOf(paFields, 231);
		private FixedLengthStringData paPosStaDtMm = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 0);
		private FixedLengthStringData paPosStaDtDd = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 2);
		private FixedLengthStringData paPosStaDtCc = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 4);
		private FixedLengthStringData paPosStaDtYy = new FixedLengthStringData(2).isAPartOf(paPosStaDt, 6);
		private FixedLengthStringData paPosUnNo = new FixedLengthStringData(7).isAPartOf(paFields, 239);
		private FixedLengthStringData paRfsAcctNo = new FixedLengthStringData(7).isAPartOf(paFields, 246);
		/* KG-23 */
		private FixedLengthStringData paCnvSpdeDt = new FixedLengthStringData(8).isAPartOf(paFields, 253);
		private FixedLengthStringData paCnvSpdeDtMm = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 0);
		private FixedLengthStringData paCnvSpdeDtDd = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 2);
		private FixedLengthStringData paCnvSpdeDtCc = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 4);
		private FixedLengthStringData paCnvSpdeDtYy = new FixedLengthStringData(2).isAPartOf(paCnvSpdeDt, 6);
		private FixedLengthStringData paCnvNpnDt = new FixedLengthStringData(8).isAPartOf(paFields, 261);
		private FixedLengthStringData paCnvNpnDtMm = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 0);
		private FixedLengthStringData paCnvNpnDtDd = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 2);
		private FixedLengthStringData paCnvNpnDtCc = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 4);
		private FixedLengthStringData paCnvNpnDtYy = new FixedLengthStringData(2).isAPartOf(paCnvNpnDt, 6);
		private FixedLengthStringData paCnvCarsDt = new FixedLengthStringData(8).isAPartOf(paFields, 269);
		private FixedLengthStringData paCnvCarsDtMm = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 0);
		private FixedLengthStringData paCnvCarsDtDd = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 2);
		private FixedLengthStringData paCnvCarsDtCc = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 4);
		private FixedLengthStringData paCnvCarsDtYy = new FixedLengthStringData(2).isAPartOf(paCnvCarsDt, 6);
		private FixedLengthStringData paStateRegNo = new FixedLengthStringData(12).isAPartOf(paFields, 277);
		private FixedLengthStringData paFgnStrPrtMku = new FixedLengthStringData(2).isAPartOf(paFields, 289);
		/* ##TSA-13-S */
		private FixedLengthStringData paInhomePrtMku = new FixedLengthStringData(2).isAPartOf(paFields, 291);
		private FixedLengthStringData paShopPrtMku = new FixedLengthStringData(2).isAPartOf(paFields, 293);
		/* ##TSA-13-E */
		private FixedLengthStringData paShipDest = new FixedLengthStringData(1).isAPartOf(paFields, 295);
		private FixedLengthStringData paInqCmyCd = new FixedLengthStringData(1).isAPartOf(paFields, 296);
		private FixedLengthStringData paRteUnNo = new FixedLengthStringData(7).isAPartOf(paFields, 297);
		private FixedLengthStringData paMsgCmyLst = new FixedLengthStringData(16).isAPartOf(paFields, 304);
		/*
		 * ##jah-15 ##JA-16S
		 */
		private FixedLengthStringData paAcsDckUnNo = new FixedLengthStringData(7).isAPartOf(paFields, 320);
		/* ##JA-16E */
		private FixedLengthStringData paCpuAidRte = new FixedLengthStringData(1).isAPartOf(paFields, 327);
	}

	/*
	 * Class transformed from Data Structure HA-CSMT-MSG_INNER
	 */
	private static final class HaCsmtMsgInner {

		private FixedLengthStringData haCsmtMsg = new FixedLengthStringData(99);
		private FixedLengthStringData haMsgPgm = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(haCsmtMsg, 6, FILLER)
		    .init(SPACES);
		private FixedLengthStringData filler1 = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 7, FILLER).init(
		    "E 0500");
		private FixedLengthStringData filler2 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 13, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler3 = new FixedLengthStringData(19).isAPartOf(haCsmtMsg, 15, FILLER).init(
		    "** PROGRAM ABEND **");
		private FixedLengthStringData filler4 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 34, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler5 = new FixedLengthStringData(13).isAPartOf(haCsmtMsg, 36, FILLER).init(
		    "ABEND CODE = ");
		private FixedLengthStringData haMsgAbendCode = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 49);
		private FixedLengthStringData filler6 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 53, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler7 = new FixedLengthStringData(7).isAPartOf(haCsmtMsg, 55, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData haMsgTermid = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 62);
		private FixedLengthStringData filler8 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 66, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler9 = new FixedLengthStringData(5).isAPartOf(haCsmtMsg, 68, FILLER).init(
		    "TIME=");
		private FixedLengthStringData haMsgTime = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 73);
		private FixedLengthStringData filler10 = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 81, FILLER).init(
		    " USERID=");
		private FixedLengthStringData haMsgUserid = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 89);
		private FixedLengthStringData filler11 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 97, FILLER).init(
		    SPACES);
	}

	/*
	 * Class transformed from Data Structure CL-CSMT-MSG1_INNER
	 */
	private static final class ClCsmtMsg1Inner {

		private FixedLengthStringData clCsmtMsg1 = new FixedLengthStringData(129);
		private FixedLengthStringData clPgmId1 = new FixedLengthStringData(6).isAPartOf(clCsmtMsg1, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 6, FILLER)
		    .init(" E ");
		private FixedLengthStringData filler1 = new FixedLengthStringData(5).isAPartOf(clCsmtMsg1, 9, FILLER).init(
		    "0500 ");
		private FixedLengthStringData clErrortype = new FixedLengthStringData(18).isAPartOf(clCsmtMsg1, 14);
		private FixedLengthStringData filler2 = new FixedLengthStringData(9).isAPartOf(clCsmtMsg1, 32, FILLER).init(
		    "EIBRCODE=");
		private FixedLengthStringData clEibrcode = new FixedLengthStringData(6).isAPartOf(clCsmtMsg1, 41);
		private FixedLengthStringData filler3 = new FixedLengthStringData(1).isAPartOf(clCsmtMsg1, 47, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler4 = new FixedLengthStringData(7).isAPartOf(clCsmtMsg1, 48, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData clTermid = new FixedLengthStringData(4).isAPartOf(clCsmtMsg1, 55);
		private FixedLengthStringData filler5 = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 59, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler6 = new FixedLengthStringData(5).isAPartOf(clCsmtMsg1, 62, FILLER).init(
		    "TIME=");
		private FixedLengthStringData clTime = new FixedLengthStringData(8).isAPartOf(clCsmtMsg1, 67);
		private FixedLengthStringData filler7 = new FixedLengthStringData(10).isAPartOf(clCsmtMsg1, 75, FILLER).init(
		    " USERID=  ");
		private FixedLengthStringData clUserid = new FixedLengthStringData(8).isAPartOf(clCsmtMsg1, 85);
		private FixedLengthStringData filler8 = new FixedLengthStringData(3).isAPartOf(clCsmtMsg1, 93, FILLER).init(
		    SPACES);
		private FixedLengthStringData clCallLiteral = new FixedLengthStringData(17).isAPartOf(clCsmtMsg1, 96).init(
		    SPACES);
		private ZonedDecimalData clCallNumber = new ZonedDecimalData(4, 0).isAPartOf(clCsmtMsg1, 113)
		    .setPattern("ZZZZ").setBlankWhenZero();
		private FixedLengthStringData filler9 = new FixedLengthStringData(12).isAPartOf(clCsmtMsg1, 117, FILLER).init(
		    SPACES);
	}

	/*
	 * Class transformed from Data Structure NPS220-FILLER-RECORD_INNER
	 */
	private static final class Nps220FillerRecordInner {

		/*
		 * APS-GENERATED SCREEN RECORD: NPS220 *** LENGTH: 654 ***
		 */
		private FixedLengthStringData nps220FillerRecord = new FixedLengthStringData(654).init(LOVALUES);

		private FixedLengthStringData nps220Record = new FixedLengthStringData(654).isAPartOf(nps220FillerRecord, 0,
		    REDEFINE);
		private FixedLengthStringData scaNps220PgmLevel = new FixedLengthStringData(3).isAPartOf(nps220Record, 12);
		private BinaryData nps220PgmLevelLength = new BinaryData(4, 0).isAPartOf(scaNps220PgmLevel, 0);
		private FixedLengthStringData nps220PgmLevelAttr = new FixedLengthStringData(1).isAPartOf(scaNps220PgmLevel, 2);
		private FixedLengthStringData nps220PgmLevel = new FixedLengthStringData(2).isAPartOf(nps220Record, 15);
		private FixedLengthStringData scaNps220TdScreenDate = new FixedLengthStringData(3).isAPartOf(nps220Record, 17);
		private BinaryData nps220TdScreenDateLength = new BinaryData(4, 0).isAPartOf(scaNps220TdScreenDate, 0);
		private FixedLengthStringData nps220TdScreenDateAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220TdScreenDate, 2);
		private FixedLengthStringData nps220TdScreenDate = new FixedLengthStringData(8).isAPartOf(nps220Record, 20);
		private FixedLengthStringData scaNps220SuNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 28);
		private BinaryData nps220SuNoLength = new BinaryData(4, 0).isAPartOf(scaNps220SuNo, 0);
		private FixedLengthStringData nps220SuNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps220SuNo, 2);
		private FixedLengthStringData nps220SuNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 31);
		private FixedLengthStringData scaNps220SuName = new FixedLengthStringData(3).isAPartOf(nps220Record, 38);
		private BinaryData nps220SuNameLength = new BinaryData(4, 0).isAPartOf(scaNps220SuName, 0);
		private FixedLengthStringData nps220SuNameAttr = new FixedLengthStringData(1).isAPartOf(scaNps220SuName, 2);
		private FixedLengthStringData nps220SuName = new FixedLengthStringData(27).isAPartOf(nps220Record, 41);
		private FixedLengthStringData scaNps220AddrLine1 = new FixedLengthStringData(3).isAPartOf(nps220Record, 68);
		private BinaryData nps220AddrLine1Length = new BinaryData(4, 0).isAPartOf(scaNps220AddrLine1, 0);
		private FixedLengthStringData nps220AddrLine1Attr = new FixedLengthStringData(1).isAPartOf(scaNps220AddrLine1,
		    2);
		private FixedLengthStringData nps220AddrLine1 = new FixedLengthStringData(30).isAPartOf(nps220Record, 71);
		private FixedLengthStringData scaNps220AddrLine2 = new FixedLengthStringData(3).isAPartOf(nps220Record, 101);
		private BinaryData nps220AddrLine2Length = new BinaryData(4, 0).isAPartOf(scaNps220AddrLine2, 0);
		private FixedLengthStringData nps220AddrLine2Attr = new FixedLengthStringData(1).isAPartOf(scaNps220AddrLine2,
		    2);
		private FixedLengthStringData nps220AddrLine2 = new FixedLengthStringData(30).isAPartOf(nps220Record, 104);
		private FixedLengthStringData scaNps220City = new FixedLengthStringData(3).isAPartOf(nps220Record, 134);
		private BinaryData nps220CityLength = new BinaryData(4, 0).isAPartOf(scaNps220City, 0);
		private FixedLengthStringData nps220CityAttr = new FixedLengthStringData(1).isAPartOf(scaNps220City, 2);
		private FixedLengthStringData nps220City = new FixedLengthStringData(20).isAPartOf(nps220Record, 137);
		private FixedLengthStringData scaNps220State = new FixedLengthStringData(3).isAPartOf(nps220Record, 157);
		private BinaryData nps220StateLength = new BinaryData(4, 0).isAPartOf(scaNps220State, 0);
		private FixedLengthStringData nps220StateAttr = new FixedLengthStringData(1).isAPartOf(scaNps220State, 2);
		private FixedLengthStringData nps220State = new FixedLengthStringData(2).isAPartOf(nps220Record, 160);
		private FixedLengthStringData scaNps220Zip5 = new FixedLengthStringData(3).isAPartOf(nps220Record, 162);
		private BinaryData nps220Zip5Length = new BinaryData(4, 0).isAPartOf(scaNps220Zip5, 0);
		private FixedLengthStringData nps220Zip5Attr = new FixedLengthStringData(1).isAPartOf(scaNps220Zip5, 2);
		private FixedLengthStringData nps220Zip5 = new FixedLengthStringData(5).isAPartOf(nps220Record, 165);
		private FixedLengthStringData scaNps220Zip4 = new FixedLengthStringData(3).isAPartOf(nps220Record, 170);
		private BinaryData nps220Zip4Length = new BinaryData(4, 0).isAPartOf(scaNps220Zip4, 0);
		private FixedLengthStringData nps220Zip4Attr = new FixedLengthStringData(1).isAPartOf(scaNps220Zip4, 2);
		private FixedLengthStringData nps220Zip4 = new FixedLengthStringData(4).isAPartOf(nps220Record, 173);
		private FixedLengthStringData scaNps220UnitType = new FixedLengthStringData(3).isAPartOf(nps220Record, 177);
		private BinaryData nps220UnitTypeLength = new BinaryData(4, 0).isAPartOf(scaNps220UnitType, 0);
		private FixedLengthStringData nps220UnitTypeAttr = new FixedLengthStringData(1).isAPartOf(scaNps220UnitType, 2);
		private FixedLengthStringData nps220UnitType = new FixedLengthStringData(2).isAPartOf(nps220Record, 180);
		private FixedLengthStringData scaNps220UnitDesc = new FixedLengthStringData(3).isAPartOf(nps220Record, 182);
		private BinaryData nps220UnitDescLength = new BinaryData(4, 0).isAPartOf(scaNps220UnitDesc, 0);
		private FixedLengthStringData nps220UnitDescAttr = new FixedLengthStringData(1).isAPartOf(scaNps220UnitDesc, 2);
		private FixedLengthStringData nps220UnitDesc = new FixedLengthStringData(60).isAPartOf(nps220Record, 185);
		private FixedLengthStringData scaNps220InqCmyCd = new FixedLengthStringData(3).isAPartOf(nps220Record, 245);
		private BinaryData nps220InqCmyCdLength = new BinaryData(4, 0).isAPartOf(scaNps220InqCmyCd, 0);
		private FixedLengthStringData nps220InqCmyCdAttr = new FixedLengthStringData(1).isAPartOf(scaNps220InqCmyCd, 2);
		private FixedLengthStringData nps220InqCmyCd = new FixedLengthStringData(1).isAPartOf(nps220Record, 248);
		private FixedLengthStringData scaNps220MsgCmyLst = new FixedLengthStringData(3).isAPartOf(nps220Record, 249);
		private BinaryData nps220MsgCmyLstLength = new BinaryData(4, 0).isAPartOf(scaNps220MsgCmyLst, 0);
		private FixedLengthStringData nps220MsgCmyLstAttr = new FixedLengthStringData(1).isAPartOf(scaNps220MsgCmyLst,
		    2);
		private FixedLengthStringData nps220MsgCmyLst = new FixedLengthStringData(16).isAPartOf(nps220Record, 252);
		private FixedLengthStringData scaNps220RegionNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 268);
		private BinaryData nps220RegionNoLength = new BinaryData(4, 0).isAPartOf(scaNps220RegionNo, 0);
		private FixedLengthStringData nps220RegionNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps220RegionNo, 2);
		private FixedLengthStringData nps220RegionNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 271);
		private FixedLengthStringData scaNps220SvcPvdFl = new FixedLengthStringData(3).isAPartOf(nps220Record, 278);
		private BinaryData nps220SvcPvdFlLength = new BinaryData(4, 0).isAPartOf(scaNps220SvcPvdFl, 0);
		private FixedLengthStringData nps220SvcPvdFlAttr = new FixedLengthStringData(1).isAPartOf(scaNps220SvcPvdFl, 2);
		private FixedLengthStringData nps220SvcPvdFl = new FixedLengthStringData(1).isAPartOf(nps220Record, 281);
		private FixedLengthStringData scaNps220CentralNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 282);
		private BinaryData nps220CentralNoLength = new BinaryData(4, 0).isAPartOf(scaNps220CentralNo, 0);
		private FixedLengthStringData nps220CentralNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps220CentralNo,
		    2);
		private FixedLengthStringData nps220CentralNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 285);
		private FixedLengthStringData scaNps220MktAtvFl = new FixedLengthStringData(3).isAPartOf(nps220Record, 292);
		private BinaryData nps220MktAtvFlLength = new BinaryData(4, 0).isAPartOf(scaNps220MktAtvFl, 0);
		private FixedLengthStringData nps220MktAtvFlAttr = new FixedLengthStringData(1).isAPartOf(scaNps220MktAtvFl, 2);
		private FixedLengthStringData nps220MktAtvFl = new FixedLengthStringData(1).isAPartOf(nps220Record, 295);
		private FixedLengthStringData scaNps220HostNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 296);
		private BinaryData nps220HostNoLength = new BinaryData(4, 0).isAPartOf(scaNps220HostNo, 0);
		private FixedLengthStringData nps220HostNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps220HostNo, 2);
		private FixedLengthStringData nps220HostNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 299);
		private FixedLengthStringData scaNps220UnitConverted = new FixedLengthStringData(3)
		    .isAPartOf(nps220Record, 306);
		private BinaryData nps220UnitConvertedLength = new BinaryData(4, 0).isAPartOf(scaNps220UnitConverted, 0);
		private FixedLengthStringData nps220UnitConvertedAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220UnitConverted, 2);
		private FixedLengthStringData nps220UnitConverted = new FixedLengthStringData(1).isAPartOf(nps220Record, 309);
		private FixedLengthStringData scaNps220PosUnNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 310);
		private BinaryData nps220PosUnNoLength = new BinaryData(4, 0).isAPartOf(scaNps220PosUnNo, 0);
		private FixedLengthStringData nps220PosUnNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps220PosUnNo, 2);
		private FixedLengthStringData nps220PosUnNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 313);
		private FixedLengthStringData scaNps220PrtInvCryFl = new FixedLengthStringData(3).isAPartOf(nps220Record, 320);
		private BinaryData nps220PrtInvCryFlLength = new BinaryData(4, 0).isAPartOf(scaNps220PrtInvCryFl, 0);
		private FixedLengthStringData nps220PrtInvCryFlAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220PrtInvCryFl, 2);
		private FixedLengthStringData nps220PrtInvCryFl = new FixedLengthStringData(1).isAPartOf(nps220Record, 323);
		private FixedLengthStringData scaNps220RfsAcctNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 324);
		private BinaryData nps220RfsAcctNoLength = new BinaryData(4, 0).isAPartOf(scaNps220RfsAcctNo, 0);
		private FixedLengthStringData nps220RfsAcctNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps220RfsAcctNo,
		    2);
		private FixedLengthStringData nps220RfsAcctNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 327);
		private FixedLengthStringData scaNps220CrtDrcOrdFl = new FixedLengthStringData(3).isAPartOf(nps220Record, 334);
		private BinaryData nps220CrtDrcOrdFlLength = new BinaryData(4, 0).isAPartOf(scaNps220CrtDrcOrdFl, 0);
		private FixedLengthStringData nps220CrtDrcOrdFlAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CrtDrcOrdFl, 2);
		private FixedLengthStringData nps220CrtDrcOrdFl = new FixedLengthStringData(1).isAPartOf(nps220Record, 337);
		private FixedLengthStringData scaNps220RteUnNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 338);
		private BinaryData nps220RteUnNoLength = new BinaryData(4, 0).isAPartOf(scaNps220RteUnNo, 0);
		private FixedLengthStringData nps220RteUnNoAttr = new FixedLengthStringData(1).isAPartOf(scaNps220RteUnNo, 2);
		private FixedLengthStringData nps220RteUnNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 341);
		private FixedLengthStringData scaNps220UnOpnDtMm = new FixedLengthStringData(3).isAPartOf(nps220Record, 348);
		private BinaryData nps220UnOpnDtMmLength = new BinaryData(4, 0).isAPartOf(scaNps220UnOpnDtMm, 0);
		private FixedLengthStringData nps220UnOpnDtMmAttr = new FixedLengthStringData(1).isAPartOf(scaNps220UnOpnDtMm,
		    2);
		private FixedLengthStringData nps220UnOpnDtMm = new FixedLengthStringData(2).isAPartOf(nps220Record, 351);
		private FixedLengthStringData scaNps220UnOpnDtDd = new FixedLengthStringData(3).isAPartOf(nps220Record, 353);
		private BinaryData nps220UnOpnDtDdLength = new BinaryData(4, 0).isAPartOf(scaNps220UnOpnDtDd, 0);
		private FixedLengthStringData nps220UnOpnDtDdAttr = new FixedLengthStringData(1).isAPartOf(scaNps220UnOpnDtDd,
		    2);
		private FixedLengthStringData nps220UnOpnDtDd = new FixedLengthStringData(2).isAPartOf(nps220Record, 356);
		private FixedLengthStringData scaNps220UnOpnDtYy = new FixedLengthStringData(3).isAPartOf(nps220Record, 358);
		private BinaryData nps220UnOpnDtYyLength = new BinaryData(4, 0).isAPartOf(scaNps220UnOpnDtYy, 0);
		private FixedLengthStringData nps220UnOpnDtYyAttr = new FixedLengthStringData(1).isAPartOf(scaNps220UnOpnDtYy,
		    2);
		private FixedLengthStringData nps220UnOpnDtYy = new FixedLengthStringData(2).isAPartOf(nps220Record, 361);
		private FixedLengthStringData scaNps220CnvSpdeDtMm = new FixedLengthStringData(3).isAPartOf(nps220Record, 363);
		private BinaryData nps220CnvSpdeDtMmLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvSpdeDtMm, 0);
		private FixedLengthStringData nps220CnvSpdeDtMmAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvSpdeDtMm, 2);
		private FixedLengthStringData nps220CnvSpdeDtMm = new FixedLengthStringData(2).isAPartOf(nps220Record, 366);
		private FixedLengthStringData scaNps220CnvSpdeDtDd = new FixedLengthStringData(3).isAPartOf(nps220Record, 368);
		private BinaryData nps220CnvSpdeDtDdLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvSpdeDtDd, 0);
		private FixedLengthStringData nps220CnvSpdeDtDdAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvSpdeDtDd, 2);
		private FixedLengthStringData nps220CnvSpdeDtDd = new FixedLengthStringData(2).isAPartOf(nps220Record, 371);
		private FixedLengthStringData scaNps220CnvSpdeDtYy = new FixedLengthStringData(3).isAPartOf(nps220Record, 373);
		private BinaryData nps220CnvSpdeDtYyLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvSpdeDtYy, 0);
		private FixedLengthStringData nps220CnvSpdeDtYyAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvSpdeDtYy, 2);
		private FixedLengthStringData nps220CnvSpdeDtYy = new FixedLengthStringData(2).isAPartOf(nps220Record, 376);
		private FixedLengthStringData scaNps220SvcUnCloDtMm = new FixedLengthStringData(3).isAPartOf(nps220Record, 378);
		private BinaryData nps220SvcUnCloDtMmLength = new BinaryData(4, 0).isAPartOf(scaNps220SvcUnCloDtMm, 0);
		private FixedLengthStringData nps220SvcUnCloDtMmAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220SvcUnCloDtMm, 2);
		private FixedLengthStringData nps220SvcUnCloDtMm = new FixedLengthStringData(2).isAPartOf(nps220Record, 381);
		private FixedLengthStringData scaNps220SvcUnCloDtDd = new FixedLengthStringData(3).isAPartOf(nps220Record, 383);
		private BinaryData nps220SvcUnCloDtDdLength = new BinaryData(4, 0).isAPartOf(scaNps220SvcUnCloDtDd, 0);
		private FixedLengthStringData nps220SvcUnCloDtDdAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220SvcUnCloDtDd, 2);
		private FixedLengthStringData nps220SvcUnCloDtDd = new FixedLengthStringData(2).isAPartOf(nps220Record, 386);
		private FixedLengthStringData scaNps220SvcUnCloDtYy = new FixedLengthStringData(3).isAPartOf(nps220Record, 388);
		private BinaryData nps220SvcUnCloDtYyLength = new BinaryData(4, 0).isAPartOf(scaNps220SvcUnCloDtYy, 0);
		private FixedLengthStringData nps220SvcUnCloDtYyAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220SvcUnCloDtYy, 2);
		private FixedLengthStringData nps220SvcUnCloDtYy = new FixedLengthStringData(2).isAPartOf(nps220Record, 391);
		private FixedLengthStringData scaNps220CnvNpnDtMm = new FixedLengthStringData(3).isAPartOf(nps220Record, 393);
		private BinaryData nps220CnvNpnDtMmLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvNpnDtMm, 0);
		private FixedLengthStringData nps220CnvNpnDtMmAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvNpnDtMm, 2);
		private FixedLengthStringData nps220CnvNpnDtMm = new FixedLengthStringData(2).isAPartOf(nps220Record, 396);
		private FixedLengthStringData scaNps220CnvNpnDtDd = new FixedLengthStringData(3).isAPartOf(nps220Record, 398);
		private BinaryData nps220CnvNpnDtDdLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvNpnDtDd, 0);
		private FixedLengthStringData nps220CnvNpnDtDdAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvNpnDtDd, 2);
		private FixedLengthStringData nps220CnvNpnDtDd = new FixedLengthStringData(2).isAPartOf(nps220Record, 401);
		private FixedLengthStringData scaNps220CnvNpnDtYy = new FixedLengthStringData(3).isAPartOf(nps220Record, 403);
		private BinaryData nps220CnvNpnDtYyLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvNpnDtYy, 0);
		private FixedLengthStringData nps220CnvNpnDtYyAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvNpnDtYy, 2);
		private FixedLengthStringData nps220CnvNpnDtYy = new FixedLengthStringData(2).isAPartOf(nps220Record, 406);
		private FixedLengthStringData scaNps220PosStaDtMm = new FixedLengthStringData(3).isAPartOf(nps220Record, 408);
		private BinaryData nps220PosStaDtMmLength = new BinaryData(4, 0).isAPartOf(scaNps220PosStaDtMm, 0);
		private FixedLengthStringData nps220PosStaDtMmAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220PosStaDtMm, 2);
		private FixedLengthStringData nps220PosStaDtMm = new FixedLengthStringData(2).isAPartOf(nps220Record, 411);
		private FixedLengthStringData scaNps220PosStaDtDd = new FixedLengthStringData(3).isAPartOf(nps220Record, 413);
		private BinaryData nps220PosStaDtDdLength = new BinaryData(4, 0).isAPartOf(scaNps220PosStaDtDd, 0);
		private FixedLengthStringData nps220PosStaDtDdAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220PosStaDtDd, 2);
		private FixedLengthStringData nps220PosStaDtDd = new FixedLengthStringData(2).isAPartOf(nps220Record, 416);
		private FixedLengthStringData scaNps220PosStaDtYy = new FixedLengthStringData(3).isAPartOf(nps220Record, 418);
		private BinaryData nps220PosStaDtYyLength = new BinaryData(4, 0).isAPartOf(scaNps220PosStaDtYy, 0);
		private FixedLengthStringData nps220PosStaDtYyAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220PosStaDtYy, 2);
		private FixedLengthStringData nps220PosStaDtYy = new FixedLengthStringData(2).isAPartOf(nps220Record, 421);
		private FixedLengthStringData scaNps220CnvCarsDtMm = new FixedLengthStringData(3).isAPartOf(nps220Record, 423);
		private BinaryData nps220CnvCarsDtMmLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvCarsDtMm, 0);
		private FixedLengthStringData nps220CnvCarsDtMmAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvCarsDtMm, 2);
		private FixedLengthStringData nps220CnvCarsDtMm = new FixedLengthStringData(2).isAPartOf(nps220Record, 426);
		private FixedLengthStringData scaNps220CnvCarsDtDd = new FixedLengthStringData(3).isAPartOf(nps220Record, 428);
		private BinaryData nps220CnvCarsDtDdLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvCarsDtDd, 0);
		private FixedLengthStringData nps220CnvCarsDtDdAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvCarsDtDd, 2);
		private FixedLengthStringData nps220CnvCarsDtDd = new FixedLengthStringData(2).isAPartOf(nps220Record, 431);
		private FixedLengthStringData scaNps220CnvCarsDtYy = new FixedLengthStringData(3).isAPartOf(nps220Record, 433);
		private BinaryData nps220CnvCarsDtYyLength = new BinaryData(4, 0).isAPartOf(scaNps220CnvCarsDtYy, 0);
		private FixedLengthStringData nps220CnvCarsDtYyAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220CnvCarsDtYy, 2);
		private FixedLengthStringData nps220CnvCarsDtYy = new FixedLengthStringData(2).isAPartOf(nps220Record, 436);
		private FixedLengthStringData scaNps220CpuAidRte = new FixedLengthStringData(3).isAPartOf(nps220Record, 438);
		private BinaryData nps220CpuAidRteLength = new BinaryData(4, 0).isAPartOf(scaNps220CpuAidRte, 0);
		private FixedLengthStringData nps220CpuAidRteAttr = new FixedLengthStringData(1).isAPartOf(scaNps220CpuAidRte,
		    2);
		private FixedLengthStringData nps220CpuAidRte = new FixedLengthStringData(1).isAPartOf(nps220Record, 441);
		private FixedLengthStringData scaNps220FgnStrPrtMku = new FixedLengthStringData(3).isAPartOf(nps220Record, 442);
		private BinaryData nps220FgnStrPrtMkuLength = new BinaryData(4, 0).isAPartOf(scaNps220FgnStrPrtMku, 0);
		private FixedLengthStringData nps220FgnStrPrtMkuAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220FgnStrPrtMku, 2);
		private FixedLengthStringData nps220FgnStrPrtMku = new FixedLengthStringData(2).isAPartOf(nps220Record, 445);
		private FixedLengthStringData scaNps220StateRegNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 447);
		private BinaryData nps220StateRegNoLength = new BinaryData(4, 0).isAPartOf(scaNps220StateRegNo, 0);
		private FixedLengthStringData nps220StateRegNoAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220StateRegNo, 2);
		private FixedLengthStringData nps220StateRegNo = new FixedLengthStringData(12).isAPartOf(nps220Record, 450);
		private FixedLengthStringData scaNps220InhomePrtMku = new FixedLengthStringData(3).isAPartOf(nps220Record, 462);
		private BinaryData nps220InhomePrtMkuLength = new BinaryData(4, 0).isAPartOf(scaNps220InhomePrtMku, 0);
		private FixedLengthStringData nps220InhomePrtMkuAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220InhomePrtMku, 2);
		private FixedLengthStringData nps220InhomePrtMku = new FixedLengthStringData(2).isAPartOf(nps220Record, 465);
		private FixedLengthStringData scaNps220ShipDest = new FixedLengthStringData(3).isAPartOf(nps220Record, 467);
		private BinaryData nps220ShipDestLength = new BinaryData(4, 0).isAPartOf(scaNps220ShipDest, 0);
		private FixedLengthStringData nps220ShipDestAttr = new FixedLengthStringData(1).isAPartOf(scaNps220ShipDest, 2);
		private FixedLengthStringData nps220ShipDest = new FixedLengthStringData(1).isAPartOf(nps220Record, 470);
		private FixedLengthStringData scaNps220ShopPrtMku = new FixedLengthStringData(3).isAPartOf(nps220Record, 471);
		private BinaryData nps220ShopPrtMkuLength = new BinaryData(4, 0).isAPartOf(scaNps220ShopPrtMku, 0);
		private FixedLengthStringData nps220ShopPrtMkuAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220ShopPrtMku, 2);
		private FixedLengthStringData nps220ShopPrtMku = new FixedLengthStringData(2).isAPartOf(nps220Record, 474);
		private FixedLengthStringData scaNps220AcsDckUnNo = new FixedLengthStringData(3).isAPartOf(nps220Record, 476);
		private BinaryData nps220AcsDckUnNoLength = new BinaryData(4, 0).isAPartOf(scaNps220AcsDckUnNo, 0);
		private FixedLengthStringData nps220AcsDckUnNoAttr = new FixedLengthStringData(1).isAPartOf(
		    scaNps220AcsDckUnNo, 2);
		private FixedLengthStringData nps220AcsDckUnNo = new FixedLengthStringData(7).isAPartOf(nps220Record, 479);
		private FixedLengthStringData scaNps220Msg = new FixedLengthStringData(3).isAPartOf(nps220Record, 486);
		private BinaryData nps220MsgLength = new BinaryData(4, 0).isAPartOf(scaNps220Msg, 0);
		private FixedLengthStringData nps220MsgAttr = new FixedLengthStringData(1).isAPartOf(scaNps220Msg, 2);
		private FixedLengthStringData nps220Msg = new FixedLengthStringData(79).isAPartOf(nps220Record, 489);
		private FixedLengthStringData scaNps220Msg2 = new FixedLengthStringData(3).isAPartOf(nps220Record, 568);
		private BinaryData nps220Msg2Length = new BinaryData(4, 0).isAPartOf(scaNps220Msg2, 0);
		private FixedLengthStringData nps220Msg2Attr = new FixedLengthStringData(1).isAPartOf(scaNps220Msg2, 2);
		private FixedLengthStringData nps220Msg2 = new FixedLengthStringData(79).isAPartOf(nps220Record, 571);
		private FixedLengthStringData scaNps220Command = new FixedLengthStringData(3).isAPartOf(nps220Record, 650);
		private BinaryData nps220CommandLength = new BinaryData(4, 0).isAPartOf(scaNps220Command, 0);
		private FixedLengthStringData nps220CommandAttr = new FixedLengthStringData(1).isAPartOf(scaNps220Command, 2);
		private FixedLengthStringData nps220Command = new FixedLengthStringData(1).isAPartOf(nps220Record, 653);
	}

	/*
	 * Class transformed from Data Structure APS-EIBFN-EIBRCODE_INNER
	 */
	private static final class ApsEibfnEibrcodeInner {

		/* APS-GENERATED EIBRCODE STRUCTURE *** */
		private FixedLengthStringData apsEibfnEibrcode = new FixedLengthStringData(7);
		private FixedLengthStringData apsEibfn = new FixedLengthStringData(1).isAPartOf(apsEibfnEibrcode, 0);
		private FixedLengthStringData apsEibrcode = new FixedLengthStringData(6).isAPartOf(apsEibfnEibrcode, 1);

		private FixedLengthStringData filler = new FixedLengthStringData(7).isAPartOf(apsEibfnEibrcode, 0,
		    FILLER_REDEFINE);
		private BinaryData apsEibfnEibrcodeX = new BinaryData(4, 0).isAPartOf(filler, 0);
		private Validator cbiderr = new Validator(apsEibfnEibrcodeX, +1259);
		private Validator disabled = new Validator(apsEibfnEibrcodeX, +1549);
		private Validator dsiderr = new Validator(apsEibfnEibrcodeX, +1537);
		private Validator dsstat = new Validator(apsEibfnEibrcodeX, +7684);
		private Validator dupkey = new Validator(apsEibfnEibrcodeX, +1668);
		private Validator duprec = new Validator(apsEibfnEibrcodeX, +1666);
		private Validator enddata = new Validator(apsEibfnEibrcodeX, +4097);
		private Validator endfile = new Validator(apsEibfnEibrcodeX, +1551);
		private Validator endinpt = new Validator(apsEibfnEibrcodeX, +1218);
		private Validator enqbusy = new Validator(apsEibfnEibrcodeX, +4658);
		private Validator envdeferr = new Validator(apsEibfnEibrcodeX, +4329);
		private Validator eods = new Validator(apsEibfnEibrcodeX, +1040);
		private Validator eof = new Validator(apsEibfnEibrcodeX, +1028, +1217);
		private Validator expired = new Validator(apsEibfnEibrcodeX, +4128);
		private Validator funcerr = new Validator(apsEibfnEibrcodeX, +7688);
		private Validator igreqcd = new Validator(apsEibfnEibrcodeX, +1258);
		private Validator illogic = new Validator(apsEibfnEibrcodeX, +1538);
		private Validator inverrterm = new Validator(apsEibfnEibrcodeX, +6176);
		private Validator invmpsz = new Validator(apsEibfnEibrcodeX, +6152);
		private Validator invreq = new Validator(apsEibfnEibrcodeX, +736, +1248, +1544, +2592, +3808, +4351, +4832,
		    +5122, +6145, +6880);
		private Validator invtsreq = new Validator(apsEibfnEibrcodeX, +4116);
		private Validator ioerr = new Validator(apsEibfnEibrcodeX, +1664, +2052, +2564, +4100, +5127);
		private Validator iscinvreq = new Validator(apsEibfnEibrcodeX, +1745, +2257, +2769, +4305);
		private Validator itemerr = new Validator(apsEibfnEibrcodeX, +2561);
		private Validator jiderr = new Validator(apsEibfnEibrcodeX, +5121);
		private Validator lengerr = new Validator(apsEibfnEibrcodeX, +1249, +1761, +2273, +2785, +3297, +4321, +5126,
		    +6369, +7905);
		private Validator mapfail = new Validator(apsEibfnEibrcodeX, +6148);
		private Validator nojbufsp = new Validator(apsEibfnEibrcodeX, +5129);
		private Validator nopassbkrd = new Validator(apsEibfnEibrcodeX, +1255);
		private Validator nopassbkwr = new Validator(apsEibfnEibrcodeX, +1256);
		private Validator nospace = new Validator(apsEibfnEibrcodeX, +1667, +2064, +2568);
		private Validator nostg = new Validator(apsEibfnEibrcodeX, +3298);
		private Validator notalloc = new Validator(apsEibfnEibrcodeX, +1237);
		private Validator notfnd = new Validator(apsEibfnEibrcodeX, +1665, +4225);
		private Validator notopen = new Validator(apsEibfnEibrcodeX, +1548, +2056, +5125);
		private Validator pgmiderr = new Validator(apsEibfnEibrcodeX, +3585);
		private Validator qbusy = new Validator(apsEibfnEibrcodeX, +2240);
		private Validator qiderr = new Validator(apsEibfnEibrcodeX, +2050, +2562);
		private Validator qzero = new Validator(apsEibfnEibrcodeX, +2049);
		private Validator rdatt = new Validator(apsEibfnEibrcodeX, +1252, +6372);
		private Validator retpage = new Validator(apsEibfnEibrcodeX, +6146);
		private Validator rtefail = new Validator(apsEibfnEibrcodeX, +6272);
		private Validator rtesome = new Validator(apsEibfnEibrcodeX, +6208);
		private Validator segiderr = new Validator(apsEibfnEibrcodeX, +1540);
		private Validator selnerr = new Validator(apsEibfnEibrcodeX, +7692);
		private Validator sessbusy = new Validator(apsEibfnEibrcodeX, +1236);
		private Validator sessionerr = new Validator(apsEibfnEibrcodeX, +1234);
		private Validator signal = new Validator(apsEibfnEibrcodeX, +1253);
		private Validator sysbusy = new Validator(apsEibfnEibrcodeX, +1235);
		private Validator sysiderr = new Validator(apsEibfnEibrcodeX, +1232, +1744, +2256, +2768, +4304);
		private Validator termiderr = new Validator(apsEibfnEibrcodeX, +1254, +4114);
		private Validator transiderr = new Validator(apsEibfnEibrcodeX, +4113);
		private Validator unexpin = new Validator(apsEibfnEibrcodeX, +7696);
		private Validator wrbrk = new Validator(apsEibfnEibrcodeX, +1251, +6371);
		private Validator errorFound = new Validator(apsEibfnEibrcodeX, +1259, +1537, +7684, +1668, +1666, +4097,
		    +1551, +1218, +4658, +4329, +1040, +1028, +1217, +4128, +7688, +1258, +1538, +6176, +6152, +736, +1248,
		    +1544, +2592, +3808, +4351, +4832, +5122, +6145, +6880, +4116, +1664, +2052, +2564, +4100, +5127, +1745,
		    +2257, +2769, +4305, +2561, +5121, +1249, +1761, +2273, +2785, +3297, +4321, +5126, +6369, +7905, +6148,
		    +5129, +1255, +1256, +1667, +2064, +2568, +3298, +1237, +1665, +4225, +1548, +2056, +5125, +3585, +2240,
		    +2050, +2562, +2049, +1252, +6372, +6146, +6272, +6208, +1540, +7692, +1236, +1234, +1253, +1235, +1232,
		    +1744, +2256, +2768, +4304, +1254, +4114, +4113, +7696, +1251, +6371);
	}

	/*
	 * Class transformed from Data Structure PFKEY-FIELD-GRP_INNER
	 */
	private static final class PfkeyFieldGrpInner {

		/* APS-GENERATED PFKEY STRUCTURE *** */
		private FixedLengthStringData pfkeyFieldGrp = new FixedLengthStringData(2);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 0, FILLER).init(
		    LOVALUES);
		private FixedLengthStringData pfkeyField = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 1);
		private Validator enterKey = new Validator(pfkeyField, QUOTES);
		private Validator clearKey = new Validator(pfkeyField, "_");
		private Validator pen = new Validator(pfkeyField, "=");
		private Validator opid = new Validator(pfkeyField, "W");
		private Validator msre = new Validator(pfkeyField, "X");
		private Validator strf = new Validator(pfkeyField, "H");
		private Validator trig = new Validator(pfkeyField, "\"");
		private Validator pa1 = new Validator(pfkeyField, "%");
		private Validator pa2 = new Validator(pfkeyField, ">");
		private Validator pa3 = new Validator(pfkeyField, ",");
		private Validator pf0 = new Validator(pfkeyField, QUOTES);
		private Validator pf00 = new Validator(pfkeyField, QUOTES);
		private Validator pf1 = new Validator(pfkeyField, "1");
		private Validator pf01 = new Validator(pfkeyField, "1");
		private Validator pf2 = new Validator(pfkeyField, "2");
		private Validator pf02 = new Validator(pfkeyField, "2");
		private Validator pf3 = new Validator(pfkeyField, "3");
		private Validator pf03 = new Validator(pfkeyField, "3");
		private Validator pf4 = new Validator(pfkeyField, "4");
		private Validator pf04 = new Validator(pfkeyField, "4");
		private Validator pf5 = new Validator(pfkeyField, "5");
		private Validator pf05 = new Validator(pfkeyField, "5");
		private Validator pf6 = new Validator(pfkeyField, "6");
		private Validator pf06 = new Validator(pfkeyField, "6");
		private Validator pf7 = new Validator(pfkeyField, "7");
		private Validator pf07 = new Validator(pfkeyField, "7");
		private Validator pf8 = new Validator(pfkeyField, "8");
		private Validator pf08 = new Validator(pfkeyField, "8");
		private Validator pf9 = new Validator(pfkeyField, "9");
		private Validator pf09 = new Validator(pfkeyField, "9");
		private Validator pf10 = new Validator(pfkeyField, ":");
		private Validator pf11 = new Validator(pfkeyField, "#");
		private Validator pf12 = new Validator(pfkeyField, "@");
		private Validator pf13 = new Validator(pfkeyField, "A");
		private Validator pf14 = new Validator(pfkeyField, "B");
		private Validator pf15 = new Validator(pfkeyField, "C");
		private Validator pf16 = new Validator(pfkeyField, "D");
		private Validator pf17 = new Validator(pfkeyField, "E");
		private Validator pf18 = new Validator(pfkeyField, "F");
		private Validator pf19 = new Validator(pfkeyField, "G");
		private Validator pf20 = new Validator(pfkeyField, "H");
		private Validator pf21 = new Validator(pfkeyField, "I");
		private Validator pf23 = new Validator(pfkeyField, ".");
		private Validator pf24 = new Validator(pfkeyField, "<");

		private FixedLengthStringData pfkeyFieldPf22 = new FixedLengthStringData(2).isAPartOf(pfkeyFieldGrp, 0,
		    REDEFINE);
		private BinaryData apsPf22 = new BinaryData(4, 0).isAPartOf(pfkeyFieldPf22, 0);
		private Validator pf22 = new Validator(apsPf22, +74);
	}

	/*
	 * Class transformed from Data Structure APS-SCREEN-ATTRIBUTES_INNER
	 */
	private static final class ApsScreenAttributesInner {

		/* APS-SCREEN-ATTRIBUTES */
		private ZonedDecimalData tpPositionCursor = new ZonedDecimalData(4, 0).init(-1);
		private BinaryData tpAttrPbfftX = new BinaryData(4, 0).init(232);

		private FixedLengthStringData tpAttrPbfftY = new FixedLengthStringData(2).isAPartOf(tpAttrPbfftX, 0, REDEFINE);
		private FixedLengthStringData tpAttrPbfft = new FixedLengthStringData(1).isAPartOf(tpAttrPbfftY, 1);
		private BinaryData tpAttrPnfffX = new BinaryData(4, 0).init(224);

		private FixedLengthStringData tpAttrPnfffY = new FixedLengthStringData(2).isAPartOf(tpAttrPnfffX, 0, REDEFINE);
		private FixedLengthStringData tpAttrPnfff = new FixedLengthStringData(1).isAPartOf(tpAttrPnfffY, 1);
		private BinaryData tpAttrPdfffX = new BinaryData(4, 0).init(236);

		private FixedLengthStringData tpAttrPdfffY = new FixedLengthStringData(2).isAPartOf(tpAttrPdfffX, 0, REDEFINE);
		private FixedLengthStringData tpAttrPdfff = new FixedLengthStringData(1).isAPartOf(tpAttrPdfffY, 1);
		private BinaryData tpAttrUbfftX = new BinaryData(4, 0).init(200);

		private FixedLengthStringData tpAttrUbfftY = new FixedLengthStringData(2).isAPartOf(tpAttrUbfftX, 0, REDEFINE);
		private FixedLengthStringData tpAttrUbfft = new FixedLengthStringData(1).isAPartOf(tpAttrUbfftY, 1);
		private BinaryData tpAttrUnfffX = new BinaryData(4, 0).init(192);

		private FixedLengthStringData tpAttrUnfffY = new FixedLengthStringData(2).isAPartOf(tpAttrUnfffX, 0, REDEFINE);
		private FixedLengthStringData tpAttrUnfff = new FixedLengthStringData(1).isAPartOf(tpAttrUnfffY, 1);
		private BinaryData tpAttrPbfffX = new BinaryData(4, 0).init(232);
	}
}
