/*
 * Generation Date: 21 November 2011 8:57:24 PM
 * Generated by:     CSC
 * Generated from:  NPS030.CBL
 * 
 * Copyright 2011 CSC, all rights reserved.
 * 
 * This software is the proprietary information of CSC.
 * Use is subject to license terms.
 */
package com.sears.processing.code;

import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER;
import static com.quipoz.COBOLFramework.COBOLFunctions.FILLER_REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.FLSDArrayPartOfArrayStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.LOVALUES;
import static com.quipoz.COBOLFramework.COBOLFunctions.PtrArrayPartOfStructure;
import static com.quipoz.COBOLFramework.COBOLFunctions.QUOTES;
import static com.quipoz.COBOLFramework.COBOLFunctions.REDEFINE;
import static com.quipoz.COBOLFramework.COBOLFunctions.SPACES;
import static com.quipoz.COBOLFramework.COBOLFunctions.isEQ;
import static com.quipoz.COBOLFramework.COBOLFunctions.isGT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isLT;
import static com.quipoz.COBOLFramework.COBOLFunctions.isNE;
import static com.quipoz.COBOLFramework.COBOLFunctions.setAddressToAddress;

import com.csc.qre.cics.CICSContext;
import com.csc.qre.cics.command.CICSCommandFactory;
import com.csc.qre.cics.command.CICSCondition;
import com.csc.qre.cics.command.CICSHandler;
import com.csc.qre.cics.command.impl.AssignTransactionDetails;
import com.csc.qre.cics.command.impl.DumpApplication;
import com.csc.qre.cics.command.impl.HandleAbend;
import com.csc.qre.cics.command.impl.IgnoreCondition;
import com.csc.qre.cics.command.impl.LinkProgram;
import com.csc.qre.cics.command.impl.ReleaseTemporaryStorage;
import com.csc.qre.cics.command.impl.ReturnControl;
import com.csc.qre.cics.command.impl.TransactionSyncpoint;
import com.csc.qre.cics.command.impl.TransferControl;
import com.csc.qre.cics.command.impl.WriteTransientStorage;
import com.csc.qre.cics.command.impl.fileaccess.ReadDirectly;
import com.csc.qre.cics.command.impl.screencontrol.ScreenSendText;
import com.csc.qre.cics.util.CICSNonConvCodeModel;
import com.quipoz.COBOLFramework.datatype.Validator;
import com.quipoz.COBOLFramework.datatype.ValueRange;
import com.quipoz.COBOLFramework.util.COBOLExitProgramException;
import com.quipoz.COBOLFramework.util.StringUtil;
import com.quipoz.framework.datatype.BinaryData;
import com.quipoz.framework.datatype.FixedLengthStringData;
import com.quipoz.framework.datatype.PointerData;
import com.quipoz.framework.datatype.ZonedDecimalData;
import com.sears.framework.utils.ScreenNavigation;
import com.sears.processing.dataaccess.IpserrorKsdsVsam;

/**
 * <pre>
 * ***************************************************************   687000
 *        THE PURPOSE OF THIS MACRO IS TO ALLOW US TO            *   688000
 *        SET THE INITIAL PREFIX OF OUR DB2 TABLES OR            *   689000
 *        VIEWS AT COMPILE TIME WITHOUT HAVING TO                *   690000
 *        ACTUALLY CHANGE THE CODE.  INSTEAD, WE WILL            *   691000
 *        CHANGE THE MACRO THAT IS REFERENCED UNDER USERMAC      *   692000
 *        ON THE APS GENERATOR PANEL.                            *   693000
 *                                                               *   694000
 *        TO USE THIS MACRO, MAKE SURE THAT YOU CODE YOUR SQL    *   695000
 *        STATEMENTS TO CALL A TABLE '&TABLE-PREFIX.XX...'       *   696000
 *        INSTEAD OF HARDCODING THE SPECIFIC TABLENAME YOU MAY   *   697000
 *        BE TESTING WITH.                                       *   698000
 *                                                               *   699000
 * ***************************************************************   700000
 * ***************************************************************   701101
 *  USE THIS PREFIX FOR HMIS SOURCE TABLES                           702001
 * ***************************************************************   702101
 * AUTHOR.                         NPS TEAM.
 * DATE-WRITTEN.                   11/11/04.
 * DATE-COMPILED.                  04 NOV 11 05.19.00.
 * REMARKS.
 * 
 *     ************************************************************* G
 *     *                                                           * G00020
 *     *               SYSTEM NAME                                 * G00030
 *     *               -----------                                 * G00040
 *     *                                                           * G00050
 *     * PROGRAM NAME AND LEVEL                                    * G00060
 *     * ----------------------                                    * G00070
 *     *   NPS030 - NPS ERROR MESSAGE PROGRAM                      * G00080
 *     *                                                           * G00090
 *     * PROGRAM BRIEF                                             * G00100
 *     * -------------                                             * G00110
 *     *   THIS PROGRAM IS CALLED TO RETRIEVE THE SPECIFIC ERROR   * G00120
 *     *   MESSAGE THAT IS REQUESTED.  THE CALLING PROGRAM WILL    * G00130
 *     *   SET THE ERROR KEY IN THE COMMAREA, AND THIS PROGRAM     * G00140
 *     *   WILL USE THE KEY TO PERFORM A DIRECT READ AGAINST THE   * G00150
 *     *   VSAM KSDS ERROR FILE.  IT WILL THEN STORE THE ERROR     * G00160
 *     *   MESSAGE IN THE COMMAREA SO THAT THE CALLING PROGRAM     * G00170
 *     *   CAN ACCESS IT.  IF THE RECORD IS NOT FOUND OR AN I/O    * G00180
 *     *   ERROR IS ENCOUNTERED, AN APPROPRIATE ERROR MESSAGE WILL * G00190
 *     *   BE FORMATTED TO INDICATE THE ERROR.                     * G00200
 *     *                                                           * G00210
 *     * INTERFACES                                                * G00220
 *     * ----------                                                * G00230
 *     *   NONE                                                    * G00240
 *     *                                                           * G00250
 *     * INPUT                                                     * G00260
 *     * -----                                                     * G00270
 *     *   ISPERROR - VSAM KSDS ERROR FILE                         * G00280
 *     *            - CONTAINS ALL ERROR MESSAGES FOR NPS SYSTEM   * G00290
 *     *                                                           * G00300
 *     * OUTPUT                                                    * G00310
 *     * ------                                                    * G00320
 *     *   THE COMMAREA FIELD 'CA-ERROR-MSG' WILL CONTAIN AN       * G00330
 *     *     ERROR MESSAGE.                                        * G00340
 *     *                                                           * G00350
 *     * PROCEDURE NAME                                            * G00360
 *     * --------------                                            * G00370
 *     *   NONE                                                    * G00380
 *     *                                                           * G00390
 *     * CALLED PROGRAMS                                           * G00400
 *     * ---------------                                           * G00410
 *     *   NONE                                                    * G00420
 *     *                                                           * G00430
 *     * CALLING PROGRAM                                           * G00440
 *     * ---------------                                           * G00450
 *     *   ANY PROGRAM THAT NEEDS AN ERROR MESSAGE RETRIEVED.      * G00460
 *     *                                                           * G00470
 *     * SPECIAL CONSIDERATIONS                                    * G00480
 *     * ----------------------                                    * G00490
 *     *    NONE                                                   * G00500
 *     ************************************************************* G00510
 *          EJECT                                                    G00520
 *     ************************************************************* G
 * </pre>
 */
public class NPSErrorMessageHandler extends CICSNonConvCodeModel {

	/* UNUSED SPACE */
	private FixedLengthStringData inErrorRecord = new FixedLengthStringData(79);
	private FixedLengthStringData inErrorKey = new FixedLengthStringData(4).isAPartOf(inErrorRecord, 0);
	/* ERROR-MESSAGES */
	private String errorIoerr = "I/O error on the NPS Error file (IPSERROR).";
	private String errorNotopen = "The NPS Error file (IPSERROR) is not open.";
	private String errorNotalloc = "The NPS Error file (IPSERROR) is not allocated.";

	private FixedLengthStringData errorNotfnd = new FixedLengthStringData(43);
	private FixedLengthStringData errorNotfndKey = new FixedLengthStringData(5).isAPartOf(errorNotfnd, 0).init(SPACES);
	private FixedLengthStringData filler = new FixedLengthStringData(38).isAPartOf(errorNotfnd, 5, FILLER).init(
	    "Error message not found in error file.");

	private FixedLengthStringData messageArea = new FixedLengthStringData(162);
	private FixedLengthStringData messageLine1 = new FixedLengthStringData(79).isAPartOf(messageArea, 0);
	private FixedLengthStringData filler1 = new FixedLengthStringData(5).isAPartOf(messageLine1, 0, FILLER)
	    .init(SPACES);
	private FixedLengthStringData messagePgmId = new FixedLengthStringData(6).isAPartOf(messageLine1, 5).init(SPACES);
	private FixedLengthStringData filler2 = new FixedLengthStringData(68).isAPartOf(messageLine1, 11, FILLER).init(
	    SPACES);
	private FixedLengthStringData sqlErrorMessage = new FixedLengthStringData(79).isAPartOf(messageLine1, 0, REDEFINE);
	private FixedLengthStringData sqlErrorCode = new FixedLengthStringData(4).isAPartOf(sqlErrorMessage, 28);
	private FixedLengthStringData messageLine2 = new FixedLengthStringData(79).isAPartOf(messageArea, 79).init(SPACES);
	private ZonedDecimalData sqlEditField = new ZonedDecimalData(3, 0).isAPartOf(messageArea, 158).setPattern("---9");
	private FixedLengthStringData workArea = new FixedLengthStringData(79).init(SPACES);
	private ZonedDecimalData wsAbendCicsNum = new ZonedDecimalData(4, 0).setUnsigned();
	private FixedLengthStringData wsAbendCicsTermid = new FixedLengthStringData(4);
	private FixedLengthStringData wsAbendCicsUserid = new FixedLengthStringData(8);
	private FixedLengthStringData haMessageArea = new FixedLengthStringData(79).init(SPACES);
	/*
	 * : === END OF $NPS-HANDLE-ABEND === : : === WS FIELDS FOR $NPS-DELETE-QUEUES === :
	 */
	private FixedLengthStringData dqArea1 = new FixedLengthStringData(4);

	private FixedLengthStringData dqProgName = new FixedLengthStringData(6);
	private FixedLengthStringData dqProgNamePfx = new FixedLengthStringData(1).isAPartOf(dqProgName, 0);
	private FixedLengthStringData dqProgNameSysid = new FixedLengthStringData(2).isAPartOf(dqProgName, 1);
	private FixedLengthStringData dqProgNameSfx = new FixedLengthStringData(3).isAPartOf(dqProgName, 3);

	private FixedLengthStringData dqProgQueue = new FixedLengthStringData(8);
	private FixedLengthStringData dqProgQueueSysid = new FixedLengthStringData(2).isAPartOf(dqProgQueue, 0);
	private FixedLengthStringData dqProgQueueTid = new FixedLengthStringData(4).isAPartOf(dqProgQueue, 2);
	private BinaryData dqProgQueueId = new BinaryData(4, 0).isAPartOf(dqProgQueue, 6);
	/*
	 * : === END OF $NPS-DELETE-QUEUES-WS === : : == WORKING-STORAGE FIELDS FOR $NPS-FORMAT-TIME == : : (GENERATED BY
	 * $NPS-FORMAT-TIME) :
	 */
	private ZonedDecimalData foTimeNum = new ZonedDecimalData(7, 0).setPattern("-------9");

	private FixedLengthStringData foTime = new FixedLengthStringData(8).isAPartOf(foTimeNum, 0, REDEFINE);
	private FixedLengthStringData foHours = new FixedLengthStringData(2).isAPartOf(foTime, 2);
	private FixedLengthStringData foMinutes = new FixedLengthStringData(2).isAPartOf(foTime, 4);
	private FixedLengthStringData foSeconds = new FixedLengthStringData(2).isAPartOf(foTime, 6);

	private FixedLengthStringData foTimeScreen = new FixedLengthStringData(8);
	private FixedLengthStringData foScrnHours = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 0);
	private FixedLengthStringData foScrnColon1 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 2).init(":");
	private FixedLengthStringData foScrnMinutes = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 3);
	private FixedLengthStringData foScrnColon2 = new FixedLengthStringData(1).isAPartOf(foTimeScreen, 5).init(":");
	private FixedLengthStringData foScrnSeconds = new FixedLengthStringData(2).isAPartOf(foTimeScreen, 6);
	/*
	 * : === END OF $NPS-FORMAT-TIME-WS === : : === WORKING-STORAGE FIELDS FOR $NPS-CICS-NUMBER=== : : (GENERATED BY
	 * $NPS-CICS-NUMBER-WS) :
	 */
	private ZonedDecimalData cicsCallNumber = new ZonedDecimalData(4, 0).setUnsigned();
	private FixedLengthStringData apsHoldInvocationMode = new FixedLengthStringData(1);

	private FixedLengthStringData apsScreenFlags = new FixedLengthStringData(1);

	/* GENERATED-FLAGS */
	private FixedLengthStringData trux = new FixedLengthStringData(1).init("T");
	private Validator always = new Validator(trux, "T");
	private Validator never = new Validator(trux, "F");

	/*
	 * APS-GENERATED DFHCOMMAREA *** LENGTH: 5620 ***
	 */
	private FixedLengthStringData dfhcommarea = new FixedLengthStringData(5620);
	private FixedLengthStringData tpHdrLinkage = new FixedLengthStringData(40).isAPartOf(dfhcommarea, 0);
	private FixedLengthStringData tpUserLinkage = new FixedLengthStringData(5500).isAPartOf(dfhcommarea, 40);
	private FixedLengthStringData tpAddrTableLinkage = new FixedLengthStringData(80).isAPartOf(dfhcommarea, 5540);
	private PointerData[] tpAddrLinkage = PtrArrayPartOfStructure(20, tpAddrTableLinkage, 0);
	private ApsEibfnEibrcodeInner apsEibfnEibrcodeInner = new ApsEibfnEibrcodeInner();
	private HaCsmtMsgInner haCsmtMsgInner = new HaCsmtMsgInner();
	private PfkeyFieldGrpInner pfkeyFieldGrpInner = new PfkeyFieldGrpInner();
	private TpCommareaInner tpCommareaInner = new TpCommareaInner();

	/**
	 * Default constructor.
	 */
	public NPSErrorMessageHandler() {
		super();
	}

	/**
	 * Overridden method to set DFHCOMMAREA
	 * 
	 * @param commArea - DFHCOMMAREA
	 */
	public void setCommArea(FixedLengthStringData commArea) {
		super.setCommArea(commArea);
		if (commArea != null) {
			dfhcommarea.changeLength(commArea.getLength());
			setAddressToAddress(dfhcommarea, commArea);
		}

	}

	/**
	 * The mainline method is the default entry point of the program when called by other programs using the Quipoz
	 * runtime framework.
	 */
	public void mainline() {
		try {
			nps030Section();
		} catch (COBOLExitProgramException e) {
			// Expected exception for control flow purposes
		}
	}

	/**
	 * Method generated from section NPS030-SECTION.
	 */
	private void nps030Section() {
		/* APS-MAIN-PARA */
		apsHousekeepingPara();
		apsUserMainPara();
		/* APS-MAIN-PARA--EXIT */
		exitProgram();
	}

	/**
	 * Method generated from paragraph MAIN-SECTION-SXIT.
	 */
	private void mainSectionSxit() {
		goBack();
		/**** APS-GENERATED HOUSEKEEPING PARAGRAPH ****/
	}

	/**
	 * Method generated from paragraph APS-HOUSEKEEPING-PARA.
	 */
	private void apsHousekeepingPara() {
		if (isEQ(getCICSContext().getEIB().getLengthCommarea(), 0)) {
			tpCommareaInner.tpCommarea.set(SPACES);
			tpCommareaInner.tpInvocationMode.set("T");
			tpCommareaInner.tpCallingProgramId.set("        ");
		} else {
			tpCommareaInner.tpCommarea.set(dfhcommarea);
		}
		/* ##* Ending: IF EIBCALEN = 0... */
		IgnoreCondition ignoreCondition = CICSCommandFactory.getIgnoreCondition(getCICSContext());
		ignoreCondition.addCondition(CICSCondition.ERROR);
		ignoreCondition.execute();
		pfkeyFieldGrpInner.pfkeyField.set(getCICSContext().getEIB().getFunctionKey());
	}

	/**
	 * Method generated from paragraph APS-USER-MAIN-PARA.
	 */
	private void apsUserMainPara() {
		/* : === CODE GENERATED BY $NPS-HANDLE-ABEND === : */
		HandleAbend handleAbend = CICSCommandFactory.getHandleAbend(getCICSContext());
		handleAbend.setHandler(new CICSHandler() {

			@Override
			public void handle(CICSContext context) {
				z100HandleAbend();
			}
		});
		handleAbend.execute();
		/* : === END OF CODE FOR $NPS-HANDLE-ABEND === : */
		/* ##* * MAINLINE LOGIC * */
		/* ##* * THIS PARAGRAPH WILL BRANCH TO THE APPROPRIATE PROCESSING * */
		/* ##* * PARAGRAPH DEPENDING ON HOW THIS PROGRAM WAS INVOKED. * */
		/* ##* * THE ONLY WAY THAT IT SHOULD BE INVOKED IS BY BEING * */
		/* ##* * LINK INVOKED. * */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			linkInvProcessing();
		} else {
			if (tpCommareaInner.tpScreenInvoked.isTrue()) {
				screenInvProcessing();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					programInvProcessing();
				} else {
					if (tpCommareaInner.tpTransidInvoked.isTrue()) {
						transidInvProcessing();
					}
					/* ##* Ending: IF TP-TRANSID-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-SCREEN-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph 1000-SCREEN-INV-PROCESSING.
	 */
	private void screenInvProcessing() {
		inErrorKey.set("0008");
		readErrorFile();
		messageLine1.set(workArea);
		messagePgmId.set("NPS030");
		inErrorKey.set("I007");
		readErrorFile();
		messageLine2.set(workArea);
		ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
		sendText.setFrom(messageArea);
		sendText.setLength(158);
		sendText.setErase(true);
		sendText.setFreekb(true);
		sendText.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 2000-PROGRAM-INV-PROCESSING.
	 */
	private void programInvProcessing() {
		inErrorKey.set("0007");
		readErrorFile();
		messageLine1.set(workArea);
		messagePgmId.set("NPS030");
		inErrorKey.set("I007");
		readErrorFile();
		messageLine2.set(workArea);
		ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
		sendText.setFrom(messageArea);
		sendText.setLength(158);
		sendText.setErase(true);
		sendText.setFreekb(true);
		sendText.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 3000-TRANSID-INV-PROCESSING.
	 */
	private void transidInvProcessing() {
		inErrorKey.set("I005");
		readErrorFile();
		messageArea.set(workArea);
		ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
		sendText.setFrom(messageArea);
		sendText.setLength(79);
		sendText.setErase(true);
		sendText.setFreekb(true);
		sendText.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 4000-LINK-INV-PROCESSING.
	 */
	private void linkInvProcessing() {
		inErrorKey.set(tpCommareaInner.caErrorKey);
		readErrorFile();
		if (isEQ(inErrorKey, "9001")) {
			sqlErrorMessage.set(workArea);
			sqlEditField.set(tpCommareaInner.caSqlcode);
			sqlErrorCode.set(sqlEditField);
			tpCommareaInner.caErrorMsg.set(sqlErrorMessage);
		} else {
			tpCommareaInner.caErrorMsg.set(workArea);
		}
		/* ##* Ending: IF IN-ERROR-KEY = '9001'... */
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			dfhcommarea.set(tpCommareaInner.tpCommarea);
		}
		/* ##* Ending: IF TP-LINK-INVOKED THEN... */
		ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
		returnVar.execute();
	}

	/**
	 * Method generated from paragraph 5000-READ-ERROR-FILE.
	 */
	private void readErrorFile() {
		ReadDirectly read = CICSCommandFactory.getReadDirectly(getCICSContext());
		read.setInto(inErrorRecord);
		read.setDataset(IpserrorKsdsVsam.class);
		read.setRecordIdField(inErrorKey);
		read.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		if (apsEibfnEibrcodeInner.ioerr.isTrue()) {
			workArea.set(errorIoerr);
		} else {
			if (apsEibfnEibrcodeInner.notopen.isTrue()) {
				workArea.set(errorNotopen);
			} else {
				if (apsEibfnEibrcodeInner.notalloc.isTrue()) {
					workArea.set(errorNotalloc);
				} else {
					if (apsEibfnEibrcodeInner.notfnd.isTrue()) {
						errorNotfndKey.set(inErrorKey);
						workArea.set(errorNotfnd);
					} else {
						workArea.set(inErrorRecord);
					}
					/* ##* Ending: IF NOTFND... */
				}
				/* ##* Ending: IF NOTALLOC... */
			}
			/* ##* Ending: IF NOTOPEN... */
		}
		/* ##* Ending: IF IOERR... */
	}

	/**
	 * Method generated from paragraph Z100-HANDLE-ABEND.
	 */
	private void z100HandleAbend() {
		/* : PARAGRAPH TO CREATE A DUMP : */
		/* : (GENERATED BY $NPS-HANDLE-ABEND) : */
		/* ROLLBACK THE TRANSACTION */
		TransactionSyncpoint syncpoint = CICSCommandFactory.getTransactionSyncpoint(getCICSContext());
		syncpoint.setRollback(true);
		syncpoint.execute();
		/* DELETE ANY EXISTING QUEUES */
		/* : === CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		dqProgName.set("NPS030");
		z100DeleteQueues();
		/* : === END OF CODE GENERATED BY $NPS-DELETE-QUEUES === : */
		/* WRITE A MESSAGE TO THE CSMT */
		haCsmtMsgInner.haMsgPgm.set("NPS030");
		AssignTransactionDetails assign = CICSCommandFactory.getAssignTransactionDetails(getCICSContext());
		assign.setAbcode(haCsmtMsgInner.haMsgAbendCode);
		assign.execute();
		haCsmtMsgInner.haMsgTermid.set(getCICSContext().getEIB().getTerminalId());
		haCsmtMsgInner.haMsgUserid.set(tpCommareaInner.caUserid);
		/* : === CODE GENERATED BY $NPS-FORMAT-TIME === : */
		formatTime();
		haCsmtMsgInner.haMsgTime.set(foTimeScreen);
		/* : === END OF CODE GENERATED BY $NPS-FORMAT-TIME == : */
		WriteTransientStorage writeqTd = CICSCommandFactory.getWriteTransientStorage(getCICSContext());
		writeqTd.setQueue("CSMT");
		writeqTd.setFrom(haCsmtMsgInner.haCsmtMsg);
		writeqTd.setLength(haCsmtMsgInner.haCsmtMsg.getLength());
		writeqTd.execute();
		if (isNE(haCsmtMsgInner.haMsgAbendCode, "AAL1") && isNE(haCsmtMsgInner.haMsgAbendCode, "ABM3")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AEY9") && isNE(haCsmtMsgInner.haMsgAbendCode, "AKCS")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "ATND") && isNE(haCsmtMsgInner.haMsgAbendCode, "ATNI")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AXFX") && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI4")
		        && isNE(haCsmtMsgInner.haMsgAbendCode, "AZI6") && isNE(haCsmtMsgInner.haMsgAbendCode, "TX03")) {
			DumpApplication dump = CICSCommandFactory.getDumpApplication(getCICSContext());
			dump.setDumpcode(haCsmtMsgInner.haMsgAbendCode);
			dump.setComplete(true);
			dump.execute();
		}
		/* ##* Ending: IF HA-MSG-ABEND-CODE NOT = 'AAL1' AND... */
		tpCommareaInner.caErrorKey.set("9000");
		cicsCallNumber.set("1");
		apsHoldInvocationMode.set(tpCommareaInner.tpInvocationMode);
		tpCommareaInner.tpInvocationMode.set("L");
		tpCommareaInner.tpAddrTable.set(LOVALUES);
		tpCommareaInner.tpAddrCount.set(0);
		LinkProgram link = CICSCommandFactory.getLinkProgram(getCICSContext());
		link.setProgram(NPSErrorMessageHandler.class);
		link.setCommarea(tpCommareaInner.tpCommarea);
		link.setLength(5620);
		link.execute();
		apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
		apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
		tpCommareaInner.tpInvocationMode.set(apsHoldInvocationMode);
		if (tpCommareaInner.tpLinkInvoked.isTrue()) {
			tpCommareaInner.caReturnCode.set(4);
			tpCommareaInner.caEibrcode.set(getCICSContext().getEIB().getResponseCode());
			if (tpCommareaInner.tpLinkInvoked.isTrue()) {
				dfhcommarea.set(tpCommareaInner.tpCommarea);
			}
			/* ##* Ending: IF TP-LINK-INVOKED THEN... */
			ReturnControl returnVar = CICSCommandFactory.getReturnControl(getCICSContext());
			returnVar.execute();
		} else {
			if (tpCommareaInner.tpTransidInvoked.isTrue()) {
				tpCommareaInner.caCurrPgmName.set("NPSXXX");
				haMessageArea.set(tpCommareaInner.caErrorMsg);
				ScreenSendText sendText = CICSCommandFactory.getScreenSendText(getCICSContext());
				sendText.setFrom(haMessageArea);
				sendText.setLength(79);
				sendText.setErase(true);
				sendText.setFreekb(true);
				sendText.execute();
				apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
				apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
				if (tpCommareaInner.tpLinkInvoked.isTrue()) {
					dfhcommarea.set(tpCommareaInner.tpCommarea);
				}
				/* ##* Ending: IF TP-LINK-INVOKED THEN... */
				ReturnControl returnVar2 = CICSCommandFactory.getReturnControl(getCICSContext());
				returnVar2.execute();
			} else {
				if (tpCommareaInner.tpProgramInvoked.isTrue()) {
					tpCommareaInner.caCurrPgmName.set("NPSXXX");
					if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
					        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NBJ999")) {
						haMessageArea.set(tpCommareaInner.caErrorMsg);
						ScreenSendText sendText2 = CICSCommandFactory.getScreenSendText(getCICSContext());
						sendText2.setFrom(haMessageArea);
						sendText2.setLength(79);
						sendText2.setErase(true);
						sendText2.setFreekb(true);
						sendText2.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						if (tpCommareaInner.tpLinkInvoked.isTrue()) {
							dfhcommarea.set(tpCommareaInner.tpCommarea);
						}
						/* ##* Ending: IF TP-LINK-INVOKED THEN... */
						ReturnControl returnVar3 = CICSCommandFactory.getReturnControl(getCICSContext());
						returnVar3.execute();
					} else {
						tpCommareaInner.tpInvocationMode.set("P");
						tpCommareaInner.tpAddrTable.set(LOVALUES);
						tpCommareaInner.tpAddrCount.set(0);
						TransferControl xctl = CICSCommandFactory.getTransferControl(getCICSContext());
						xctl.setProgram(ScreenNavigation.class);
						xctl.setCommarea(tpCommareaInner.tpCommarea);
						xctl.setLength(5620);
						xctl.execute();
						apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
						apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
					}
					/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
				} else {
					if (tpCommareaInner.tpScreenInvoked.isTrue()) {
						tpCommareaInner.caCurrPgmName.set("NPSXXX");
						if (isLT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()], "NPS015")
						        && isGT(tpCommareaInner.caPgmStackPgmName[tpCommareaInner.caCurrPgmIndex.toInt()],
						            "NBJ999")) {
							haMessageArea.set(tpCommareaInner.caErrorMsg);
							ScreenSendText sendText3 = CICSCommandFactory.getScreenSendText(getCICSContext());
							sendText3.setFrom(haMessageArea);
							sendText3.setLength(79);
							sendText3.setErase(true);
							sendText3.setFreekb(true);
							sendText3.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
							if (tpCommareaInner.tpLinkInvoked.isTrue()) {
								dfhcommarea.set(tpCommareaInner.tpCommarea);
							}
							/* ##* Ending: IF TP-LINK-INVOKED THEN... */
							ReturnControl returnVar4 = CICSCommandFactory.getReturnControl(getCICSContext());
							returnVar4.execute();
						} else {
							tpCommareaInner.tpInvocationMode.set("P");
							tpCommareaInner.tpAddrTable.set(LOVALUES);
							tpCommareaInner.tpAddrCount.set(0);
							TransferControl xctl2 = CICSCommandFactory.getTransferControl(getCICSContext());
							xctl2.setProgram(ScreenNavigation.class);
							xctl2.setCommarea(tpCommareaInner.tpCommarea);
							xctl2.setLength(5620);
							xctl2.execute();
							apsEibfnEibrcodeInner.apsEibfn.set(getCICSContext().getEIB().getLastCommand());
							apsEibfnEibrcodeInner.apsEibrcode.set(getCICSContext().getEIB().getResponseCode());
						}
						/* ##* Ending: IF CA-PGM-STACK-PGM-NAME(CA-CURR-PGM-INDEX)... */
					}
					/* ##* Ending: IF TP-SCREEN-INVOKED... */
				}
				/* ##* Ending: IF TP-PROGRAM-INVOKED... */
			}
			/* ##* Ending: IF TP-TRANSID-INVOKED... */
		}
		/* ##* Ending: IF TP-LINK-INVOKED... */
	}

	/**
	 * Method generated from paragraph 99400-FORMAT-TIME.
	 */
	private void formatTime() {
		/* : (GENERATED BY $NPS-FORMAT-TIME) : */
		foTimeNum.set(getCICSContext().getEIB().getTaskTime());
		foScrnHours.set(foHours);
		foScrnMinutes.set(foMinutes);
		foScrnSeconds.set(foSeconds);
	}

	/**
	 * Method generated from paragraph Z100-DELETE-QUEUES.
	 */
	private void z100DeleteQueues() {
		/* : PARAGRAPH TO DELETE SCREEN IMAGE : */
		/* : (GENERATED BY $NPS-DELETE-QUEUES) : */
		/* DELETE QUEUE */
		dqProgQueueSysid.set(dqProgNameSysid);
		dqProgQueueTid.set(getCICSContext().getEIB().getTerminalId());
		StringUtil stringVariable1 = new StringUtil();
		stringVariable1.addExpression(dqProgNameSfx);
		stringVariable1.addExpression("0");
		stringVariable1.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("2");
		ReleaseTemporaryStorage deleteqTs = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs.setQueue(dqProgQueue);
		deleteqTs.setNoHandle(true);
		deleteqTs.execute();
		StringUtil stringVariable2 = new StringUtil();
		stringVariable2.addExpression(dqProgNameSfx);
		stringVariable2.addExpression("1");
		stringVariable2.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("3");
		ReleaseTemporaryStorage deleteqTs2 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs2.setQueue(dqProgQueue);
		deleteqTs2.setNoHandle(true);
		deleteqTs2.execute();
		StringUtil stringVariable3 = new StringUtil();
		stringVariable3.addExpression(dqProgNameSfx);
		stringVariable3.addExpression("2");
		stringVariable3.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("4");
		ReleaseTemporaryStorage deleteqTs3 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs3.setQueue(dqProgQueue);
		deleteqTs3.setNoHandle(true);
		deleteqTs3.execute();
		StringUtil stringVariable4 = new StringUtil();
		stringVariable4.addExpression(dqProgNameSfx);
		stringVariable4.addExpression("3");
		stringVariable4.setStringInto(dqArea1);
		dqProgQueueId.set(dqArea1);
		cicsCallNumber.set("5");
		ReleaseTemporaryStorage deleteqTs4 = CICSCommandFactory.getReleaseTemporaryStorage(getCICSContext());
		deleteqTs4.setQueue(dqProgQueue);
		deleteqTs4.setNoHandle(true);
		deleteqTs4.execute();
	}

	/*
	 * Class transformed from Data Structure TP-COMMAREA_INNER
	 */
	private static final class TpCommareaInner {

		private FixedLengthStringData tpCommarea = new FixedLengthStringData(5620);
		private FixedLengthStringData tpHeader = new FixedLengthStringData(40).isAPartOf(tpCommarea, 0);
		private FixedLengthStringData tpInvocationMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 0);
		private Validator tpTransidInvoked = new Validator(tpInvocationMode, "T");
		private Validator tpProgramInvoked = new Validator(tpInvocationMode, "P");
		private Validator tpScreenInvoked = new Validator(tpInvocationMode, "S");
		private Validator tpLinkInvoked = new Validator(tpInvocationMode, "L");
		private FixedLengthStringData tpPsbScheduledMode = new FixedLengthStringData(1).isAPartOf(tpHeader, 1);
		private Validator tpPsbScheduled = new Validator(tpPsbScheduledMode, "P");
		private BinaryData tpAddrCount = new BinaryData(4, 0).isAPartOf(tpHeader, 2);
		private FixedLengthStringData tpCallingProgramId = new FixedLengthStringData(8).isAPartOf(tpHeader, 4);
		private FixedLengthStringData tpAddrTable = new FixedLengthStringData(80).isAPartOf(tpCommarea, 5540);
		private PointerData[] tpAddr = PtrArrayPartOfStructure(20, tpAddrTable, 0);

		private FixedLengthStringData filler2 = new FixedLengthStringData(5540).isAPartOf(tpCommarea, 0,
		    FILLER_REDEFINE);
		private FixedLengthStringData tpUserarea = new FixedLengthStringData(5500).isAPartOf(filler2, 40);
		private FixedLengthStringData commArea = new FixedLengthStringData(5500).isAPartOf(tpUserarea, 0, REDEFINE);
		/*
		 * ERROR MESSAGES * - ERROR MESSAGE NUMBER TO BE DISPLAYED ON SCREEN * SET IN EACH PROGRAM. * - ERROR MESSAGE TO
		 * CARRY FROM ONE SCREEN TO ANOTHER *
		 */
		private FixedLengthStringData caSection3 = new FixedLengthStringData(100).isAPartOf(commArea, 150);
		private FixedLengthStringData caSection3Overlay = new FixedLengthStringData(100).isAPartOf(caSection3, 0,
		    REDEFINE);
		private BinaryData caReturnCode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 0);
		/*
		 * 0 - SUCCESSFUL 2 - SQL ERROR 4 - CICS ABEND 6 - CICS ERROR 8 - PRINT PROBLEM 10 - FUNCTION ROUTER ERROR
		 * (DATASTREAM ERROR)
		 */
		private FixedLengthStringData caEibrcode = new FixedLengthStringData(6).isAPartOf(caSection3Overlay, 2);
		private BinaryData caSqlcode = new BinaryData(4, 0).isAPartOf(caSection3Overlay, 8);
		/* P R O G R A M W O R K A R E A * */
		private FixedLengthStringData caSection4 = new FixedLengthStringData(40).isAPartOf(commArea, 250);
		private FixedLengthStringData caSection4Overlay = new FixedLengthStringData(40).isAPartOf(caSection4, 0,
		    REDEFINE);
		private FixedLengthStringData caCurrPgmName = new FixedLengthStringData(8).isAPartOf(caSection4Overlay, 0);
		/*
		 * P R O G R A M C O N T R O L * . CONTAINS THE LOCATION IN THE STACK OF THE CURRENT TASK 1 PGM. . CHANGED BY
		 * EACH PROGRAM PRIOR TO TRANSFERING TO ANOTHER PROGRAM AND BY PF3 AND PF12 STUBS. . KEEP TRACK OF PROGRAMS UP
		 * TO 13 LEVELS. PGM-INDEX - CURRENT INDEX (MUST BE INCREMENTED BY 1 ON XCTL) STACK LEVEL - SET BY TASK 1 OF
		 * EACH PROGRAM. USED TO DETERMINE WHERE PROGRAM WILL RETURN TO FOR PF3 OR PF12 'X' EXIT POINT - 'R' RETURN
		 * POINT - BY-PASSED BY PF3 OPT-SEL - SELECTION ENTERED BY USER ON SCREEN. USED BETWEEN TRANSACTIONS FOR
		 * PROCESSING WHICH DEPENDS ON OPTION ENTERED ON PREVIOUS SCREEN PGM-NAME - PROGRAM NAME FOR PF3/PF12 TRANSFER
		 * CONTROL UPDATED IN TASK 2 OF EACH TRANSACTION.
		 */
		private FixedLengthStringData caSection5 = new FixedLengthStringData(260).isAPartOf(commArea, 290);
		private FixedLengthStringData caSection5Overlay = new FixedLengthStringData(260).isAPartOf(caSection5, 0,
		    REDEFINE);
		private BinaryData caCurrPgmIndex = new BinaryData(4, 0).isAPartOf(caSection5Overlay, 0);
		private FixedLengthStringData[] caPgmStack = FLSArrayPartOfStructure(13, 19, caSection5Overlay, 2);
		private FixedLengthStringData[] caPgmStackPgmName = FLSDArrayPartOfArrayStructure(8, caPgmStack, 3);
		/*
		 * EXTRA FILLER PER NPJ REQUEST ##*** COMMUNICATION AREA - NPS SERVICE FOUNDATION *** ##** LENGTH OF
		 * COMMUNICATION AREA = 925 BYTES. ** ##* MISC INFORMATION *
		 */
		private FixedLengthStringData caMiscSec = new FixedLengthStringData(284).isAPartOf(commArea, 4075);
		private FixedLengthStringData caMiscSecOverlay = new FixedLengthStringData(284).isAPartOf(caMiscSec, 0,
		    REDEFINE);
		/* MESSAGE LINE 2 */
		private FixedLengthStringData caUserid = new FixedLengthStringData(7).isAPartOf(caMiscSecOverlay, 160);
		/*
		 * SERVICE ORDER TYPE - OTC, QUICK, ONSITE, HI-TECH, & SRS
		 */
		private FixedLengthStringData caActionCd = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 273);
		private Validator caAdd = new Validator(caActionCd, "A");
		private Validator caInquiry = new Validator(caActionCd, "I");
		private Validator caUpdate = new Validator(caActionCd, "U");
		private Validator caDelete = new Validator(caActionCd, "D");
		private Validator caReinstate = new Validator(caActionCd, "R");
		/* ACTION CODE */
		private FixedLengthStringData caQueryNo = new FixedLengthStringData(1).isAPartOf(caMiscSecOverlay, 274);
		private Validator caNameEmpidSsnEntered = new Validator(caQueryNo, "1");
		private Validator caNameEmpidEntered = new Validator(caQueryNo, "2");
		private Validator caNameSsnEntered = new Validator(caQueryNo, "3");
		private Validator caEmpidSsnEntered = new Validator(caQueryNo, "4");
		private Validator caNameEntered = new Validator(caQueryNo, "5");
		private Validator caEmpidEntered = new Validator(caQueryNo, "6");
		private Validator caSsnEntered = new Validator(caQueryNo, "7");
		private Validator caViewEmployees = new Validator(caQueryNo, "8");
		private Validator caRacfIdEntered = new Validator(caQueryNo, "9");
		/* ##* ERROR MESSAGE * */
		private FixedLengthStringData caErrorSec = new FixedLengthStringData(79).isAPartOf(commArea, 4359);
		private FixedLengthStringData caErrorSecOverlay = new FixedLengthStringData(79).isAPartOf(caErrorSec, 0,
		    REDEFINE);
		private FixedLengthStringData caErrorMsg = new FixedLengthStringData(79).isAPartOf(caErrorSecOverlay, 0);
		private FixedLengthStringData caErrorKey = new FixedLengthStringData(4).isAPartOf(caErrorMsg, 0);
		/* ERROR MESSAGE KEY */
		private FixedLengthStringData caErrorText = new FixedLengthStringData(75).isAPartOf(caErrorMsg, 4);
		/*
		 * HELP KEY FOR VSAM READING & UPDATES ##* NPS SYSTEM SECURITY LEVELS *
		 */
		private FixedLengthStringData caSecuritySec = new FixedLengthStringData(1).isAPartOf(commArea, 4515);
		private FixedLengthStringData caSecuritySecOverlay = new FixedLengthStringData(1).isAPartOf(caSecuritySec, 0,
		    REDEFINE);
		private FixedLengthStringData caSecurityLvl = new FixedLengthStringData(1).isAPartOf(caSecuritySecOverlay, 0);
		private Validator userFromUnit = new Validator(caSecurityLvl, "1", "2", "3");
		private Validator userFromUnit1 = new Validator(caSecurityLvl, "1");
		private Validator userFromUnit2 = new Validator(caSecurityLvl, "2");
		private Validator userFromUnit3 = new Validator(caSecurityLvl, "3");
		private Validator userFromRegion = new Validator(caSecurityLvl, "4", "5");
		private Validator userFromRegion1 = new Validator(caSecurityLvl, "4");
		private Validator userFromRegion2 = new Validator(caSecurityLvl, "5");
		private Validator userFromHq = new Validator(caSecurityLvl, "6");
		private Validator userFromSco = new Validator(caSecurityLvl, "7");
		private Validator security1To7 = new Validator(caSecurityLvl, new ValueRange("1", "7"));
		/* ##* SWITCHES AND FLAGS * */
		private FixedLengthStringData caSwFlagSec = new FixedLengthStringData(10).isAPartOf(commArea, 4547);
		private FixedLengthStringData caSwFlagOverlay = new FixedLengthStringData(10).isAPartOf(caSwFlagSec, 0,
		    REDEFINE);
		/* FLAGS */
		private FixedLengthStringData caWorkAreaPresentFlag = new FixedLengthStringData(1)
		    .isAPartOf(caSwFlagOverlay, 1);
		private Validator caWorkAreaInOtherTbl = new Validator(caWorkAreaPresentFlag, "Y");
		private FixedLengthStringData caErrorFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 2);
		private Validator outstandingError = new Validator(caErrorFlag, "Y");
		private FixedLengthStringData caEndOfDataFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 3);
		private Validator caEndOfData = new Validator(caEndOfDataFlag, "Y");
		private Validator endOfData = new Validator(caEndOfDataFlag, "Y");
		/* END-OF-DATA INDICATOR */
		private FixedLengthStringData caSaveFlag = new FixedLengthStringData(1).isAPartOf(caSwFlagOverlay, 4);
		private Validator caSavedFromLastScreen = new Validator(caSaveFlag, "Y");
		/*
		 * ##* COMMUNICATION AREA FILLER * ##* ## ADDED 500 BYTES TO THE FILLER *
		 */
		private FixedLengthStringData caFillerSec = new FixedLengthStringData(943).isAPartOf(commArea, 4557);
		private FixedLengthStringData caFillerOverlay = new FixedLengthStringData(941).isAPartOf(caFillerSec, 0,
		    REDEFINE);
		private FixedLengthStringData caBrUnNo = new FixedLengthStringData(7).isAPartOf(caFillerOverlay, 12);
		private Validator validItronixUser = new Validator(caBrUnNo, "PD86   ");
		/* ADDED SPDE UNIT INDICATOR FLAG */
		private FixedLengthStringData caSpdeSvcUnFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 19);
		private Validator spdeUnit = new Validator(caSpdeSvcUnFl, "Y", "M");
		private Validator spdeMsgsWtg = new Validator(caSpdeSvcUnFl, "M");
		/* Used for EMP REF capture NPS100 */
		private FixedLengthStringData caThdPtyFlag = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 433);
		private Validator thdPty = new Validator(caThdPtyFlag, "Y", "F");
		private Validator notThdPty = new Validator(caThdPtyFlag, "N");
		/* ORIGINATION CODE */
		private FixedLengthStringData caCamsFl = new FixedLengthStringData(1).isAPartOf(caFillerOverlay, 474);
		private Validator camsParallel = new Validator(caCamsFl, "1");
		private Validator camsPilot = new Validator(caCamsFl, "2");
		private Validator nonCams = new Validator(caCamsFl, " ");
	}

	/*
	 * Class transformed from Data Structure HA-CSMT-MSG_INNER
	 */
	private static final class HaCsmtMsgInner {

		private FixedLengthStringData haCsmtMsg = new FixedLengthStringData(99);
		private FixedLengthStringData haMsgPgm = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 0);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(haCsmtMsg, 6, FILLER)
		    .init(SPACES);
		private FixedLengthStringData filler1 = new FixedLengthStringData(6).isAPartOf(haCsmtMsg, 7, FILLER).init(
		    "E 0500");
		private FixedLengthStringData filler2 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 13, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler3 = new FixedLengthStringData(19).isAPartOf(haCsmtMsg, 15, FILLER).init(
		    "** PROGRAM ABEND **");
		private FixedLengthStringData filler4 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 34, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler5 = new FixedLengthStringData(13).isAPartOf(haCsmtMsg, 36, FILLER).init(
		    "ABEND CODE = ");
		private FixedLengthStringData haMsgAbendCode = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 49);
		private FixedLengthStringData filler6 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 53, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler7 = new FixedLengthStringData(7).isAPartOf(haCsmtMsg, 55, FILLER).init(
		    "TERMID=");
		private FixedLengthStringData haMsgTermid = new FixedLengthStringData(4).isAPartOf(haCsmtMsg, 62);
		private FixedLengthStringData filler8 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 66, FILLER).init(
		    SPACES);
		private FixedLengthStringData filler9 = new FixedLengthStringData(5).isAPartOf(haCsmtMsg, 68, FILLER).init(
		    "TIME=");
		private FixedLengthStringData haMsgTime = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 73);
		private FixedLengthStringData filler10 = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 81, FILLER).init(
		    " USERID=");
		private FixedLengthStringData haMsgUserid = new FixedLengthStringData(8).isAPartOf(haCsmtMsg, 89);
		private FixedLengthStringData filler11 = new FixedLengthStringData(2).isAPartOf(haCsmtMsg, 97, FILLER).init(
		    SPACES);
	}

	/*
	 * Class transformed from Data Structure APS-EIBFN-EIBRCODE_INNER
	 */
	private static final class ApsEibfnEibrcodeInner {

		/*
		 * : === END OF $NPS-CICS-NUMBER-WS === : APS-GENERATED EIBRCODE STRUCTURE ***
		 */
		private FixedLengthStringData apsEibfnEibrcode = new FixedLengthStringData(7);
		private FixedLengthStringData apsEibfn = new FixedLengthStringData(1).isAPartOf(apsEibfnEibrcode, 0);
		private FixedLengthStringData apsEibrcode = new FixedLengthStringData(6).isAPartOf(apsEibfnEibrcode, 1);

		private FixedLengthStringData filler = new FixedLengthStringData(7).isAPartOf(apsEibfnEibrcode, 0,
		    FILLER_REDEFINE);
		private BinaryData apsEibfnEibrcodeX = new BinaryData(4, 0).isAPartOf(filler, 0);
		private Validator cbiderr = new Validator(apsEibfnEibrcodeX, +1259);
		private Validator disabled = new Validator(apsEibfnEibrcodeX, +1549);
		private Validator dsiderr = new Validator(apsEibfnEibrcodeX, +1537);
		private Validator dsstat = new Validator(apsEibfnEibrcodeX, +7684);
		private Validator dupkey = new Validator(apsEibfnEibrcodeX, +1668);
		private Validator duprec = new Validator(apsEibfnEibrcodeX, +1666);
		private Validator enddata = new Validator(apsEibfnEibrcodeX, +4097);
		private Validator endfile = new Validator(apsEibfnEibrcodeX, +1551);
		private Validator endinpt = new Validator(apsEibfnEibrcodeX, +1218);
		private Validator enqbusy = new Validator(apsEibfnEibrcodeX, +4658);
		private Validator envdeferr = new Validator(apsEibfnEibrcodeX, +4329);
		private Validator eods = new Validator(apsEibfnEibrcodeX, +1040);
		private Validator eof = new Validator(apsEibfnEibrcodeX, +1028, +1217);
		private Validator expired = new Validator(apsEibfnEibrcodeX, +4128);
		private Validator funcerr = new Validator(apsEibfnEibrcodeX, +7688);
		private Validator igreqcd = new Validator(apsEibfnEibrcodeX, +1258);
		private Validator illogic = new Validator(apsEibfnEibrcodeX, +1538);
		private Validator inverrterm = new Validator(apsEibfnEibrcodeX, +6176);
		private Validator invmpsz = new Validator(apsEibfnEibrcodeX, +6152);
		private Validator invreq = new Validator(apsEibfnEibrcodeX, +736, +1248, +1544, +2592, +3808, +4351, +4832,
		    +5122, +6145, +6880);
		private Validator invtsreq = new Validator(apsEibfnEibrcodeX, +4116);
		private Validator ioerr = new Validator(apsEibfnEibrcodeX, +1664, +2052, +2564, +4100, +5127);
		private Validator iscinvreq = new Validator(apsEibfnEibrcodeX, +1745, +2257, +2769, +4305);
		private Validator itemerr = new Validator(apsEibfnEibrcodeX, +2561);
		private Validator jiderr = new Validator(apsEibfnEibrcodeX, +5121);
		private Validator lengerr = new Validator(apsEibfnEibrcodeX, +1249, +1761, +2273, +2785, +3297, +4321, +5126,
		    +6369, +7905);
		private Validator mapfail = new Validator(apsEibfnEibrcodeX, +6148);
		private Validator nojbufsp = new Validator(apsEibfnEibrcodeX, +5129);
		private Validator nopassbkrd = new Validator(apsEibfnEibrcodeX, +1255);
		private Validator nopassbkwr = new Validator(apsEibfnEibrcodeX, +1256);
		private Validator nospace = new Validator(apsEibfnEibrcodeX, +1667, +2064, +2568);
		private Validator nostg = new Validator(apsEibfnEibrcodeX, +3298);
		private Validator notalloc = new Validator(apsEibfnEibrcodeX, +1237);
		private Validator notfnd = new Validator(apsEibfnEibrcodeX, +1665, +4225);
		private Validator notopen = new Validator(apsEibfnEibrcodeX, +1548, +2056, +5125);
		private Validator pgmiderr = new Validator(apsEibfnEibrcodeX, +3585);
		private Validator qbusy = new Validator(apsEibfnEibrcodeX, +2240);
		private Validator qiderr = new Validator(apsEibfnEibrcodeX, +2050, +2562);
		private Validator qzero = new Validator(apsEibfnEibrcodeX, +2049);
		private Validator rdatt = new Validator(apsEibfnEibrcodeX, +1252, +6372);
		private Validator retpage = new Validator(apsEibfnEibrcodeX, +6146);
		private Validator rtefail = new Validator(apsEibfnEibrcodeX, +6272);
		private Validator rtesome = new Validator(apsEibfnEibrcodeX, +6208);
		private Validator segiderr = new Validator(apsEibfnEibrcodeX, +1540);
		private Validator selnerr = new Validator(apsEibfnEibrcodeX, +7692);
		private Validator sessbusy = new Validator(apsEibfnEibrcodeX, +1236);
		private Validator sessionerr = new Validator(apsEibfnEibrcodeX, +1234);
		private Validator signal = new Validator(apsEibfnEibrcodeX, +1253);
		private Validator sysbusy = new Validator(apsEibfnEibrcodeX, +1235);
		private Validator sysiderr = new Validator(apsEibfnEibrcodeX, +1232, +1744, +2256, +2768, +4304);
		private Validator termiderr = new Validator(apsEibfnEibrcodeX, +1254, +4114);
		private Validator transiderr = new Validator(apsEibfnEibrcodeX, +4113);
		private Validator unexpin = new Validator(apsEibfnEibrcodeX, +7696);
		private Validator wrbrk = new Validator(apsEibfnEibrcodeX, +1251, +6371);
		private Validator errorFound = new Validator(apsEibfnEibrcodeX, +1259, +1537, +7684, +1668, +1666, +4097,
		    +1551, +1218, +4658, +4329, +1040, +1028, +1217, +4128, +7688, +1258, +1538, +6176, +6152, +736, +1248,
		    +1544, +2592, +3808, +4351, +4832, +5122, +6145, +6880, +4116, +1664, +2052, +2564, +4100, +5127, +1745,
		    +2257, +2769, +4305, +2561, +5121, +1249, +1761, +2273, +2785, +3297, +4321, +5126, +6369, +7905, +6148,
		    +5129, +1255, +1256, +1667, +2064, +2568, +3298, +1237, +1665, +4225, +1548, +2056, +5125, +3585, +2240,
		    +2050, +2562, +2049, +1252, +6372, +6146, +6272, +6208, +1540, +7692, +1236, +1234, +1253, +1235, +1232,
		    +1744, +2256, +2768, +4304, +1254, +4114, +4113, +7696, +1251, +6371);
	}

	/*
	 * Class transformed from Data Structure PFKEY-FIELD-GRP_INNER
	 */
	private static final class PfkeyFieldGrpInner {

		/* APS-GENERATED PFKEY STRUCTURE *** */
		private FixedLengthStringData pfkeyFieldGrp = new FixedLengthStringData(2);
		private FixedLengthStringData filler = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 0, FILLER).init(
		    LOVALUES);
		private FixedLengthStringData pfkeyField = new FixedLengthStringData(1).isAPartOf(pfkeyFieldGrp, 1);
		private Validator enterKey = new Validator(pfkeyField, QUOTES);
		private Validator clearKey = new Validator(pfkeyField, "_");
		private Validator pen = new Validator(pfkeyField, "=");
		private Validator opid = new Validator(pfkeyField, "W");
		private Validator msre = new Validator(pfkeyField, "X");
		private Validator strf = new Validator(pfkeyField, "H");
		private Validator trig = new Validator(pfkeyField, "\"");
		private Validator pa1 = new Validator(pfkeyField, "%");
		private Validator pa2 = new Validator(pfkeyField, ">");
		private Validator pa3 = new Validator(pfkeyField, ",");
		private Validator pf0 = new Validator(pfkeyField, QUOTES);
		private Validator pf00 = new Validator(pfkeyField, QUOTES);
		private Validator pf1 = new Validator(pfkeyField, "1");
		private Validator pf01 = new Validator(pfkeyField, "1");
		private Validator pf2 = new Validator(pfkeyField, "2");
		private Validator pf02 = new Validator(pfkeyField, "2");
		private Validator pf3 = new Validator(pfkeyField, "3");
		private Validator pf03 = new Validator(pfkeyField, "3");
		private Validator pf4 = new Validator(pfkeyField, "4");
		private Validator pf04 = new Validator(pfkeyField, "4");
		private Validator pf5 = new Validator(pfkeyField, "5");
		private Validator pf05 = new Validator(pfkeyField, "5");
		private Validator pf6 = new Validator(pfkeyField, "6");
		private Validator pf06 = new Validator(pfkeyField, "6");
		private Validator pf7 = new Validator(pfkeyField, "7");
		private Validator pf07 = new Validator(pfkeyField, "7");
		private Validator pf8 = new Validator(pfkeyField, "8");
		private Validator pf08 = new Validator(pfkeyField, "8");
		private Validator pf9 = new Validator(pfkeyField, "9");
		private Validator pf09 = new Validator(pfkeyField, "9");
		private Validator pf10 = new Validator(pfkeyField, ":");
		private Validator pf11 = new Validator(pfkeyField, "#");
		private Validator pf12 = new Validator(pfkeyField, "@");
		private Validator pf13 = new Validator(pfkeyField, "A");
		private Validator pf14 = new Validator(pfkeyField, "B");
		private Validator pf15 = new Validator(pfkeyField, "C");
		private Validator pf16 = new Validator(pfkeyField, "D");
		private Validator pf17 = new Validator(pfkeyField, "E");
		private Validator pf18 = new Validator(pfkeyField, "F");
		private Validator pf19 = new Validator(pfkeyField, "G");
		private Validator pf20 = new Validator(pfkeyField, "H");
		private Validator pf21 = new Validator(pfkeyField, "I");
		private Validator pf23 = new Validator(pfkeyField, ".");
		private Validator pf24 = new Validator(pfkeyField, "<");

		private FixedLengthStringData pfkeyFieldPf22 = new FixedLengthStringData(2).isAPartOf(pfkeyFieldGrp, 0,
		    REDEFINE);
		private BinaryData apsPf22 = new BinaryData(4, 0).isAPartOf(pfkeyFieldPf22, 0);
		private Validator pf22 = new Validator(apsPf22, +74);
	}
}
